{"version":3,"sources":["services/configs/client.js","services/configs/server.js","services/configs/status.js","services/configs/browser.js","services/configs/gamesetting.js","tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","services/http/httpService.js","services/http/userServices.js","services/http/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameGuide.jsx","informations/ContactUs.jsx","commons/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","sidebars/SignInSideBar.jsx","services/http/noticeServices.js","sidebars/NoticeSideBar.jsx","sidebars/no-avatar.png","sidebars/OnlineStatistics.jsx","dashboard/actions/index.js","chat/GameChatRoom.jsx","sidebars/PlayerInfoSideBar.jsx","services/ws/GlobalSocketManager.jsx","users/AutoSignIn.jsx","layouts/MainLayout.jsx","tables/rankings/SinglePlayerCard.jsx","tables/rankings/AllPlayers.jsx","tables/rankings/Rankings.jsx","services/ws/gamePlaySocketServices.js","dashboard/withReduxDashboard.js","games/gameplay/BriefScoreboard.jsx","games/gameplay/TableDesign.jsx","games/gameplay/GamePlay.jsx","games/SingleGame.jsx","games/competitions/CompetitionSummary.jsx","games/competitions/CompetitionsMain.jsx","games/GameDeck.jsx","profile/NoticeManager.jsx","profile/AcountCredentials.jsx","profile/friendgames/no-avatar.png","profile/friendgames/Record.jsx","profile/friendgames/FriendRecords.jsx","profile/friendgames/MyGamesAndFriends.jsx","services/http/chatServices.js","chat/Message.jsx","chat/ChatBox.jsx","chat/ChatRoom.jsx","profile/panel/ProfilePanel.jsx","profile/panel/CollapsedPanel.jsx","layouts/ProfilePanelLayout.jsx","commons/NavigationBar.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/reducers/tools.js","dashboard/reducers/statistics.js","dashboard/reducers/message.js","dashboard/reducers/token.js","dashboard/store/index.js","index.js","services/configs/index.js"],"names":["Profile","module","exports","Root","SignUp","SignIn","GameDeck","Rankings","GameGuide","ContactUs","ChatRoom","MyGamesAndFriends","Notices","WebSocketRoot","wsGamePlayRoute","wsGlobalRoute","Users","Credentials","PasswordChange","Friends","Public","Administrators","Games","Mine","Chats","NoticeManagement","Successful","CreatedSuccessfully","BadRequest","Unauthorized","Forbidden","NotFound","NotAcceptable","Conflict","SessionExpired","UnprocessableEntity","InternalServerError","isErrorExpected","error","response","status","writeUser","id","token","sessionStorage","setItem","TOKEN","getItem","ID","T3D","TableRowMargings","TurnTimeOut","SingleScoreCard","Type","playerXName","playerOName","xScore","oScore","xBadgeColor","oBadgeColor","Card","border","className","Body","Row","Footer","Button","variant","block","size","AllScores","scores","console","log","length","map","score","players","name","gameID","Text","axios","defaults","headers","post","put","interceptors","request","use","config","browserStorage","Authorization","Promise","reject","expectedErrors","Status","toast","position","closeOnClick","http","get","delete","Server","Routes","userServices","signUp","user","JSON","stringify","signIn","getPlayer","userID","getAllPlayers","getMyCredentials","editMyCredentials","newMe","changeMyPassword","passwords","getMyFriends","isMyFriend","targetID","isAdministrator","gameServices","getAllGames","getMyGames","loadPlayerData","a","data","resolve","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","this","props","Device","Configs","allGames","then","result","reverse","filter","game","isLive","catch","err","Container","Col","onClick","Component","Header","href","LoadingBar","useState","whichOne","setWhichOne","useEffect","Math","floor","random","useLayoutEffect","document","body","style","overflowY","height","selectedLoader","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","Number","history","replace","onForgotPasswordClick","Modal","backdrop","show","onHide","closeButton","Form","onSubmit","Group","Label","Control","type","placeholder","autoComplete","value","onChange","e","target","controlId","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","newUser","fullname","success","warn","pattern","onInput","onInvalid","required","SignInSideBar","noticeServices","createNotice","notice","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","notices","setNotices","title","text","Alert","color","fontSize","uuidv1","OnlineStatistics","useSelector","statistics","games","ListGroup","Item","Badge","pill","LoadMe","payload","SetRoom","room","SendFriendRequestTo","SendMessageTo","friendID","GameChatRoom","myMessage","setMyMessage","message","dispatch","useDispatch","me","composeMessage","recieved","InputGroup","Prepend","width","PlayerInfoSideBar","inGame","personIsFriend","setPersonIsFriend","person","isFriend","Image","src","noAvatar","alt","index","Heading","shape","records","points","wins","draws","loses","innerHTML","disabled","onFriendRequestClick","GlobalSocketManager","socketGlobal","setSocketGlobal","incommingFriendRequest","setIncommingFriendRequest","showFriendshipModal","setShowFriendshipModal","opponent","tools","clientOnline","toggleClientOnline","enableGlobalTimer","useCallback","setInterval","send","clientID","msg","timerID","clearInterval","connect","socket","WebSocket","onopen","onmessage","parse","command","setTimeout","askerID","answer","targetName","warning","onerror","close","onclose","opponentSearchTriggered","friendRequest","askerName","respondToFriendshipRequest","sent","window","navigator","onLine","margin","AutoSignIn","storageUserID","pathname","location","scoreboard","leftSideBar","setLeftSideBar","rightSideBar","setRightSideBar","setPrimaryRightSideBar","Devices","Tablet","Client","SmartPhone","opp","xs","children","SinglePlayerCard","rowNumber","scope","AllPlayers","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","createSocketRequest","rname","playerID","roomName","gameType","server","withReduxDashboard","component","LoadOpponent","ResetOpponent","ResetRoom","SetGameID","UpdateScoreboard","details","CleanScoreboard","TriggerRecordUpdate","SaveNewToken","BriefScoreboard","timeRemaining","textAlign","TableDesign","dimension","table","onEachCellClick","dimens","i","push","bg","row","direction","marginLeft","GameSetting","column","GamePlay","lineColor","turn","myTurn","undefined","socketGamePlay","playerOnline","connectionCheckTimerID","LoadOpponentData","opponentID","updateGameScorebaord","oppTurn","enableTimerForMyMove","timeout","updatePlayerStates","disableAllTimers","clearTimeout","socketOnMessage","IDs","opponentIndex","cellID","nextMove","verifyAndApplyTheMove","getCellCoordinates","cellButtons","focus","endThisGame","closeThisGame","forceConnectWS","nextJob","enableConnectionCheckTimer","dimen","onFloorId","selectedCellButton","cell","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","connectTheScoreLines","count","firstCell","step","info","getElementsByClassName","RoomManager","friendlyGame","setRoomName","setGameType","searching","setSearching","onStartGameClick","padding","Radio","checked","CompetitionSummary","summary","CompetitionsMain","Tab","defaultActiveKey","sm","Nav","Link","eventKey","Content","Pane","Tabs","transition","SingleGame","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","createNewNotice","Date","saveChanges","as","calendar","persian","locale","persian_fa","calendarPosition","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","reloadPage","selectMode","Record","FriendRecords","friend","myFriends","setMyFriends","myGames","setMyGames","filterID","setFilterID","selectedFriendIndex","setSelectedFriendIndex","serverResponse","friends","onSelect","key","chatServices","getOurChat","Message","previousDay","inDesktop","date","showDate","setShowDate","setTime","persianDate","setPersianDate","persianDateObject","DateObject","format","getDate","ChatBox","mostRecentMessageRef","useRef","allMsgs","setAllMsgs","loadPreviousMessages","myIndex","chat","previousMsgs","owner","toString","recieveMessage","tempMsg","current","scrollIntoView","behavior","top","offsetTop","ref","Desktop","exact","to","isAdmin","ProfilePanelLayout","NavigationBar","Navbar","activeClassName","App","isDesktop","useMediaQuery","query","isSmartPhone","isTablet","device","setDevice","mode","path","reducers","combineReducers","action","clear","updateTriggered","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","getElementById","ClientRoutes","require","ServerRoutes"],"mappings":"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","file":"static/js/main.659fe41f.chunk.js","sourcesContent":["//client routes\r\n\r\n// Partial Routes\r\nconst Profile = \"/Profile\",\r\n    ChatRoom = \"ChatRoom\",\r\n    MyGamesAndFriends = \"GamesFriends\",\r\n    Notices = \"Notices\";\r\n\r\nmodule.exports = {\r\n    Root: \"/\",\r\n    SignUp: \"/SignUp\",\r\n    SignIn: \"/SignIn\",\r\n    GameDeck: \"/GameDeck\",\r\n    Rankings: \"/Rankings\",\r\n    GameGuide: \"/GameGuide\",\r\n    ContactUs: \"/ContacUs\",\r\n    Profile,\r\n    ChatRoom: `${Profile}/${ChatRoom}`,\r\n    MyGamesAndFriends: `${Profile}/${MyGamesAndFriends}`,\r\n    Notices: `${Profile}/${Notices}`,\r\n};\r\n","//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com/ws\",\r\n    wsGamePlayRoute: \"gameplay\",\r\n    wsGlobalRoute: \"global\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Credentials: \"credentials\",\r\n    PasswordChange: \"password\",\r\n    Friends: 'friends',\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    Mine: \"mine\",\r\n    Chats: \"chats\",\r\n    Notices: \"notices\",\r\n    NoticeManagement: \"manage\"\r\n};","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    SessionExpired: 420,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\nconst KeyToken = \"ptk\",\r\n    KeyID = \"pid\";\r\n\r\nmodule.exports = {\r\n    writeUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(KeyID, id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(KeyToken, token);\r\n    },\r\n    TOKEN: () => sessionStorage.getItem(KeyToken),\r\n    ID: () => sessionStorage.getItem(KeyID),\r\n};\r\n","module.exports = {\r\n    T3D: {\r\n        TableRowMargings: [0, 40, 80, 120, 160],\r\n        TurnTimeOut: 30, //secs\r\n    },\r\n};\r\n","import { Button, Card, Row } from \"react-bootstrap\";\r\nimport \"./scores.css\";\r\n\r\nconst SingleScoreCard = ({\r\n    Type,\r\n    playerXName,\r\n    playerOName,\r\n    xScore,\r\n    oScore,\r\n}) => {\r\n    // format score text:\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        oBadgeColor = \"badge-danger\";\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        xBadgeColor = \"badge-danger\";\r\n    }\r\n\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <Card border=\"dark\" className=\"single-score-card\">\r\n            {/* <Card.Header className=\"text-center border-dark\">{`T3D ${Type}x${Type}x${Type}`}</Card.Header> */}\r\n            <Card.Body>\r\n                <Row className=\"text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} single-score-badge col-1`}>\r\n                        {xScore}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} single-score-badge col-1`}>\r\n                        {oScore}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer className=\"p-0\">\r\n                <Button\r\n                    variant=\"outline-dark\"\r\n                    block\r\n                    size=\"lg\"\r\n                    className=\"replay-game-button\">\r\n                        مشخصات بازی\r\n                </Button>\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    console.log(scores);\r\n    return ( \r\n        <Fragment>\r\n            { scores.length ? scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    Type={score.Type}\r\n                    playerXName={score.players[0].name}\r\n                    playerOName={score.players[1].name}\r\n                    xScore={score.players[0].score}\r\n                    oScore={score.players[1].score}\r\n                ></SingleScoreCard>\r\n            )) :\r\n            <Card className=\"bg-transparent mx-auto mt-3\" border=\"danger\">\r\n                <Card.Body className=\"text-center\">\r\n                    <Card.Text>\r\n                        هیچ بازی ای انجام نگرفته اس\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                </Card>}\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Status, browserStorage } from \"../configs\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = browserStorage.TOKEN();\r\n        if (token) config.headers.Authorization = `Bearer ${token}`;\r\n        else config.headers.Authorization = \"\";\r\n        // console.log(config.headers.Authorization);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // what to do?\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= Status.BadRequest && // >= 400\r\n        error.response.status < Status.InternalServerError; // < 500\r\n\r\n        //*****notice: */\r\n        //remove some oftheese errors... because they need to be costomized in every use in each components\r\n    // change to switch\r\n    if (error.response.status === Status.BadRequest) {\r\n        toast.error(\r\n            \"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Unauthorized) {\r\n        toast.error(\r\n            \"احراز هویت موفقیت آمیز نبود. لطفا وارد حساب کاربری خود شوید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Forbidden) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.NotAcceptable) {//or used Locked: 423\r\n        toast.error(\"این قسمت فقط مختص کاربران ادمین می باشد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.Conflict) {\r\n        toast.error(\r\n            \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n    else if(error.response.status === Status.SessionExpired){\r\n        toast.error(\"نشست شما منقضی شده است، لطفا دوباره وارد حساب خود شوید.\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n        //redirect to sign in page !\r\n    }\r\n    else if (error.response.status === Status.UnprocessableEntity) {\r\n        toast.error(\"ورودی شما با استانداردهای سایت مطابقت ندارد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\r\n            \"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignUp}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        console.log(`${Server.Root}/${Server.Users}/${Server.SignIn}`);\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignIn}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Public}/${userID}`\r\n        );\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Public}`);\r\n    },\r\n    getMyCredentials: () => {\r\n        //token will be sent automatically, o.w. method doesnt return anything\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}`);\r\n    },\r\n    editMyCredentials: (newMe) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}`,\r\n            JSON.stringify(newMe)\r\n        );\r\n    },\r\n    changeMyPassword: (passwords) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.PasswordChange}`,\r\n            JSON.stringify(passwords)\r\n        );\r\n    },\r\n    getMyFriends: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}`);\r\n    },\r\n    isMyFriend: (targetID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}/${targetID}`\r\n        );\r\n    },\r\n    isAdministrator: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Administrators}/${userID}`\r\n        );\r\n    }\r\n};\r\n\r\nexport default userServices;","import { Routes, Status } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst gameServices = {\r\n    \r\n    getAllGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}`);\r\n    },\r\n    getMyGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}/${Server.Mine}`);\r\n    },\r\n    loadPlayerData: async(userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (userID === null) reject(null);\r\n            if (status === Status.Successful) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;","import \"./scores.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport Configs from \"../../services/configs\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log('CHecking prop: ', this.props.Device);\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllGames();\r\n            if (status === Configs.Status.Successful) return data.allGames;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                result = result.reverse();\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        // DESIGN : USE <Tabs> ???\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                !showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {/* this single column is to make mode select buttons and Allscores same width */}\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst GameGuide = () => {\r\n    return ( \r\n        <Card border=\"warning\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">راهنمای بازی</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default GameGuide;","import { Card } from 'react-bootstrap';\r\nimport './info.css'\r\n\r\nconst ContactUs = () => {\r\n    return ( \r\n        <Card border=\"dark\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default ContactUs;","import { Fragment, useLayoutEffect, useState, useEffect } from \"react\";\r\nimport { Planets, Circle2, Sugar } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    const [whichOne, setWhichOne] = useState(0);\r\n    useEffect(() => {\r\n        setWhichOne(Math.floor(Math.random() * 100)); //randomize animation\r\n    }, []);\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading, whichOne]); //may have bug yet!!\r\n    //random animation\r\n    const selectedLoader =\r\n        whichOne % 3 === 0 ? (\r\n            <Circle2 time={0} customLoading={loading} />\r\n        ) : whichOne % 3 === 1 ? (\r\n            <Planets time={0} customLoading={loading} />\r\n        ) : (\r\n            <Sugar time={0} customLoading={loading} />\r\n        );\r\n\r\n    return <Fragment>{loading ? selectedLoader : null}</Fragment>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                browserStorage.writeUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-2\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal\r\n                    backdrop=\"static\"\r\n                    show={showModal}\r\n                    onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    autoComplete=\"username\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <hr />\r\n                            <Row>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-warning\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from '../services/configs';\r\nimport { Card, Form , Button} from \"react-bootstrap\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    browserStorage.writeUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n                    // toast.error(\r\n                    //     \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                    //     {\r\n                    //         position: \"top-right\",\r\n                    //         closeOnClick: true,\r\n                    //     }\r\n                    // );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else if(!Configs.Status.isErrorExpected(err)){\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Card border=\"success\" className=\"sign-up-card\">\r\n                <LoadingBar loading={loading} />\r\n                <Card.Header className=\"bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام خانوادگی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">شماره دانشجویی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                autoComplete=\"username\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">ایمیل</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                autoComplete=\"new-password\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">تایید رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer className=\"border-primary bg-transparent\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card, Form, Button, Col, Row } from \"react-bootstrap\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                console.log(data);\r\n                browserStorage.writeUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <Card border=\"primary\" className=\"sign-in-sidebar\">\r\n                <Card.Header\r\n                    border=\"primary\"\r\n                    className=\"text-center text-primary\">\r\n                    ورود کاربران\r\n                </Card.Header>\r\n                <LoadingBar loading={loading} />\r\n                <Card.Body className=\"text-primary\">\r\n                    <Form onSubmit={(event) => this.onSignInSubmitted(event)} >\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            autoComplete=\"username\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"شماره دانشجویی\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"رمز عبور\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Card.Footer className=\"bg-transparent border-primary\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"success\"\r\n                                        className=\"sign-in-sidebar-buttons\">\r\n                                        <i\r\n                                            className=\"fa fa-sign-in px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ورود\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button\r\n                                        className=\"sign-in-sidebar-buttons\"\r\n                                        variant=\"warning\">\r\n                                        <i\r\n                                            className=\"fa fa-recycle px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        بازیابی پسورد\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Server.Root}/${Server.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nimport { toast } from \"react-toastify\";\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n\r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const { status, data } = await noticeServices.getShortNotices();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    \r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    if(data.notices.length === 0) {\r\n                        setNotices([{\r\n                            title: \"پیام\",\r\n                            text: \"اطلاعیه جدیدی وجود ندارد\",\r\n                        }]);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                const SanctionNotice = {\r\n                    title: \"تحریم Heroku\",\r\n                    text: \"با توجه به تحریم ایران توسط وبسایت هروکو، برخی آی پی ها برای اتصال به سرور، نیاز به روشن نمودن فیلترشکن دارند\",\r\n                };\r\n                setNotices([\r\n                    SanctionNotice,\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            }\r\n        })();\r\n        \r\n    }, []);\r\n    \r\n    return (\r\n        <Card className=\"notice-sidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.length > 0 && notices.map((notice) => {\r\n                    return (\r\n                        <Fragment key={uuidv1()}>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-info-circle px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Badge, Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst OnlineStatistics = () => {\r\n    const {players, games} = useSelector((state) => state.statistics);\r\n    return (\r\n        <ListGroup className=\"list-group list-group-flush\">\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-wifi px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            کاربران آنلاین\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {players}\r\n                        </Badge>\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی های فعال\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {games}\r\n                        </Badge>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default OnlineStatistics;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const SaveNewToken = () => ({\r\n    type: \"SAVE_TOKEN\"\r\n})\r\n\r\nexport const TriggerRecordUpdate = () => ({\r\n    type: \"TRIGGER_UPDATE\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\nexport const ResetRoom = () => ({\r\n    type: \"RESET_ROOM\",\r\n});\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n\r\nexport const UpdateStatistics = (statistics) => ({\r\n    type: \"UPDATE_STATISTICS\",\r\n    payload: statistics,\r\n});\r\n\r\nexport const TriggerOpponentSearch = () => ({\r\n    type: \"TRIGGER_OPPONENT_SEARCH\"\r\n})\r\n\r\nexport const SendFriendRequestTo = (targetID) => ({\r\n    type: \"SEND_FRIEND_REQUEST\",\r\n    payload: targetID\r\n})\r\n\r\nexport const SendMessageTo = (name, friendID, text) => ({\r\n    type: \"SEND_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const RecieveMessageFrom = (name, friendID, text) => ({\r\n    type: \"RECIEVE_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const ResetMessages = () => ({\r\n    type: \"RESET_MESSAGES\"\r\n});","import { Alert, Button, Form, Row, InputGroup } from \"react-bootstrap\";\r\nimport {  useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendMessageTo } from \"../dashboard/actions\";\r\n\r\nconst GameChatRoom = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(\"\");\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n\r\n    const composeMessage = (event) => {\r\n        event.preventDefault();\r\n        dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={(event) => composeMessage(event)}>\r\n            <Row className=\"w-100 mt-3 mx-auto\">\r\n                <Alert className=\"w-100 text-right\" variant=\"info\">\r\n                    {message.recieved ? message.recieved.text : null}\r\n                </Alert>\r\n            </Row>\r\n            <Row className=\"w-100 mx-auto mb-3\">\r\n                <InputGroup className=\"w-100\">\r\n                    <InputGroup.Prepend style={{ width: \"10%\" }}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"mx-auto\"\r\n                            variant=\"outline-info\">\r\n                            <i\r\n                                className=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </InputGroup.Prepend>\r\n\r\n                    <InputGroup.Prepend style={{ width: \"90%\" }}>\r\n                        <Form.Control\r\n                            placeholder=\"پیام...\"\r\n                            value={myMessage}\r\n                            onChange={(e) => setMyMessage(e.target.value)}\r\n                            className=\"text-right\"></Form.Control>\r\n                    </InputGroup.Prepend>\r\n                </InputGroup>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default GameChatRoom;\r\n","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Badge,\r\n    Image,\r\n    ListGroup,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport OnlineStatistics from \"./OnlineStatistics\";\r\nimport { SendFriendRequestTo } from \"../dashboard/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport GameChatRoom from \"../chat/GameChatRoom\";\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { inGame } = props;\r\n    const me = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const [personIsFriend, setPersonIsFriend] = useState(false);\r\n\r\n    const person = props.person ? props.person : me;\r\n    \r\n    const onFriendRequestClick = (event) => {\r\n        event.target.innerHTML = \"ارسال شد...\";\r\n        event.target.disabled = true;\r\n        dispatch(SendFriendRequestTo(person.userID));\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (me && person.userID !== me.userID) {\r\n            (async () => {\r\n                try {\r\n                    const { status, data } = await userServices.isMyFriend(\r\n                        person.userID\r\n                    );\r\n                    if (status === Configs.Status.Successful) {\r\n                        setPersonIsFriend(data.isFriend);\r\n                    }\r\n                } catch (err) {\r\n                    // handle error.\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [person, me]);\r\n    if(!person) return null;\r\n    return (\r\n        <Card border=\"info\" className=\"player-info-sideBar\">\r\n            <Card.Header className=\"text-center text-info form-inline\">\r\n                <Col>\r\n                    <Card.Text className=\"text-left\">{person.fullname}</Card.Text>\r\n                </Col>\r\n                <Col>\r\n                    <Image\r\n                        className=\"card-img-top player-avatar\"\r\n                        src={noAvatar}\r\n                        alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n                    />\r\n                </Col>\r\n            </Card.Header>\r\n\r\n            <Card.Body>\r\n                <ListGroup className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <ListGroup.Item>\r\n                            <Alert\r\n                                variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading className=\"text-center\">\r\n                                    {inGame.score} : {inGame.shape}\r\n                                </Alert.Heading>\r\n                            </Alert>\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>امتیاز بازیکن</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>تعداد بردها</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.wins}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">تعداد تساوی ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.draws}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">تعداد باخت ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.loses}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {me === person ? (\r\n                    <OnlineStatistics />\r\n                ) : personIsFriend ? (\r\n                    <GameChatRoom friendID={person.userID} />\r\n                ) : (\r\n                    <Button\r\n                        variant={\"outline-info\"}\r\n                        block\r\n                        onClick={(event) => onFriendRequestClick(event)}>\r\n                        <i\r\n                            className=\"fa fa-handshake-o px-2\"\r\n                            aria-hidden=\"true\"></i>\r\n                        درخواست دوستی\r\n                    </Button>\r\n                )}\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","import { browserStorage, Routes } from \"../configs\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    TriggerOpponentSearch,\r\n    UpdateStatistics,\r\n    SetRoom,\r\n    SendFriendRequestTo,\r\n    RecieveMessageFrom,\r\n    ResetMessages,\r\n} from \"../../dashboard/actions\";\r\nimport { Modal, Button, Row, Col, Badge } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst GlobalSocketManager = () => {\r\n    // I actually used .jsx format to make this Component EventBased\r\n    // On Each event called socket will do some specific operation\r\n    // events are actually useEffects bound to special state changes\r\n    const [socketGlobal, setSocketGlobal] = useState(null);\r\n    const [incommingFriendRequest, setIncommingFriendRequest] = useState(null);\r\n    const [showFriendshipModal, setShowFriendshipModal] = useState(false);\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const tools = useSelector((state) => state.tools);\r\n    const room = useSelector((state) => state.room);\r\n    const message = useSelector((state) => state.message);\r\n    const [clientOnline, toggleClientOnline] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const enableGlobalTimer = useCallback(() => {\r\n        return setInterval(() => {\r\n            if (socketGlobal) {\r\n                console.log(\"updating statistics...\");\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"online\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                );\r\n            }\r\n        }, 300000); // every 5 MINUTES request number of online members to update the site\r\n    }, [socketGlobal, player]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"global timer enabled\");\r\n        const timerID = enableGlobalTimer();\r\n\r\n        return () => {\r\n            console.log(\"global timer disabled\");\r\n            clearInterval(timerID);\r\n        };\r\n    }, [enableGlobalTimer]);\r\n\r\n    const connect = useCallback(() => {\r\n        return new Promise((resolve, reject) => {\r\n            var socket = new WebSocket(\r\n                `${Routes.Server.WebSocketRoot}/${Routes.Server.wsGlobalRoute}`\r\n            );\r\n            socket.onopen = () => {\r\n                socket.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"online\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                ); //temp\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onmessage = (response) => {\r\n                const { data } = response;\r\n                const { command, msg } = JSON.parse(data);\r\n                switch (command) {\r\n                    case \"ONLINE\": {\r\n                        const { players, games } = msg;\r\n                        dispatch(\r\n                            UpdateStatistics({\r\n                                players,\r\n                                games,\r\n                            })\r\n                        ); //playing temp\r\n                        break;\r\n                    }\r\n                    case \"ENTER_ROOM\": {\r\n                        if (msg) {\r\n                            console.log(\"your room\", msg);\r\n                            dispatch(SetRoom(msg));\r\n                            socket.send(\r\n                                JSON.stringify({\r\n                                    token: browserStorage.TOKEN(),\r\n                                    request: \"online\",\r\n                                    clientID: player.userID,\r\n                                    msg: null,\r\n                                })\r\n                            );\r\n                        } else {\r\n                            //search again 5s later\r\n                            // **********************\r\n                            //time out must be set with rising time out time to prevent server getting fucked up\r\n                            setTimeout(() => {\r\n                                dispatch(TriggerOpponentSearch());\r\n                            }, 5000);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_REQUEST\": {\r\n                        if (msg.askerID === opponent.userID) {\r\n                            //if both players are in game then ask immidiately\r\n                            setIncommingFriendRequest(msg);\r\n                            setShowFriendshipModal(true);\r\n                        } else {\r\n                            //if the friend request is comming from some one else then manage it differently\r\n                            //...\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_RESPONSE\": {\r\n                        const { answer, targetName } = msg;\r\n                        //if(answer) dispatch(TriggerRecordUpdate());\r\n                        toast.warning(\r\n                            `کاربر ${targetName} درخواست دوستی شما را ${\r\n                                answer ? \"پذیرفت\" : \"رد کرد\"\r\n                            }`\r\n                        );\r\n                        dispatch(SendFriendRequestTo(null));\r\n                        break;\r\n                    }\r\n                    case \"CHAT\": {\r\n                        dispatch(\r\n                            RecieveMessageFrom(msg.name, msg.friendID, msg.text)\r\n                        );\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        //... whatever\r\n                        break;\r\n                    }\r\n                }\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onerror = (error) => {\r\n                // console.log(`WebSocket error: ${error}`);\r\n                socket.close();\r\n                reject(error);\r\n            };\r\n\r\n            socket.onclose = () => {\r\n                // reconnectr or what?\r\n                console.log(\"Reconnecting in  5 seconds\");\r\n                setTimeout(() => {\r\n                    (async () => {\r\n                        try {\r\n                            console.log(\"global socket online request\");\r\n                            let socket = player ? await connect() : null;\r\n                            setSocketGlobal(socket);\r\n                        } catch (err) {\r\n                            console.log(err);\r\n                        }\r\n                    })();\r\n                }, 5000);\r\n                resolve(null);\r\n                // this part needs editing ? maybe not\r\n            };\r\n        });\r\n    }, [dispatch, opponent, player]);\r\n\r\n    // EVENT NAME: PlayerUpdateEvent\r\n    // happens when player sign in status changes => set ups global socket connection and then if signed in=> reads number of online users in page\r\n    useEffect(() => {\r\n        if (clientOnline && player) {\r\n            (async () => {\r\n                try {\r\n                    console.log(\"global socket online request\");\r\n                    let socket = player ? await connect() : null;\r\n                    setSocketGlobal(socket);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [clientOnline, player, connect]);\r\n\r\n    // EVENT NAME: RandomGameInitiated Event\r\n    // happens when user clicks on 'Random Game\" Tab search button => sends opponent search request to server\r\n    useEffect(() => {\r\n        if (room.type) {\r\n            //is it necessary?\r\n            //completely making sure we're on right stage\r\n            if (!room.name && socketGlobal && player)\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"find\",\r\n                        clientID: player.userID,\r\n                        msg: room.type,\r\n                    })\r\n                );\r\n        } else if (!room.name) {\r\n            //room --> {null,null} --> means room has been reset hand u need to remove\r\n            if (socketGlobal)\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"close_game\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                );\r\n        }\r\n    }, [player, room, tools.opponentSearchTriggered, socketGlobal]);\r\n\r\n    useEffect(() => {\r\n        if (tools.friendRequest) {\r\n            //tools.friendRequest either contains null => no request, or contains target ID for friendship\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    token: browserStorage.TOKEN(),\r\n                    request: \"ask_friendship\",\r\n                    clientID: player.userID,\r\n                    msg: {\r\n                        targetID: tools.friendRequest,\r\n                        askerName: player.fullname,\r\n                    },\r\n                })\r\n            );\r\n        }\r\n    }, [tools.friendRequest, socketGlobal, player]);\r\n\r\n    const respondToFriendshipRequest = (answer) => {\r\n        // handle multiple requests *************\r\n        socketGlobal.send(\r\n            JSON.stringify({\r\n                token: browserStorage.TOKEN(),\r\n                request: \"respond_friendship\",\r\n                clientID: player.userID,\r\n                msg: {\r\n                    answer,\r\n                    targetName: player.fullname,\r\n                    askerID: incommingFriendRequest.askerID,\r\n                },\r\n            })\r\n        );\r\n        // if(answer) dispatch(TriggerRecordUpdate());\r\n        setShowFriendshipModal(false);\r\n        setIncommingFriendRequest(null);\r\n        dispatch(SendFriendRequestTo(null)); //reset friend request targetID to prevent any future problm\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (message.sent) {\r\n            //if destination is determined, otherwise => means no message has been sent\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    token: browserStorage.TOKEN(),\r\n                    request: \"chat\",\r\n                    clientID: player.userID,\r\n                    msg: message.sent,\r\n                })\r\n            );\r\n            console.log(\"sent: \" + message.sent.text);\r\n            dispatch(ResetMessages());\r\n        }\r\n    }, [player, message, socketGlobal, dispatch]);\r\n\r\n    // if online status changes\r\n    setInterval(() => {\r\n        if (window.navigator.onLine) {\r\n            //client online\r\n            if (!clientOnline)\r\n                //this means -> client JUST became online\r\n                toggleClientOnline(true); //change connection status\r\n        } else {\r\n            // clients offline\r\n            if (clientOnline)\r\n                //this means -> client JUST became offline now\r\n                toggleClientOnline(false); //change connection status\r\n        }\r\n    }, 5000);\r\n\r\n    // is it really necessary though ?????\r\n\r\n    return (\r\n        //this is just for firendship request in games\r\n        <Modal\r\n            show={showFriendshipModal}\r\n            onHide={() => respondToFriendshipRequest(false)}>\r\n            <Modal.Header closeButton />\r\n            <Modal.Body className=\"text-right\">\r\n                <p>\r\n                    {!incommingFriendRequest ? null : (\r\n                        <Badge\r\n                            style={{ fontSize: \"18px\", margin: \"2%\" }}\r\n                            pill\r\n                            variant=\"warning\">\r\n                            {incommingFriendRequest.askerName}\r\n                        </Badge>\r\n                    )}\r\n                    به شما پیشنهاد دوستی داده است.\r\n                </p>\r\n                <p>اگر تمایل به دوستی ندارید میتواند درخواست را رد کنید.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"w-100 text-right\">\r\n                <Row className=\"w-100\">\r\n                    <Col>\r\n                        <Button\r\n                            variant=\"success\"\r\n                            block\r\n                            onClick={() => respondToFriendshipRequest(true)}>\r\n                            پذیرفتن\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            block\r\n                            variant=\"danger\"\r\n                            onClick={() => respondToFriendshipRequest(false)}>\r\n                            رد\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default GlobalSocketManager;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { LoadMe, SignOut } from \"../dashboard/actions\";\r\nimport { browserStorage } from \"../services/configs\";\r\nimport gameServices from \"./../services/http/gameServices\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// auto-sign in if store sign in data was reset\r\nconst AutoSignIn = () => {\r\n    const storageUserID = browserStorage.ID();\r\n    const dispatch = useDispatch();\r\n    const opponent = useSelector((state) => state.opponent);\r\n    useEffect(() => {\r\n        console.log(\"storageUserID user changed\");\r\n        if (storageUserID) {\r\n            console.log(\"auth called\");\r\n            gameServices\r\n                .loadPlayerData(storageUserID)\r\n                .then((result) => {\r\n                    dispatch(LoadMe(result));\r\n                    //dispatch(SaveNewToken());\r\n                })\r\n                .catch((err) => {\r\n                    dispatch(LoadMe(null));\r\n                    //dispatch(SaveNewToken());\r\n                });\r\n        }\r\n        else{\r\n            dispatch(LoadMe(null))\r\n        }\r\n    }, [storageUserID, opponent, dispatch]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default AutoSignIn;\r\n","import SignInSideBar from \"../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Fragment, useState, useEffect } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport GlobalSocketManager from \"../services/ws/GlobalSocketManager\";\r\nimport { Devices, Routes } from \"../services/configs\";\r\nimport AutoSignIn from './../users/AutoSignIn';\r\n\r\nconst MainLayout = (props) => {\r\n    const { Device } = props;\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const scoreboard = useSelector((state) => state.scoreboard);\r\n    const dispatch = useDispatch();\r\n\r\n    const [leftSideBar, setLeftSideBar] = useState(null);\r\n    const [rightSideBar, setRightSideBar] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setLeftSideBar(<NoticeSideBar />);\r\n    }, []);\r\n\r\n    //teste\r\n    //determine sidebar\r\n    useEffect(() => {\r\n        console.log(\"device responsive manager called\");\r\n        const setPrimaryRightSideBar = () => {\r\n            if (Device !== Devices.Tablet)\r\n                setRightSideBar(\r\n                    player ? (\r\n                        <PlayerInfoSideBar inGame={scoreboard.me} />\r\n                    ) : (\r\n                        <SignInSideBar />\r\n                    )\r\n                );\r\n            else setRightSideBar(null);\r\n        };\r\n        if (pathname === Routes.Client.SignUp) {\r\n            setRightSideBar(null);\r\n            setLeftSideBar(null);\r\n        } else if (pathname === Routes.Client.GameDeck) {\r\n            // EDIT THIS..\r\n            // ON REFRESH -> rightSideBar is null!\r\n            // SOMETIMES: ERROR: cannout read .fullname of undefined person\r\n            setPrimaryRightSideBar();\r\n            if (opponent) {\r\n                if (Device !== Devices.SmartPhone) {\r\n                    setLeftSideBar(\r\n                        <PlayerInfoSideBar\r\n                            person={opponent}\r\n                            inGame={scoreboard.opp}\r\n                        />\r\n                    );\r\n                } else {\r\n                    setLeftSideBar(null);\r\n                    setRightSideBar(null);\r\n                }\r\n            }\r\n        } else {\r\n            setLeftSideBar(<NoticeSideBar />); //EDIT THIS\r\n            setPrimaryRightSideBar();\r\n        }\r\n    }, [player, opponent, pathname, scoreboard, Device]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <AutoSignIn />\r\n            {player && <GlobalSocketManager />}\r\n\r\n            {Device !== Devices.SmartPhone ? (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {rightSideBar && <Col xs={3}>{rightSideBar}</Col>}\r\n                    <Col\r\n                        className=\"mx-auto\"\r\n                        xs={pathname !== Routes.Client.SignUp ? null : 7}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {leftSideBar && (\r\n                        <Col xs={Device !== Device.Tablet ? 3 : 4}>\r\n                            {leftSideBar}\r\n                        </Col>\r\n                    )}\r\n                </Row>\r\n            ) : (\r\n                <Container>\r\n                    {/* what to do for control panelk sidebar in smartphone */}\r\n                    {player ? (\r\n                        <Row className=\"w-100 mx-auto\">{rightSideBar}</Row>\r\n                    ) : null}\r\n                    <Row className=\"w-100 mx-auto\">{leftSideBar}</Row>\r\n                    <Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n                </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"5px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n            <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                <thead className=\"bg-info\">\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">نام بازیکن</th>\r\n                        <th scope=\"col\">امتیاز</th>\r\n                        <th scope=\"col\">تعداد برد</th>\r\n                        <th scope=\"col\">تعداد باخت</th>\r\n                        <th scope=\"col\">تعداد تساوی</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {players.map((player) => (\r\n                        <SinglePlayerCard\r\n                            key={player.userID}\r\n                            rowNumber={\r\n                                players.findIndex(\r\n                                    (p) => p.userID === player.userID\r\n                                ) + 1\r\n                            }\r\n                            name={player.fullname}\r\n                            points={player.records.points}\r\n                            wins={player.records.wins}\r\n                            loses={player.records.loses}\r\n                            draws={player.records.draws}></SinglePlayerCard>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport LoadingBar from \"../../commons/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <Row className=\"mx-auto mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <AllPlayers players={players} />\r\n                </Row>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import {browserStorage, Routes} from '../configs';\r\n\r\nexport const createSocketRequest = (request, rname, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        rname,\r\n        playerID,\r\n        token: browserStorage.TOKEN(),\r\n        msg,\r\n    });\r\n\r\nexport const connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(`${Routes.Server.WebSocketRoot}/${Routes.Server.wsGamePlayRoute}`);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            \r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n    ResetRoom,\r\n    TriggerRecordUpdate,\r\n    SaveNewToken\r\n    // UpdateStatistics,\r\n    // TriggerOpponentSearch,\r\n    // SendFriendRequestTo,\r\n    // SendMessageTo,\r\n    // RecieveMessageFrom,\r\n    // ResetMessages,\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n        tools: state.tools,\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        ResetRoom: () => dispatch(ResetRoom()),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n        TriggerRecordUpdate: () => dispatch(TriggerRecordUpdate()),\r\n        SaveNewToken: () => dispatch(SaveNewToken())\r\n        //for memory managment these are commented because they arent used in Class Components yet\r\n        //UpdateStatistics: (stat) => dispatch(UpdateStatistics(stat)),\r\n        //TriggerOpponentSearch: () => dispatch(TriggerOpponentSearch()),\r\n        //SendFriendRequestTo: () => dispatch(SendFriendRequestTo()),\r\n        //SendMessageTo: (name, friendID, text) => dispatch(SendMessageTo(name, friendID, text)),\r\n        //RecieveMessageFrom: (name, friendID, text) => dispatch(RecieveMessageFrom(name, friendID, text)),\r\n        //ResetMessages: () => dispatch(ResetMessages())\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Card, Col, Row } from \"react-bootstrap\";\r\n\r\nconst BriefScoreboard = ({ timeRemaining, players }) => {\r\n    return (\r\n        <Card.Header className=\"w-100 text-center\">\r\n            <Row style={{ fontSize: \"20px\" }}>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"right\",\r\n                        color: players[1].color,\r\n                    }}>\r\n                    {players[1].shape} : {players[1].score}\r\n                </Col>\r\n                <Col>\r\n                    <Card.Text\r\n                        className={\r\n                            timeRemaining >= 10 ? \"text-success\" : \"text-danger\"\r\n                        }>\r\n                        {timeRemaining > 0 && <i\r\n                            className=\"fa fa-clock-o px-2\"\r\n                            aria-hidden=\"true\"></i>}\r\n                        {timeRemaining > 0 ? timeRemaining : \"نوبت حریف\"}\r\n                    </Card.Text>\r\n                </Col>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        color: players[0].color,\r\n                    }}>\r\n                    {players[0].score} : {players[0].shape}\r\n                </Col>\r\n            </Row>\r\n        </Card.Header>\r\n    );\r\n};\r\n\r\nexport default BriefScoreboard;\r\n","import { Fragment } from \"react\";\r\nimport { Button, Card, Row } from \"react-bootstrap\";\r\nimport { GameSetting } from \"../../services/configs\";\r\nimport BriefScoreboard from \"./BriefScoreboard\";\r\nimport \"../games.css\";\r\n\r\nconst TableDesign = ({ timeRemaining, dimension, players, table, onEachCellClick }) => {\r\n    let dimens = [];\r\n    for (let i = 0; i < dimension; i++) dimens.push(i);\r\n\r\n    //prop drilling in BriefScoreBoard\r\n    return (\r\n        <Card\r\n            bg=\"transparent\"\r\n            border=\"dark\"\r\n            className=\"w-100 mx-auto\">\r\n            <BriefScoreboard timeRemaining={timeRemaining} players={players} />\r\n            <Card.Body className=\"game-border-card\">\r\n                {table ? (\r\n                    dimens.map((floor) => (\r\n                        <Fragment>\r\n                            {dimens.map((row) => (\r\n                                <Row\r\n                                    style={{\r\n                                        direction: \"ltr\",\r\n                                        marginLeft: `${GameSetting.T3D.TableRowMargings[row]}px`,\r\n                                    }}>\r\n                                    {dimens.map((column) => (\r\n                                        <Button\r\n                                            key={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            variant=\"btn btn-outline-dark\"\r\n                                            className=\"game-table-cells\"\r\n                                            style={\r\n                                                table[floor][row][column] !==\r\n                                                null\r\n                                                    ? {\r\n                                                          color: players[\r\n                                                              table[floor][row][\r\n                                                                  column\r\n                                                              ]\r\n                                                          ].color,\r\n                                                      }\r\n                                                    : null\r\n                                            }\r\n                                            id={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            onClick={(event) =>\r\n                                                onEachCellClick(event)\r\n                                            }>\r\n                                            {table[floor][row][column] !==\r\n                                                null &&\r\n                                                players[\r\n                                                    table[floor][row][column]\r\n                                                ].shape}\r\n                                        </Button>\r\n                                    ))}\r\n                                </Row>\r\n                            ))}\r\n                            <br />\r\n                        </Fragment>\r\n                    ))\r\n                ) : (\r\n                    <p> در حال اتصال... </p>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TableDesign;\r\n","import { Component } from \"react\";\r\nimport \"../games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport {\r\n    connect,\r\n    createSocketRequest,\r\n} from \"../../services/ws/gamePlaySocketServices\";\r\nimport withReduxDashboard from \"../../dashboard/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\nimport TableDesign from \"./TableDesign\";\r\nimport { GameSetting } from \"../../services/configs\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n                color: \"blue\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketGamePlay: undefined,\r\n        playerOnline: true,\r\n        timeRemaining: 0, //create a config\r\n        timerID: null,\r\n        connectionCheckTimerID: null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                    toast.warn(\"حرف شما وارد بازی شد\");\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n\r\n    enableTimerForMyMove = (timeout = GameSetting.T3D.TurnTimeOut) => {\r\n        this.setState({ timeRemaining: timeout });\r\n        //is it needed to declare timerID as state?\r\n        const timerID = setInterval(() => {\r\n            const { timeRemaining, timerID } = this.state;\r\n            if (timeRemaining <= 0) {\r\n                clearInterval(timerID);\r\n                return;\r\n            }\r\n            this.setState({ timeRemaining: this.state.timeRemaining - 1 });\r\n        }, 1000);\r\n        this.setState({ timerID });\r\n    };\r\n\r\n    updatePlayerStates = ({ turn, xScore, oScore }) => {\r\n        const players = [...this.state.players];\r\n        players[0].score = xScore;\r\n        players[1].score = oScore;\r\n        this.setState({\r\n            players,\r\n            turn,\r\n        });\r\n    };\r\n\r\n    disableAllTimers = () => {\r\n        const { connectionCheckTimerID, timerID } = this.state;\r\n        clearTimeout(connectionCheckTimerID);\r\n        clearTimeout(timerID); //move time out timer\r\n    };\r\n\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") this.setState({ myTurn: Number(msg) });\r\n        else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const { IDs, gameType } = msg;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.setState({ dimension: gameType });\r\n\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const { players } = this.state;\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"TIMER\") {\r\n            //you can calculate request respone time -> then minimize it from tiem sent by server -> to gain acurate time\r\n            //but its real neccessary, Math.floor on the server side does this nearly\r\n            //but for accurate approach remember: remove Math.floor from server side\r\n            console.log(\"time updated: \", msg);\r\n            this.setState({ timeRemaining: msg });\r\n            clearTimeout(this.state.timerID); //clear move time out timers, though their disabled before, this is for assurance\r\n            this.enableTimerForMyMove(msg);\r\n        } else if (command === \"SCORES\") this.updatePlayerStates(msg);\r\n        else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            const { dimension } = this.state;\r\n            const cellID = Number(msg.nextMove);\r\n            //*************** */\r\n            //is this needed to check the move in client? considering that complete check has been made in client\r\n            //and consder that: checking move in client may cause some bugs\r\n            //for ex: new move is sent -> and 'cause of some error the cell is not empty\r\n            //turn is not updated and this player can not make new moves to recieve server's table!!!\r\n            this.verifyAndApplyTheMove(\r\n                this.getCellCoordinates(cellID, dimension),\r\n                this.cellButtons[cellID]\r\n            );\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            this.updatePlayerStates(msg);\r\n\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n\r\n            // now inform the server that the move is recieved\r\n            //force connect it?\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\r\n                    \"move_recieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            // server time out is set and now setInterval for this client to show how much time left\r\n            this.enableTimerForMyMove();\r\n        } else if (command === \"MOVE_MISSED\") {\r\n            const { myTurn } = this.state;\r\n            const { player, room } = this.props;\r\n            //msg --> forced set turn\r\n            this.setState({ turn: msg });\r\n            if (msg === myTurn) {\r\n                //send a move_recieved request to inform the server to set the new timeout\r\n                //force connect it?\r\n                this.state.socketGamePlay.send(\r\n                    createSocketRequest(\r\n                        \"move_recieved\",\r\n                        room.name,\r\n                        player.userID,\r\n                        true\r\n                    )\r\n                );\r\n                this.enableTimerForMyMove();\r\n            }\r\n        } else if (command === \"END\") {\r\n            this.updatePlayerStates(msg);\r\n            this.endThisGame();\r\n            this.disableAllTimers();\r\n        } else if (command === \"CLOSE\") {\r\n            toast.warn(\r\n                \"بدلیل حاضر نبودن هیچ کدام از بازیکینان، بازی شما کنسل شد\",\r\n                { position: \"top-right\", closeOnClick: true }\r\n            );\r\n            this.closeThisGame();\r\n        } else {\r\n            console.log(\"wrong socket request\");\r\n        }\r\n    };\r\n\r\n    forceConnectWS = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await connect(room.name, player.userID, room.type);\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketGamePlay: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n            // **********************\r\n            //time out must be set with rising time out time to prevent server getting fucked up\r\n            setTimeout(\r\n                () => {\r\n                    console.log(\"rconnecting from GamePlay\");\r\n                    this.forceConnectWS(nextJob);\r\n                },\r\n                nextJob ? 1000 : 3000\r\n            );\r\n            //if there is a next job --> then player is sending a move or something important and\r\n            //time out needs to be called quicker 'cause players have timeout in server for sending moves\r\n        }\r\n    };\r\n\r\n    enableConnectionCheckTimer = () => {\r\n        return setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (!this.state.playerOnline) {\r\n                    //player JUST became online\r\n                    console.log(\"connected\");\r\n                    this.setState({ playerOnline: true }); // toggle online status\r\n                    this.forceConnectWS(null); // reconnect to gamePlayWebSocket\r\n                }\r\n            } else if (this.state.playerOnline) {\r\n                //player JUST became offline\r\n                console.log(\"dissconnected\");\r\n                this.setState({ playerOnline: false });\r\n            }\r\n        }, 2500); //2.5 sec is it ok?\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"game-table-cells\"); // pay attension to searched className! may cause an error\r\n\r\n        const { player, room } = this.props;\r\n        const { myTurn } = this.state;\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectWS(() => {\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\"load\", room.name, player.userID, null)\r\n            );\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\"mytimer\", room.name, player.userID, myTurn)\r\n            );\r\n        });\r\n\r\n        console.log(\"TOO MANY UNNEEDED PROPS SENT: \", this.props);\r\n        this.setState({\r\n            connectionCheckTimerID: this.enableConnectionCheckTimer(),\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.disableAllTimers();\r\n    }\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension, turn, timerID } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                //this is just for when the connection is not automatically came back, so the user via clicking cells can initiate connection\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    //is this needed really?\r\n                    this.forceConnectWS(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n\r\n                    this.setState({ turn: (turn + 1) % 2 });\r\n                    this.forceConnectWS(() => {\r\n                        this.state.socketGamePlay.send(\r\n                            createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        //load is not needed cause i updated server to send back new scores immediately\r\n                        /*this.state.socketGamePlay.send(\r\n                            createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );*/\r\n                    });\r\n                    clearInterval(timerID);\r\n                    this.setState({ timeRemaining: 0 });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.value = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({ table: tempTable });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"game-table-cells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"game-table-cells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    closeThisGame = () => {\r\n        this.state.socketGamePlay.close();\r\n        this.setState({ socketGamePlay: null });\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.ResetRoom();\r\n            this.props.TriggerRecordUpdate();\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n\r\n    endThisGame = () => {\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        //NOTE: u can deliver this message to socket global to make sure toast shows all the tie but its no need really :|\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else toast.error(\"تکبیر!\");\r\n        //reset everything:\r\n        this.closeThisGame();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <TableDesign\r\n                dimension={this.state.dimension}\r\n                players={this.state.players}\r\n                table={this.state.table}\r\n                timeRemaining={this.state.timeRemaining}\r\n                onEachCellClick={this.onEachCellClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectWS(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectWS(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom, TriggerOpponentSearch } from \"../dashboard/actions\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport LoadingBar from '../commons/LoadingBar';\r\n\r\nconst RoomManager = ({ friendlyGame }) => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n        if (friendlyGame) dispatch(SetRoom({ name: roomName, type: gameType }));\r\n        // random game:\r\n        else {\r\n            dispatch(SetRoom({ name: null, type: gameType }));\r\n            dispatch(TriggerOpponentSearch());\r\n            setSearching(true);\r\n        }\r\n    };\r\n\r\n    //on destroy\r\n    useEffect(() => {\r\n        return () => {\r\n            setSearching(false); //make sure preloader turns off\r\n         }\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <LoadingBar loading={searching} />\r\n            <hr />\r\n            <Form onSubmit={(event) => onStartGameClick(event)}>\r\n                <Form.Group className=\"form-inline\">\r\n                    <Form.Label className=\"w-25\">ابعاد جدول</Form.Label>\r\n                    <InputGroup\r\n                        style={{\r\n                            border: \"1px solid orange\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"2px\",\r\n                        }}>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"3\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)}\r\n                            />\r\n                            <InputGroup.Text>3 * 3 * 3</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"4\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)}\r\n                            />\r\n                            <InputGroup.Text>4 * 4 * 4</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"5\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)}\r\n                            />\r\n                            <InputGroup.Text>5 * 5 * 5</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <hr />\r\n                {friendlyGame && (\r\n                    \r\n                    <Form.Group className=\"mt-3 form-inline\">\r\n                        \r\n                        <Form.Label className=\"w-25\">نام روم</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"w-75 text-left bg-transparent\"\r\n                            placeholder=\"Room Name\"\r\n                            value={roomName}\r\n                            required=\"required\"\r\n                            onChange={(event) =>\r\n                                setRoomName(event.target.value)\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                )}\r\n                <hr />\r\n                <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                    <i\r\n                        className={`fa ${\r\n                            friendlyGame ? \"fa-handshake-o\" : \"fa-search\"\r\n                        } px-2`}\r\n                        aria-hidden=\"true\"></i>\r\n                    {friendlyGame ? \"ارسال درخواست\" : \"جستجو\"}\r\n                </Button>\r\n            </Form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import { Alert, Badge, Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst CompetitionSummary = ({ title, summary }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" variant=\"info\">\r\n                    <Alert.Heading className=\"text-center\">\r\n                        <Badge variant=\"success p-2\" >\r\n                            {title}\r\n                        </Badge>\r\n                    </Alert.Heading>\r\n\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill=\"true\" variant=\"info\">\r\n                    <p>تعداد شرکت کنندگان : 00000000</p>\r\n                    <p>نکات دیگر</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col>\r\n                    <Button block variant=\"outline-success\">شرکت در مسابقه</Button>\r\n                </Col>\r\n                <Col>\r\n                <Button block variant=\"outline-secondary\">بازیکنان حاضر</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionSummary;\r\n","import { Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport \"./competitions.css\";\r\nimport CompetitionSummary from \"./CompetitionSummary\";\r\n\r\nconst CompetitionsMain = () => {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <hr />\r\n\r\n            <Row>\r\n                <Col className=\"competition-menu-body\" sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"first\">\r\n                                جام حذفی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"second\">\r\n                                لیگ امتیازی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"third\">\r\n                                بازی شرطی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"forth\">\r\n                                جدول رندوم\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"fifth\">\r\n                                و غیره\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Col>\r\n                {/* <div style={{borderLeft: '1px solid gray', height:'500px'}}></div> */}\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <CompetitionSummary\r\n                                title=\"جام حذفی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <CompetitionSummary\r\n                                title=\"لیگ امتیازی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <CompetitionSummary\r\n                                title=\"بازی شرطی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"forth\">\r\n                            <CompetitionSummary\r\n                                title=\"جدول رندوم\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"fifth\">\r\n                            <CompetitionSummary\r\n                                title=\"و غیره\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionsMain;\r\n","import GamePlay from \"./gameplay/GamePlay\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SingleGame from \"./SingleGame\";\r\nimport { Tab, Tabs, Card, Fade } from \"react-bootstrap\";\r\nimport { Fragment } from \"react\";\r\nimport CompetitionsMain from \"./competitions/CompetitionsMain\";\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector((state) => state.room);\r\n\r\n    return (\r\n        <Fragment>\r\n            {room.name ? (\r\n                <GamePlay />\r\n            ) : (\r\n                <Card\r\n                    border=\"secondary\"\r\n                    bg=\"transparent\"\r\n                    className=\"game-deck-card\">\r\n                    <Card.Body>\r\n                        <Tabs\r\n                            defaultActiveKey=\"randomGame\"\r\n                            transition={false}\r\n                            id=\"noanim-tab-example\"\r\n                            variant=\"pills\"\r\n                            // transition={Fade}\r\n                            className=\"mb-3\">\r\n                            \r\n                            <Tab eventKey=\"randomGame\" title=\"بازی تصادفی\">\r\n                                <SingleGame friendlyGame={false} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"competitions\" title=\"مسابقات\">\r\n                                <CompetitionsMain />\r\n                            </Tab>\r\n                            <Tab eventKey=\"friendlyGame\" title=\"بازی با دوستان\">\r\n                                <SingleGame friendlyGame={true} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Card.Body>\r\n                </Card>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport \"./profile.css\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\n\r\nconst NoticeManager = () => {\r\n    //u can create another component for listing notices ?\r\n    const player = useSelector((state) => state.player);\r\n    const [isAllowed, setAllowed] = useState(undefined);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [notices, setNotices] = useState([]);\r\n    const [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n    const [updateTrigger, setUpdateTrigger] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const resetStates = () => {\r\n        setTitle(\"\");\r\n        setText(\"\");\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n        setSelectedNoticeID(null);\r\n        setUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n    };\r\n\r\n    useEffect(() => {\r\n        //use another simpler preloader\r\n        //load all notices in left side for selecting: load all and push them in notices state\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } =\r\n                    await noticeServices.getAdvancedNotics();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    else\r\n                        setNotices([\r\n                            { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                        ]);\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [updateTrigger]);\r\n\r\n    //***** in server implemented a middleware for this, is this needed? */\r\n    if (player && isAllowed === undefined) {\r\n        //in admin tools pages: admin status is checked directly dor completely making sure that user is admin and he/her is trusted directly from server\r\n        (async () => {\r\n            try {\r\n                const { data, status } = await userServices.isAdministrator(\r\n                    player.userID\r\n                );\r\n                if (status === Configs.Status.Successful) return data.answer;\r\n                return false;\r\n            } catch (err) {\r\n                //CHECK THIS PART\r\n                return false;\r\n            }\r\n        })()\r\n            .then((answer) => {\r\n                setAllowed(answer);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"مشکلی در تعیین سطح دسترسی شما بوجود آمد. لطفا مجددا تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n            });\r\n    }\r\n\r\n    // show proper message for simple users\r\n    if (!player || isAllowed === false) {\r\n        //in first render a wronge message will be shown! find a fix\r\n        //2nd condition must be exactly the same\r\n        toast.warn(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\", {\r\n            position: \"top-left\",\r\n            closeOnClick: true,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    //runs when create notice button clicks\r\n    const createNewNotice = async () => {\r\n        //add patern and stuff to states and inputs\r\n        try {\r\n            setLoading(true);\r\n            const { status } = await noticeServices.createNotice({\r\n                title,\r\n                text,\r\n                startDate: new Date(startDate),\r\n                endDate: new Date(endDate),\r\n            });\r\n            //*********** */\r\n            //COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n            if (status === Configs.Status.CreatedSuccessfully) {\r\n                toast.success(`اطلاعیه ی ${title} با موفقیت ساخته شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selecteNotice = (notice) => {\r\n        // console.log(notice);\r\n        setSelectedNoticeID(notice._id);\r\n        setTitle(notice.title);\r\n        setText(notice.text);\r\n        setStartDate(new Date(notice.startDate));\r\n        setEndDate(new Date(notice.endDate));\r\n    };\r\n\r\n    const cancelEditing = () => {\r\n        resetStates();\r\n    };\r\n\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        if (!selectedNoticeID) return;\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await noticeServices.editNotice(\r\n                selectedNoticeID,\r\n                { title, text, startDate, endDate }\r\n            );\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n    // if admin status is checked directly by server then start rendering the page\r\n    //consists two part\" right part => used for creating and editing notices\r\n    //left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n    //edit all heights in control panel\r\n    //add patern and stuff to states and inputs\r\n    return (\r\n        <Fragment>\r\n            {player && isAllowed && (\r\n                <Row style={{ height: \"100%\" }}>\r\n                    <LoadingBar loading={loading} />\r\n                    <Col xs={5}>\r\n                        <Card\r\n                            border=\"success\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto notice-manager-card\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه جدید\r\n                            </Card.Header>\r\n                            <Card.Body className=\"text-right\">\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    عنوان اطلاعیه\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    pattern=\".{3,30}\"\r\n                                    onInput={(e) =>\r\n                                        e.target.setCustomValidity(\"\")\r\n                                    }\r\n                                    onInvalid={(e) =>\r\n                                        e.target.setCustomValidity(\r\n                                            \"عنوان اطلاعیه باید حداقل 3 و حداکثر 30 کاراکتر داشته باشد\"\r\n                                        )\r\n                                    }\r\n                                    className=\"my-1 mx-auto\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"عنوان\"\r\n                                    required=\"required\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    توضیحات\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    pattern=\".{5,200}\"\r\n                                    onInput={(e) =>\r\n                                        e.target.setCustomValidity(\"\")\r\n                                    }\r\n                                    onInvalid={(e) =>\r\n                                        e.target.setCustomValidity(\r\n                                            \"متن اطلاعیه باید حداقل 5 و حداکثر 200 کاراکتر داشته باشد\"\r\n                                        )\r\n                                    }\r\n                                    className=\"my-1 mx-auto h-25\"\r\n                                    placeholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n                                    value={text}\r\n                                    required=\"required\"\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ شروع نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto w-100\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={startDate}\r\n                                    onChange={setStartDate}\r\n                                    required=\"required\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ پایان نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={endDate}\r\n                                    onChange={setEndDate}\r\n                                    required=\"required\"\r\n                                />\r\n                                <hr />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                                {!selectedNoticeID ? (\r\n                                    <Button\r\n                                        block\r\n                                        variant=\"success\"\r\n                                        onClick={createNewNotice}>\r\n                                        <i\r\n                                            className=\"fa fa-floppy-o px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ایجاد اطلاعیه\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-primary\"\r\n                                                onClick={saveChanges}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                ذخیره تغییرات\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-warning text-secondary\"\r\n                                                onClick={cancelEditing}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                لغو ویرایش\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs={7}>\r\n                        <Card\r\n                            border=\"info\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto notice-manager-card\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه های قبلی\r\n                            </Card.Header>\r\n                            <Card.Body\r\n                                style={{ overflowY: \"scroll\" }}\r\n                                className=\"text-right\">\r\n                                {notices.map((notice) => {\r\n                                    return (\r\n                                        <Fragment>\r\n                                            <Alert variant=\"secondary\">\r\n                                                <i\r\n                                                    className=\"fa fa-info-circle px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"red\",\r\n                                                        fontSize: \"18px\",\r\n                                                    }}>\r\n                                                    {notice.title}\r\n                                                </span>\r\n                                                : {notice.text}\r\n                                                <i\r\n                                                    className=\"icon-edit-notice fa fa-pencil-square-o px-3\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    onClick={() =>\r\n                                                        selecteNotice(notice)\r\n                                                    }></i>\r\n                                            </Alert>\r\n                                            <hr />\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport \"./profile.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerRecordUpdate } from \"../dashboard/actions\";\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    //on component mount download user credentials\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } = await userServices.getMyCredentials();\r\n                if (status === Configs.Status.Successful) {\r\n                    const { me } = data;\r\n                    setFullname(me.fullname);\r\n                    setStudentID(me.studentID);\r\n                    setEmail(me.email);\r\n                }\r\n            } catch (err) {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`تغییرات با موفقیت اعمال شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const changeMyPassword = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.changeMyPassword({\r\n                studentID,\r\n                password,\r\n                newPassword,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`رمز شما با موفقیت تغییر داده شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch (pageMode) {\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                changeMyPassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const checkConfirmPassword = (event) => {\r\n        setConfirmNewPassword(event.target.value);\r\n        if (newPassword !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور جدید باید با خود رمز عبور جدید مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n\r\n    // *************************** DESIGN NOTE *******/\r\n    // HOW ABOUT USING TABS ? <Tabs>\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"big-single-card\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-100 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.READ_ONLY && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.EDIT && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.CHANGE_PASS && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={(e) => selectMode(e)}>\r\n                    <Card.Body className=\"w-75 text-center mx-auto\">\r\n                        <LoadingBar loading={loading} />\r\n\r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <Fragment>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </Fragment>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"account-info-textbox w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={newPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setNewPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        تایید رمز عبور جدید\r\n                                    </Form.Label>\r\n\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        value={confirmNewPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(event) =>\r\n                                            checkConfirmPassword(event)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={!pageMode}\r\n                            block\r\n                            variant=\"success\"\r\n                            className=\"w-50 mx-auto\">\r\n                            <i\r\n                                className=\"fa fa-wrench px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت تغییرات\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","\r\nimport { Card, Col, ListGroup, Row } from 'react-bootstrap';\r\nimport { Badge } from 'react-bootstrap';\r\nimport '../profile.css';\r\n\r\nconst Record = ({children,title}) => {\r\n    return (\r\n        <ListGroup.Item className=\"bg-transparent\">\r\n            <Row className=\"py-2\">\r\n                <Col className=\"text-center\">\r\n                    <Card.Text>{title}</Card.Text>\r\n                </Col>\r\n                <Col className=\"text-center\">\r\n                    <Badge\r\n                        className=\"friend-badge-font-size\"\r\n                        pill\r\n                        variant=\"primary\">\r\n                        {children}\r\n                    </Badge>\r\n                </Col>\r\n            </Row>\r\n        </ListGroup.Item>\r\n    );\r\n};\r\n\r\nexport default Record;\r\n","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport { Card, Image, Row, ListGroup, Button, Col } from \"react-bootstrap\";\r\nimport '../profile.css';\r\nimport { useSelector } from \"react-redux\";\r\nimport Record from \"./Record\";\r\n\r\nconst FriendRecords = (props) => {\r\n    const me = useSelector((state) => state.player);\r\n    if(!me) return null;//because of time delay to load player data, component crashes below\r\n    //fix the bug in a better way\r\n    const { records } = props.friend ? props.friend : me;\r\n    return (\r\n        <Card border=\"success\" bg=\"transparent\" className=\"friend-records\">\r\n            <Image\r\n                className=\"card-img-top my-friend-avatar\"\r\n                src={noAvatar}\r\n                alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n            />\r\n            <hr />\r\n            <Card.Body>\r\n                <ListGroup className=\" list-group list-group-flush\">\r\n                    <Row>\r\n                        <Col className=\"p-0 h-100\">\r\n                            <Record title=\"امتیاز بازیکن\">\r\n                                {records.points}\r\n                            </Record>\r\n                        </Col>\r\n                        <Col  className=\"p-0 h-100\">\r\n                            <Record title=\"تعداد بردها\">{records.wins}</Record>\r\n                        </Col>\r\n                        <Col  className=\"p-0 h-100\">\r\n                            <Record title=\"تعداد تساوی\">{records.draws}</Record>\r\n                        </Col>\r\n                        <Col  className=\"p-0 h-100\">\r\n                            <Record title=\"تعداد باختها\">\r\n                                {records.loses}\r\n                            </Record>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row></Row>\r\n                </ListGroup>\r\n            </Card.Body>\r\n            {props.friend && (\r\n                <Card.Footer>\r\n                    <Button variant=\"outline-danger\" block onClick={null}>\r\n                        <i\r\n                            className=\"fa fa-handshake-o px-2\"\r\n                            aria-hidden=\"true\"></i>\r\n                        لغو دوستی\r\n                    </Button>\r\n                </Card.Footer>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FriendRecords;\r\n","import { useState, useEffect } from \"react\";\r\nimport LoadingBar from \"../../commons/LoadingBar\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport Configs from \"../../services/configs\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport { Card, Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport AllScores from \"../../tables/scores/AllScores\";\r\nimport '../profile.css';\r\nimport FriendRecords from \"./FriendRecords\";\r\n\r\nconst MyGamesAndFriends = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [myFriends, setMyFriends] = useState([]);\r\n    const [myGames, setMyGames] = useState([]);\r\n    const [filterID, setFilterID] = useState(\"me\");\r\n    const [selectedFriendIndex, setSelectedFriendIndex] = useState(-1);\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true); // use preloader here?\r\n                let serverResponse = await gameServices.getMyGames();\r\n                if (serverResponse.status === Configs.Status.Successful)\r\n                    setMyGames(serverResponse.data.myGames.reverse());\r\n                serverResponse = await userServices.getMyFriends();\r\n                if (serverResponse.status === Configs.Status.Successful)\r\n                    setMyFriends(serverResponse.data.friends);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        setSelectedFriendIndex(filterID !== \"me\" ? myFriends.findIndex(friend => friend.userID === filterID) : -1);\r\n        // if filterID === \"me\" || frined id wia .findIndex not found ---> returns -1\r\n    }, [filterID, myFriends])\r\n    return (\r\n        <Card\r\n            border=\"secondary\"\r\n            bg=\"transparent\"\r\n            className=\"big-single-card\">\r\n            <Card.Header className=\"text-center\">\r\n                لیست دوستان و آمار بازی ها\r\n            </Card.Header>\r\n            <LoadingBar loading={loading} />\r\n            <Card.Body >\r\n                <LoadingBar loading={loading} />\r\n                <Tab.Container\r\n                    defaultActiveKey={filterID}\r\n                    onSelect={(key) => setFilterID(key)}>\r\n                    <Row className=\"tabs-list-friends-in-games-scrollable\">\r\n                        <Col className=\"friend-list-name-length\" xs={3}>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column text-right\">\r\n                                <Nav.Item>\r\n                                    <Nav.Link eventKey=\"me\">\r\n                                        همه بازی ها\r\n                                    </Nav.Link>\r\n                                </Nav.Item>\r\n                                {myFriends.map((friend) => (\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey={friend.userID}>\r\n                                            {friend.fullname}\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        <Col xs={9}>\r\n                            <FriendRecords friend={selectedFriendIndex !== -1 ? myFriends[selectedFriendIndex] : null} />\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Tab.Content >\r\n                                <Tab.Pane eventKey=\"me\">\r\n                                    <AllScores scores={myGames} />\r\n                                </Tab.Pane>\r\n                                {myFriends.map((friend) => (\r\n                                    <Tab.Pane eventKey={friend.userID}>\r\n                                        <AllScores\r\n                                            scores={myGames.filter(\r\n                                                (game) =>\r\n                                                    friend.userID ===\r\n                                                        game.players[0].id ||\r\n                                                    friend.userID ===\r\n                                                        game.players[1].id\r\n                                            )}\r\n                                        />\r\n                                    </Tab.Pane>\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        \r\n                    </Row>\r\n                </Tab.Container>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default MyGamesAndFriends;\r\n","import { Routes } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst chatServices = {\r\n    \r\n    getOurChat: (friendID) => {\r\n        return http.get(`${Server.Root}/${Server.Chats}/${friendID}`);\r\n    }\r\n};\r\n\r\nexport default chatServices;","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Alert, Col, Row } from \"react-bootstrap\";\r\nimport DateObject from \"react-date-object\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport \"./chat.css\";\r\nimport { v1 as uuidv1 } from 'uuid'\r\nconst Message = ({ msg, previousDay, inDesktop }) => {\r\n    const { date } = msg; // destructure date from msg then make a new date object\r\n    // reason for making new Date objects is that react throws error some time when you use it without new Date :|\r\n    const [showDate, setShowDate] = useState(false); //for each day, the first message in that day has persian date above it\r\n    const [time, setTime] = useState(null);\r\n    const [persianDate, setPersianDate] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const persianDateObject = new DateObject({\r\n            date: new Date(date),\r\n            calendar: persian,\r\n            locale: persian_fa,\r\n        });\r\n        setPersianDate(persianDateObject.format(\"dddd DD MMMM YYYY\"));\r\n        setTime(persianDateObject.format(\"hh:mm\"));\r\n        setShowDate(\r\n            new Date(date).getDate() !== previousDay || previousDay === 0\r\n        ); //     0 means this is the first message in the chat\r\n    }, [date, previousDay]);\r\n\r\n    //note: Device.Desktop is 0 -> so it inDesktop is used conditionally but it actually contains device type and not a boolean\r\n    return (\r\n        <Fragment key={uuidv1()}>\r\n            {!showDate ? null : (\r\n                <Fragment>\r\n                    <hr />\r\n                    <p className=\"message-date\">{persianDate}</p>\r\n                </Fragment>\r\n            )}\r\n            <Row>\r\n                <Col>\r\n                    {msg.me && (\r\n                        <Alert className=\"text-right\" variant=\"dark\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col>{msg.me}</Col>\r\n                                    <Col className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.me}</Row>\r\n                                    <Row className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n                <Col>\r\n                    {msg.friend && (\r\n                        <Alert className=\"text-right\" variant=\"primary\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                    <Col>{msg.friend}</Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.friend}</Row>\r\n                                    <Row className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import {\r\n    Button,\r\n    Card,\r\n    Container,\r\n    Form,\r\n    InputGroup,\r\n    Row,\r\n    Tab,\r\n} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { SendMessageTo } from \"../dashboard/actions\";\r\nimport \"./chat.css\";\r\nimport { Devices, Status } from \"../services/configs\";\r\nimport chatServices from \"../services/http/chatServices\";\r\n\r\nimport Message from \"./Message\";\r\n\r\nconst ChatBox = ({ friendID, Device }) => {\r\n    const [myMessage, setMyMessage] = useState(\"\");\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n    const mostRecentMessageRef = useRef(null);\r\n\r\n    //...TEMP: just save msges in client side\r\n    const [allMsgs, setAllMsgs] = useState([\r\n        { me: null, friend: null, date: null, key: 0 },\r\n    ]);\r\n\r\n    const loadPreviousMessages = useCallback(async () => {\r\n        try {\r\n            const { status, data } = await chatServices.getOurChat(friendID);\r\n            if (status === Status.Successful) {\r\n                const { myIndex, chat } = data;\r\n                const previousMsgs = chat.map((message) => {\r\n                    const { text, owner, date } = message;\r\n                    if (owner === myIndex)\r\n                        return {\r\n                            me: text,\r\n                            friend: null,\r\n                            date,\r\n                            key: message._id.toString(),\r\n                        };\r\n                    return {\r\n                        me: null,\r\n                        friend: text,\r\n                        date,\r\n                        key: message._id.toString(),\r\n                    };\r\n                });\r\n                setAllMsgs(previousMsgs);\r\n            }\r\n        } catch (err) {\r\n            //consider a special place in chat box to show status change or error messages\r\n        }\r\n    }, [friendID]);\r\n\r\n    useEffect(() => {\r\n        loadPreviousMessages();\r\n\r\n        return () => {\r\n            setAllMsgs([]);\r\n        };\r\n    }, [loadPreviousMessages]);\r\n\r\n    const composeMessage = (event) => {\r\n        event.preventDefault();\r\n        let tempMsg = [...allMsgs];\r\n        tempMsg.push({\r\n            me: myMessage,\r\n            friend: null,\r\n            date: new Date(),\r\n            key: allMsgs.length,\r\n        });\r\n        setAllMsgs(tempMsg);\r\n        dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n        setMyMessage(\"\");\r\n\r\n        if (mostRecentMessageRef && mostRecentMessageRef.current) {\r\n            setTimeout(() => {\r\n                mostRecentMessageRef.current.scrollIntoView({\r\n                    behavior: \"smooth\",\r\n                    top: mostRecentMessageRef.current.offsetTop,\r\n                });\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const recieveMessage = useCallback(\r\n        (msg) => {\r\n            let tempMsg = [...allMsgs];\r\n            tempMsg.push({ me: null, friend: msg.text, date: new Date() });\r\n            return tempMsg;\r\n        },\r\n        [allMsgs]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const { recieved } = message;\r\n        if (!message.sent && recieved && recieved.friendID === friendID) {\r\n            setAllMsgs(recieveMessage(message.recieved));\r\n            if (mostRecentMessageRef && mostRecentMessageRef.current) {\r\n                setTimeout(() => {\r\n                    mostRecentMessageRef.current.scrollIntoView({\r\n                        behavior: \"smooth\",\r\n                        top: mostRecentMessageRef.current.offsetTop,\r\n                    });\r\n                }, 100);\r\n            }\r\n        }\r\n    }, [message, friendID]);\r\n\r\n    return (\r\n        <Tab.Pane eventKey={friendID}>\r\n            <Container>\r\n                <Row>\r\n                    <Card\r\n                        border=\"dark\"\r\n                        bg=\"transparent\"\r\n                        className={`big-single-card ${\r\n                            Device !== Devices.SmartPhone\r\n                                ? \"chat-box-scrollable\"\r\n                                : \"smartphone-chat-box-scrollable\"\r\n                        }`}>\r\n                        <Card.Body>\r\n                            {allMsgs.map((msg, index) => (\r\n                                <div ref={mostRecentMessageRef}>\r\n                                    <Message\r\n                                        key={msg.key}\r\n                                        msg={msg}\r\n                                        inDesktop={Device === Devices.Desktop}\r\n                                        previousDay={\r\n                                            index !== 0\r\n                                                ? new Date(\r\n                                                      allMsgs[index - 1].date\r\n                                                  ).getDate()\r\n                                                : 0\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Form\r\n                        onSubmit={(event) => composeMessage(event)}\r\n                        className=\"w-100 mt-3\">\r\n                        <InputGroup className=\"w-100\">\r\n                            <InputGroup.Prepend\r\n                                style={{\r\n                                    width: \"8%\",\r\n                                }}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    style={{ border: \"none\", fontSize: '22px' }}\r\n                                    className=\"w-100 mx-auto\"\r\n                                    variant=\"outline-info\">\r\n                                    <i\r\n                                        className=\"fa fa-telegram\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n\r\n                            <InputGroup.Prepend\r\n                                style={{ margin: \"auto\", width: \"92%\" }}>\r\n                                <Form.Control\r\n                                    value={myMessage}\r\n                                    onChange={(e) =>\r\n                                        setMyMessage(e.target.value)\r\n                                    }\r\n                                    placeholder=\"پیام...\"\r\n                                    className=\"bg-transparent chat-room-message-box\r\n                                    mx-auto text-right\"></Form.Control>\r\n                            </InputGroup.Prepend>\r\n                        </InputGroup>\r\n                    </Form>\r\n                </Row>\r\n            </Container>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default ChatBox;\r\n","import { Card, Row, Col, Nav, Tab } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {Status, Devices} from \"../services/configs\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport ChatBox from \"./ChatBox\";\r\nimport \"./chat.css\";\r\nimport LoadingBar from '../commons/LoadingBar';\r\nimport { v1 as uuidv1 } from 'uuid'\r\nconst ChatRoom = ({Device}) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [myFriends, setMyFriends] = useState([]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true); // use preloader here?\r\n                const { status, data } = await userServices.getMyFriends();\r\n                if (status === Status.Successful)\r\n                    setMyFriends(data.friends);\r\n            } catch (err) {\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card\r\n            border=\"secondary\"\r\n            bg=\"transparent\"\r\n            className=\"chat-main-card\">\r\n            <LoadingBar loading={loading} />\r\n            <Card.Header className=\"text-center\">چت روم شما</Card.Header>\r\n            <Card.Body>\r\n                <Tab.Container\r\n                // id=\"left-tabs-example\"\r\n                // defaultActiveKey={filterID}\r\n                // onSelect={(key) => setFilterID(key)}\r\n                >\r\n                    <Row>\r\n                        <Col\r\n                            className={\r\n                                Device !== Devices.SmartPhone\r\n                                    ? \"chat-room-devider chat-scrollable-friends\"\r\n                                    : \"smartphone-chat-scrollable-friends\"\r\n                            }\r\n                            sm={3}>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column text-right\">\r\n                                {myFriends.map((friend) => (\r\n                                    <Nav.Item>\r\n                                        <Nav.Link key={friend.userID} eventKey={friend.userID}>\r\n                                            {friend.fullname}\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        <Col>\r\n                            <Tab.Content>\r\n                                {myFriends.map((friend) => (\r\n                                    <ChatBox key={uuidv1()} friendID={friend.userID} Device={Device} />\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n                    </Row>\r\n                </Tab.Container>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"../profile.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../../dashboard/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nimport Configs from \"../../services/configs\";\r\n\r\nconst ProfilePanel = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n            <Row className=\"profile-panel-sidebar d-flex flex-column flex-shrink-0\">\r\n                <Button\r\n                    style={{ border: \"none\" }}\r\n                    variant=\"outline-warning\"\r\n                    className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </Button>\r\n                <hr />\r\n                <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            exact\r\n                            to={Configs.Routes.Client.Profile}\r\n                            className=\"nav-link\"\r\n                            aria-current=\"page\">\r\n                            <i\r\n                                className=\"fa fa-user-o px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            مشخصات\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink\r\n                            className=\"nav-link link-dark\"\r\n                            to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                            <i\r\n                                className=\"fa fa-users px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            دوستان و بازی ها\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink\r\n                            className=\"nav-link link-dark\"\r\n                            to={Configs.Routes.Client.ChatRoom}>\r\n                            <i\r\n                                className=\"fa fa-weixin px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            چت روم\r\n                        </NavLink>\r\n                    </li>\r\n                    <hr />\r\n                    {player && player.isAdmin && (\r\n                        <Fragment>\r\n                            {/* admin tools */}\r\n                            <li>\r\n                                <NavLink\r\n                                    className=\"nav-link link-dark border-top\"\r\n                                    to={Configs.Routes.Client.Notices}>\r\n                                    <i\r\n                                        className=\"fa fa-newspaper-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    اطلاعیه ها\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink\r\n                                    className=\"nav-link link-dark\"\r\n                                    to=\"/controlPanel/admin/whatever\">\r\n                                    <svg\r\n                                        className=\"bi me-2\"\r\n                                        width=\"16\"\r\n                                        height=\"16\"></svg>\r\n                                    امکانات ادمین\r\n                                </NavLink>\r\n                            </li>\r\n                        </Fragment>\r\n                    )}\r\n                </ul>\r\n                <hr />\r\n                <Button variant=\"outline-danger\" onClick={signMeOut}>\r\n                    <i className=\"fa fa-sign-out px-2\" aria-hidden=\"true\"></i>\r\n                    خروج از حساب کاربری\r\n                </Button>\r\n            </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(ProfilePanel);\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"../profile.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../../dashboard/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nimport Configs from \"../../services/configs\";\r\n\r\nconst CollapsedPanel = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n        <Row bg=\"light\" className=\"profile-panel-sidebar-collapsed w-100 text-right\">\r\n            <Button\r\n                style={{ border: \"none\", padding:0 }}\r\n                variant=\"outline-warning\"\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <i className=\"fa fa-cogs\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n            <NavLink\r\n                exact\r\n                to={Configs.Routes.Client.Profile}\r\n                className=\"nav-link\"\r\n                aria-current=\"page\">\r\n                <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <NavLink\r\n                className=\"nav-link link-dark\"\r\n                to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                <i className=\"fa fa-users\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <NavLink\r\n                className=\"nav-link link-dark\"\r\n                to={Configs.Routes.Client.ChatRoom}>\r\n                <i className=\"fa fa-weixin\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <hr />\r\n            {player && player.isAdmin && (\r\n                <Fragment>\r\n                    {/* admin tools */}\r\n                    <NavLink\r\n                        className=\"nav-link link-dark border-top\"\r\n                        to={Configs.Routes.Client.Notices}>\r\n                        <i className=\"fa fa-newspaper-o\" aria-hidden=\"true\"></i>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/admin/whatever\">\r\n                        <svg className=\"bi me-2\" width=\"16\" height=\"16\"></svg>\r\n                    </NavLink>\r\n                </Fragment>\r\n            )}\r\n            <hr />\r\n            <Button\r\n                className=\"text-right\"\r\n                variant=\"outline-danger\"\r\n                onClick={signMeOut}>\r\n                <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(CollapsedPanel);\r\n","import { Fragment } from \"react\";\r\nimport { Devices } from \"../services/configs\";\r\nimport ProfilePanel from \"../profile/panel/ProfilePanel\";\r\nimport CollapsedPanel from \"../profile/panel/CollapsedPanel\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport GlobalSocketManager from \"./../services/ws/GlobalSocketManager\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AutoSignIn from \"./../users/AutoSignIn\";\r\n\r\nconst ProfilePanelLayout = ({ Device, children }) => {\r\n    const user = useSelector((state) => state.player);\r\n    \r\n    return (\r\n        <Fragment>\r\n            <AutoSignIn />\r\n            {user && <GlobalSocketManager />}\r\n            {(Device === Devices.Desktop) ? (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={3}>\r\n                        <ProfilePanel />\r\n                    </Col>\r\n                    <Col>{children}</Col>\r\n                </Row>\r\n            ) : (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={1}>\r\n                        <CollapsedPanel />\r\n                    </Col>\r\n                    <Col>{children}</Col>\r\n                </Row>\r\n                // <Container>\r\n                //     <Row>\r\n                //         <CollapsedPanel expand={toggle} />\r\n                //     </Row>\r\n                //     <Row>{children}</Row>\r\n                // </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ProfilePanelLayout;\r\n","import { Container, Row, Nav, Navbar } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {  NavLink } from \"react-router-dom\";\r\nimport {Devices, Routes} from '../services/configs';\r\n\r\nconst NavigationBar = ({Device}) => {\r\n    const player = useSelector((state) => state.player);\r\n\r\n    return (\r\n        <Navbar bg=\"light\" className=\"nav-pills text-right\">\r\n            <Container className=\"text-right\">\r\n                \r\n\r\n                    <Nav className=\"me-auto\">\r\n                    <NavLink\r\n                    className=\"nav-link\"\r\n                    className=\"nav-link text-primary\"\r\n                    activeClassName=\"btn-success text-dark\"\r\n                    to={player ? Routes.Client.Profile : Routes.Client.SignUp}>\r\n                    <i\r\n                        className=\"fa fa-address-card px-2\"\r\n                        aria-hidden=\"true\"></i>\r\n                    {player ? (Device !== Devices.SmartPhone && player.fullname) : \"ثبت نام\"}\r\n                </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.Root}\r\n                            exact\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-home px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                           {Device === Devices.Desktop && 'صفحه اصلی'}\r\n                        </NavLink>\r\n\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.GameDeck}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            {Device === Devices.Desktop && 'بازی ها'}\r\n                        </NavLink>\r\n                        {player && <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.ChatRoom}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-weixin px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            {Device === Devices.Desktop && 'چت روم'}\r\n                        </NavLink>}\r\n                        \r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.Rankings}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-list-ol px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            {Device === Devices.Desktop && 'رنکینگ'}\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.GameGuide}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-eye px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            {Device === Devices.Desktop && 'راهنما'}\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.ContactUs}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-phone-square px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            {Device === Devices.Desktop && 'تماس با ما'}\r\n                        </NavLink>\r\n                        \r\n                    </Nav>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { useState, useEffect } from \"react\";\r\nimport ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport GameGuide from \"./informations/GameGuide\";\r\nimport ContactUs from \"./informations/ContactUs\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./layouts/MainLayout\";\r\nimport Rankings from \"./tables/rankings/Rankings\";\r\nimport GameDeck from \"./games/GameDeck\";\r\nimport NoticeManager from \"./profile/NoticeManager\";\r\nimport AccountCredentials from \"./profile/AcountCredentials\";\r\nimport MyGamesAndFriends from \"./profile/friendgames/MyGamesAndFriends\";\r\nimport { Routes } from \"./services/configs\";\r\nimport ChatRoom from \"./chat/ChatRoom\";\r\nimport ProfilePanelLayout from \"./layouts/ProfilePanelLayout\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./commons/NavigationBar\";\r\nconst App = () => {\r\n    const isDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const isSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const isTablet = !isDesktop && !isSmartPhone;\r\n    const [device, setDevice] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // find device mode\r\n        // array is sorted according to Configs.Devices\r\n        setDevice(\r\n            [isDesktop, isTablet, isSmartPhone].findIndex((mode) => mode)\r\n        ); //return the index of the one that is true -> wich is the curret device mode\r\n    }, [isDesktop, isTablet, isSmartPhone]);\r\n    return (\r\n        <BrowserRouter>\r\n            <NavigationBar Device={device}/>\r\n            <ToastContainer />\r\n            \r\n            <Switch>\r\n                <Route path={`${Routes.Client.Profile}/:path?`} exact>\r\n                    <ProfilePanelLayout Device={device}>\r\n                        <Switch>\r\n                            <Route path={Routes.Client.MyGamesAndFriends}>\r\n                                <MyGamesAndFriends />\r\n                            </Route>\r\n                            <Route path={Routes.Client.Notices}>\r\n                                <NoticeManager />\r\n                            </Route>\r\n\r\n                            <Route path={Routes.Client.ChatRoom}>\r\n                                <ChatRoom Device={device} />\r\n                            </Route>\r\n\r\n                            <Route exact path={Routes.Client.Profile}>\r\n                                <AccountCredentials />\r\n                            </Route>\r\n                        </Switch>\r\n                    </ProfilePanelLayout>\r\n                </Route>\r\n                <Route>\r\n                    <MainLayout Device={device}>\r\n                        <Switch>\r\n                            <Route path={Routes.Client.SignUp}>\r\n                                <SignUp />\r\n                            </Route>\r\n\r\n                            <Route path={Routes.Client.GameDeck}>\r\n                                <GameDeck />\r\n                            </Route>\r\n                            <Route path={Routes.Client.Rankings}>\r\n                                <Rankings />\r\n                            </Route>\r\n                            <Route path={Routes.Client.GameGuide}>\r\n                                <GameGuide />/\r\n                            </Route>\r\n                            <Route path={Routes.Client.ContactUs}>\r\n                                <ContactUs />\r\n                            </Route>\r\n\r\n                            <Route path={Routes.Client.Root} exact>\r\n                                <ScoresTable />\r\n                            </Route>\r\n                        </Switch>\r\n                    </MainLayout>\r\n                </Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\nimport { statisticsReducer } from \"./statistics\";\r\nimport { messageReducer } from './message';\r\nimport { tokenReducer } from './token';\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer,\r\n    statistics: statisticsReducer,\r\n    message: messageReducer,\r\n    token: tokenReducer\r\n});","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = {name: null, type: null}, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {name, type} = action.payload;            \r\n            return {name, type};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        case \"RESET_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (\r\n    state = {\r\n        updateTriggered: false,\r\n        opponentSearchTriggered: false,\r\n        friendRequest: false,\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"TRIGGER_UPDATE\":\r\n            return {\r\n                updateTriggered: !state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger update\r\n        case \"TRIGGER_OPPONENT_SEARCH\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: !state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger search\r\n        case \"SEND_FRIEND_REQUEST\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","\r\nexport const statisticsReducer = (state = {players: 0, games: 0}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_STATISTICS\":\r\n            const {players, games} = action.payload;\r\n            return {players, games};\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","export const messageReducer = (\r\n    state = { sent: null, recieved: null },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"RECIEVE_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log(action.payload);\r\n                return { recieved: { name, friendID, text }, sent: state.sent };\r\n            }\r\n        case \"SEND_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log('payload', action.payload);\r\n                return { sent: { name, friendID, text }, recieved: state.recieved };\r\n            }\r\n        case \"RESET_MESSAGES\":\r\n            {\r\n                return { sent: null, recieved: null };\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","import { browserStorage } from \"../../services/configs\";\r\n\r\nexport const tokenReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"SAVE_TOKEN\":\r\n            return browserStorage.TOKEN();\r\n        // case \"RESET_TOKEN\":\r\n        //     return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n","const ClientRoutes = require('./client');\r\nconst ServerRoutes = require('./server');\r\nconst Status = require('./status');\r\nconst browserStorage = require('./browser');\r\nconst GameSetting = require('./gamesetting');\r\n\r\n//all configs\r\nmodule.exports = {\r\n    browserStorage,\r\n    Routes: { Server: ServerRoutes, Client: ClientRoutes },\r\n    Status,\r\n    GameSetting,\r\n    Devices: { SmartPhone: 2, Tablet: 1, Desktop: 0 }\r\n}"],"sourceRoot":""}