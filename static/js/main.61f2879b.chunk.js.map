{"version":3,"sources":["services/configs/client.js","services/configs/server.js","services/configs/status.js","services/configs/browser.js","services/configs/gamesetting.js","tools/format.js","tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","tools/msgbox.js","services/http/httpService.js","services/http/userServices.js","services/http/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameGuide.jsx","informations/ContactUs.jsx","commons/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","sidebars/SignInSideBar.jsx","services/http/noticeServices.js","sidebars/NoticeSideBar.jsx","sidebars/no-avatar.png","sidebars/OnlineStatistics.jsx","globals/redux/actions/index.js","chat/GameChatBox.jsx","sidebars/PlayerInfoSideBar.jsx","tools/NotificationCenter.jsx","services/ws/GlobalSocketManager.jsx","tools/AutoSignIn.jsx","globals/state/GlobalContext.jsx","layouts/MainLayout.jsx","tables/rankings/SinglePlayerCard.jsx","tables/rankings/AllPlayers.jsx","tables/rankings/Rankings.jsx","services/ws/gamePlaySocketServices.js","globals/redux/withReduxDashboard.js","games/gameplay/BriefScoreboard.jsx","games/gameplay/TableDesign.jsx","games/gameplay/GamePlay.jsx","games/SingleGame.jsx","games/competitions/CompetitionSummary.jsx","games/competitions/CompetitionsMain.jsx","games/GameDeck.jsx","profile/NoticeManager.jsx","profile/AcountCredentials.jsx","profile/friendgames/no-avatar.png","profile/friendgames/Record.jsx","profile/friendgames/FriendRecords.jsx","profile/friendgames/MyGamesAndFriends.jsx","services/http/chatServices.js","chat/Message.jsx","chat/ChatBox.jsx","chat/ChatRoom.jsx","profile/panel/ProfilePanel.jsx","profile/panel/CollapsedPanel.jsx","layouts/ProfilePanelLayout.jsx","commons/NavigationBar.jsx","App.js","globals/redux/reducers/index.js","globals/redux/reducers/player.js","globals/redux/reducers/opponent.js","globals/redux/reducers/room.js","globals/redux/reducers/scoreboard.js","globals/redux/reducers/tools.js","globals/redux/reducers/statistics.js","globals/redux/reducers/message.js","globals/redux/reducers/token.js","globals/redux/store/index.js","globals/state/GlobalStates.jsx","index.js","services/configs/index.js"],"names":["Profile","module","exports","Root","SignUp","SignIn","GameDeck","Rankings","GameGuide","ContactUs","ChatRoom","MyGamesAndFriends","Notices","WebSocketRoot","wsGamePlayRoute","wsGlobalRoute","Users","Credentials","PasswordChange","Friends","Public","Administrators","Games","Mine","Chats","NoticeManagement","Successful","CreatedSuccessfully","BadRequest","Unauthorized","Forbidden","NotFound","NotAcceptable","Conflict","SessionExpired","UnprocessableEntity","InternalServerError","isErrorExpected","error","response","status","writeUser","id","token","sessionStorage","setItem","TOKEN","getItem","ID","T3D","TableRowMargings","TurnTimeOut","objectify","date","DateObject","Date","calendar","persian","locale","persian_fa","toHijri","format","SingleScoreCard","Type","playerXName","playerOName","xScore","oScore","useState","xBadge","setXBadge","oBadge","setOBadge","hijriDate","setHijriDate","useEffect","Card","border","className","Body","Row","Footer","Button","variant","block","size","aria-hidden","AllScores","scores","console","log","length","map","score","players","name","gameID","Text","Sorry","text","toast","position","closeOnClick","icon","style","float","OK","success","Notify","info","Attention","warn","type","axios","defaults","headers","post","put","interceptors","request","use","config","browserStorage","Authorization","Promise","reject","expectedErrors","Status","http","get","delete","Server","Routes","userServices","signUp","user","JSON","stringify","signIn","getPlayer","userID","getAllPlayers","getMyCredentials","editMyCredentials","newMe","changeMyPassword","passwords","getMyFriends","isMyFriend","targetID","isAdministrator","gameServices","getAllGames","getMyGames","loadPlayerData","a","data","resolve","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","this","props","Device","Configs","allGames","then","result","reverse","filter","game","isLive","catch","err","Container","Col","onClick","Component","Header","href","LoadingBar","whichOne","setWhichOne","Math","floor","random","useLayoutEffect","document","body","overflowY","height","selectedLoader","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","Number","history","replace","onForgotPasswordClick","Modal","backdrop","show","onHide","closeButton","Form","onSubmit","Group","Label","Control","placeholder","autoComplete","value","onChange","e","target","controlId","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","newUser","fullname","pattern","onInput","onInvalid","required","SignInSideBar","noticeServices","createNotice","notice","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","notices","setNotices","title","Alert","color","fontSize","uuidv1","OnlineStatistics","useSelector","statistics","games","ListGroup","Item","Badge","pill","LoadMe","payload","SetRoom","room","SendFriendRequestTo","SendMessageTo","friendID","GameChatBox","myMessage","setMyMessage","message","dispatch","useDispatch","me","composeMessage","recieved","InputGroup","Prepend","width","PlayerInfoSideBar","inGame","personIsFriend","setPersonIsFriend","person","isFriend","Image","src","noAvatar","alt","index","Heading","shape","records","points","wins","draws","loses","innerHTML","disabled","onFriendRequestClick","location","pathname","pushed","Client","textAlign","NewMsg","decoded_token","jwtdecode","exp","expirationLength","iat","now","GlobalSocketManager","socketGlobal","setSocketGlobal","incommingFriendRequest","setIncommingFriendRequest","showFriendshipModal","setShowFriendshipModal","opponent","tools","clientOnline","toggleClientOnline","enableGlobalTimer","useCallback","setInterval","send","clientID","msg","timerID","clearInterval","connect","socket","WebSocket","onopen","onmessage","parse","command","setTimeout","askerID","answer","targetName","onerror","close","onclose","opponentSearchTriggered","friendRequest","askerName","respondToFriendshipRequest","sent","window","navigator","onLine","margin","AutoSignIn","storageUserID","GlobalContext","createContext","device","context","useContext","scoreboard","leftSideBar","setLeftSideBar","rightSideBar","setRightSideBar","setPrimaryRightSideBar","Devices","Tablet","SmartPhone","opp","xs","children","SinglePlayerCard","rowNumber","scope","AllPlayers","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","createSocketRequest","rname","playerID","roomName","gameType","server","withReduxDashboard","component","LoadOpponent","ResetOpponent","ResetRoom","SetGameID","UpdateScoreboard","details","CleanScoreboard","TriggerRecordUpdate","SaveNewToken","BriefScoreboard","timeRemaining","timeStamp","setTimeStamp","aThird","GameSetting","TableDesign","dimension","table","onEachCellClick","dimens","i","push","bg","row","direction","marginLeft","column","GamePlay","lineColor","turn","myTurn","undefined","socketGamePlay","playerOnline","connectionCheckTimerID","LoadOpponentData","opponentID","updateGameScorebaord","oppTurn","enableTimerForMyMove","timeout","updatePlayerStates","disableAllTimers","clearTimeout","socketOnMessage","cmd","startTime","IDs","opponentIndex","cellID","nextMove","verifyAndApplyTheMove","getCellCoordinates","cellButtons","focus","endThisGame","closeThisGame","forceConnectWS","nextJob","enableConnectionCheckTimer","dimen","onFloorId","selectedCellButton","cell","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","connectTheScoreLines","count","firstCell","step","getElementsByClassName","RoomManager","friendlyGame","setRoomName","setGameType","searching","setSearching","onStartGameClick","padding","Radio","checked","CompetitionSummary","summary","CompetitionsMain","Tab","defaultActiveKey","sm","Nav","Link","eventKey","Content","Pane","Tabs","transition","SingleGame","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","isAdmin","admin","createNewNotice","saveChanges","as","calendarPosition","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","Error","reloadPage","selectMode","Record","FriendRecords","friend","round","myFriends","setMyFriends","myGames","setMyGames","filterID","setFilterID","selectedFriendIndex","setSelectedFriendIndex","serverResponse","friends","onSelect","key","area-hidden","chatServices","getOurChat","Message","previousDay","inDesktop","showDate","setShowDate","setTime","hDate","hTime","getDate","ChatBox","mostRecentMessageRef","useRef","allMsgs","setAllMsgs","loadPreviousMessages","myIndex","chat","previousMsgs","owner","recieveMessage","tempMsg","current","scrollIntoView","behavior","top","offsetTop","ref","Desktop","exact","to","aria-current","ProfilePanelLayout","NavigationBar","Navbar","activeClassName","App","path","reducers","combineReducers","action","clear","updateTriggered","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","GlobalStates","isDesktop","useMediaQuery","query","isSmartPhone","isTablet","setDevice","mode","Provider","render","getElementById","ClientRoutes","require","ServerRoutes"],"mappings":"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","file":"static/js/main.61f2879b.chunk.js","sourcesContent":["//client routes\r\n\r\n// Partial Routes\r\nconst Profile = \"/Profile\",\r\n    ChatRoom = \"ChatRoom\",\r\n    MyGamesAndFriends = \"GamesFriends\",\r\n    Notices = \"Notices\";\r\n\r\nmodule.exports = {\r\n    Root: \"/\",\r\n    SignUp: \"/SignUp\",\r\n    SignIn: \"/SignIn\",\r\n    GameDeck: \"/GameDeck\",\r\n    Rankings: \"/Rankings\",\r\n    GameGuide: \"/GameGuide\",\r\n    ContactUs: \"/ContacUs\",\r\n    Profile,\r\n    ChatRoom: `${Profile}/${ChatRoom}`,\r\n    MyGamesAndFriends: `${Profile}/${MyGamesAndFriends}`,\r\n    Notices: `${Profile}/${Notices}`,\r\n};\r\n","//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com/ws\",\r\n    wsGamePlayRoute: \"gameplay\",\r\n    wsGlobalRoute: \"global\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Credentials: \"credentials\",\r\n    PasswordChange: \"password\",\r\n    Friends: 'friends',\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    Mine: \"mine\",\r\n    Chats: \"chats\",\r\n    Notices: \"notices\",\r\n    NoticeManagement: \"manage\"\r\n};","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    SessionExpired: 420,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\nconst KeyToken = \"ptk\",\r\n    KeyID = \"pid\";\r\n\r\nmodule.exports = {\r\n    writeUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(KeyID, id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(KeyToken, token);\r\n    },\r\n    TOKEN: () => sessionStorage.getItem(KeyToken),\r\n    ID: () => sessionStorage.getItem(KeyID),\r\n};\r\n","module.exports = {\r\n    T3D: {\r\n        TableRowMargings: [0, 40, 80, 120, 160],\r\n        TurnTimeOut: 45, //secs\r\n    },\r\n};\r\n","import DateObject from \"react-date-object\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\n\r\nconst objectify = (date) => {\r\n    return new DateObject({\r\n\t\tdate: new Date(date),\r\n\t\tcalendar: persian,\r\n\t\tlocale: persian_fa,\r\n\t});\r\n}\r\nexport const toHijri = (date) => {\r\n\treturn [\r\n\t\tobjectify(date).format(\"dddd DD MMMM YYYY\"),\r\n\t\tobjectify(date).format(\"hh:mm\"),\r\n\t];\r\n};\r\n\r\nexport const toTimeShort = (date) => {\r\n\treturn objectify(date).format(\"hh:mm\");\r\n};\r\n","import { Button, Card, Row } from \"react-bootstrap\";\r\nimport \"./scores.css\";\r\nimport { useEffect, useState } from 'react';\r\nimport { toHijri } from \"../../tools/format\";\r\n\r\nconst SingleScoreCard = ({\r\n    Type,\r\n    date,\r\n    playerXName,\r\n    playerOName,\r\n    xScore,\r\n    oScore,\r\n}) => {\r\n    // format score text:\r\n    const [xBadge, setXBadge] = useState(null);\r\n    const [oBadge, setOBadge] = useState(null);\r\n    const [hijriDate, setHijriDate] = useState(null);\r\n    useEffect(() => {\r\n        setHijriDate(toHijri(date)[0]);//toHijri = [date, time]\r\n        if (xScore > oScore) {\r\n            // x won\r\n            setXBadge(\"badge-success\");\r\n            setOBadge(\"badge-danger\");\r\n        } else if (xScore === oScore) {\r\n            //draw\r\n            setXBadge(\"badge-warning\");\r\n            setOBadge(\"badge-warning\");\r\n        } else {\r\n            // o won\r\n            setOBadge(\"badge-success\");\r\n            setXBadge(\"badge-danger\");\r\n        }\r\n    }, [date, xScore, oScore]);\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <Card border=\"dark\" className=\"single-score-card\">\r\n            {/* <Card.Header className=\"text-center border-dark\">{`T3D ${Type}x${Type}x${Type}`}</Card.Header> */}\r\n            <Card.Body>\r\n                <Row className=\"text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadge} single-score-badge col-1`}>\r\n                        {xScore}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadge} single-score-badge col-1`}>\r\n                        {oScore}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer className=\"p-0\">\r\n                <Button\r\n                    variant=\"outline-dark\"\r\n                    block\r\n                    size=\"lg\"\r\n                    className=\"replay-game-button\">\r\n                        {hijriDate} \r\n                        <i className=\"fa fa-pie-chart px-3\" aria-hidden=\"true\"></i>\r\n                </Button>\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    console.log(scores);\r\n    return ( \r\n        <Fragment>\r\n            { scores.length ? scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    Type={score.Type}\r\n                    date={score.date}\r\n                    playerXName={score.players[0].name}\r\n                    playerOName={score.players[1].name}\r\n                    xScore={score.players[0].score}\r\n                    oScore={score.players[1].score}\r\n                ></SingleScoreCard>\r\n            )) :\r\n            <Card className=\"bg-transparent mx-auto mt-3\" border=\"danger\">\r\n                <Card.Body className=\"text-center\">\r\n                    <Card.Text>\r\n                        هیچ بازی ای انجام نگرفته است\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                </Card>}\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import { toast } from \"react-toastify\";\r\n\r\nexport const Sorry = (text) => {\r\n    toast.error(text, {\r\n        // theme: \"light\",\r\n        position: \"top-right\",\r\n        closeOnClick: true,\r\n        icon: <i style={{float:'right'}} className=\"fa fa-times\" aria-hidden=\"true\"></i>,\r\n    });\r\n    \r\n};\r\n\r\nexport const OK = (text) => {\r\n    toast.success(text, {\r\n        // theme: \"light\",\r\n        position: \"top-left\",\r\n        closeOnClick: true,\r\n        icon: <i style={{float:'right'}} className=\"fa fa-check\" aria-hidden=\"true\"></i>,\r\n    });\r\n    \r\n};\r\n\r\nexport const Notify = (text) => {\r\n    toast.info(text, {\r\n        // theme: \"light\",\r\n        position: \"top-center\",\r\n        closeOnClick: true,\r\n        icon: <i style={{float:'right'}} className=\"fa fa-info\" aria-hidden=\"true\"></i>,\r\n    });  \r\n};\r\n\r\nexport const Attention = (text) => {\r\n    /*toast.warn(text, {\r\n        type: \"colored\",\r\n        position: \"top-center\",\r\n        closeOnClick: true,\r\n        icon: <i style={{float:'right'}} className=\"fa fa-gavel\" aria-hidden=\"true\"></i>,\r\n    });*/\r\n    toast.warn(text, {\r\n        type: \"dark\",\r\n        position: \"top-center\",\r\n        closeOnClick: true,\r\n        icon: <i style={{float:'right'}} className=\"fa fa-gavel\" aria-hidden=\"true\"></i>,\r\n    });\r\n    \r\n};\r\n\r\nexport const NewMsg = ({name, text}) => {\r\n    toast(`${name} : ${text}`, {\r\n        type: \"dark\",\r\n        position: \"top-left\",\r\n        closeOnClick: true,\r\n        icon: <i style={{float:'right', textAlign: 'right'}} className=\"fa fa-envelope-o\" aria-hidden=\"true\"></i>,\r\n    });\r\n}","import axios from \"axios\";\r\nimport { Status, browserStorage } from \"../configs\";\r\nimport { Attention, Sorry } from \"../../tools/msgbox\";\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = browserStorage.TOKEN();\r\n        if (token) config.headers.Authorization = `Bearer ${token}`;\r\n        else config.headers.Authorization = \"\";\r\n        // console.log(config.headers.Authorization);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // what to do?\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= Status.BadRequest && // >= 400\r\n        error.response.status < Status.InternalServerError; // < 500\r\n\r\n    //*****notice: */\r\n    //remove some oftheese errors... because they need to be costomized in every use in each components\r\n    // change to switch\r\n    if (error.response.status === Status.BadRequest) {\r\n        Sorry(\"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\");\r\n    } else if (error.response.status === Status.Unauthorized) {\r\n        Sorry(\"احراز هویت موفقیت آمیز نبود. لطفا وارد حساب کاربری خود شوید\");\r\n    } else if (error.response.status === Status.Forbidden) {\r\n        Sorry(\"شماره دانشجویی یا رمز عبور نادرست است\");\r\n    } else if (error.response.status === Status.NotAcceptable) {\r\n        //or used Locked: 423\r\n        Sorry(\"این قسمت فقط مختص کاربران ادمین می باشد\");\r\n    } else if (error.response.status === Status.Conflict) {\r\n        Attention(\"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\");\r\n    } else if (error.response.status === Status.SessionExpired) {\r\n        Sorry(\"نشست شما منقضی شده است، لطفا دوباره وارد حساب خود شوید.\");\r\n        //redirect to sign in page !\r\n    } else if (error.response.status === Status.UnprocessableEntity) {\r\n        Sorry(\"ورودی شما با استانداردهای سایت مطابقت ندارد\");\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        Sorry(\"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\");\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignUp}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        console.log(`${Server.Root}/${Server.Users}/${Server.SignIn}`);\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignIn}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Public}/${userID}`\r\n        );\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Public}`);\r\n    },\r\n    getMyCredentials: () => {\r\n        //token will be sent automatically, o.w. method doesnt return anything\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}`);\r\n    },\r\n    editMyCredentials: (newMe) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}`,\r\n            JSON.stringify(newMe)\r\n        );\r\n    },\r\n    changeMyPassword: (passwords) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.PasswordChange}`,\r\n            JSON.stringify(passwords)\r\n        );\r\n    },\r\n    getMyFriends: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}`);\r\n    },\r\n    isMyFriend: (targetID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}/${targetID}`\r\n        );\r\n    },\r\n    isAdministrator: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Administrators}/${userID}`\r\n        );\r\n    }\r\n};\r\n\r\nexport default userServices;","import { Routes, Status } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst gameServices = {\r\n    \r\n    getAllGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}`);\r\n    },\r\n    getMyGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}/${Server.Mine}`);\r\n    },\r\n    loadPlayerData: async(userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (userID === null) reject(null);\r\n            if (status === Status.Successful) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;","import \"./scores.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport Configs from \"../../services/configs\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log('CHecking prop: ', this.props.Device);\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllGames();\r\n            if (status === Configs.Status.Successful) return data.allGames;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                result = result.reverse();\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    \r\n    render() {\r\n       \r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        // DESIGN : USE <Tabs> ???\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                !showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {/* this single column is to make mode select buttons and Allscores same width */}\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst GameGuide = () => {\r\n    return ( \r\n        <Card border=\"warning\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">راهنمای بازی</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default GameGuide;","import { Card } from 'react-bootstrap';\r\nimport './info.css'\r\n\r\nconst ContactUs = () => {\r\n    return ( \r\n        <Card border=\"dark\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default ContactUs;","import { Fragment, useLayoutEffect, useState, useEffect } from \"react\";\r\nimport { Planets, Circle2, Sugar } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    const [whichOne, setWhichOne] = useState(0);\r\n    useEffect(() => {\r\n        setWhichOne(Math.floor(Math.random() * 100)); //randomize animation\r\n    }, []);\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading, whichOne]); //may have bug yet!!\r\n    //random animation\r\n    const selectedLoader =\r\n        whichOne % 3 === 0 ? (\r\n            <Circle2 time={0} customLoading={loading} />\r\n        ) : whichOne % 3 === 1 ? (\r\n            <Planets time={0} customLoading={loading} />\r\n        ) : (\r\n            <Sugar time={0} customLoading={loading} />\r\n        );\r\n\r\n    return <Fragment>{loading ? selectedLoader : null}</Fragment>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                browserStorage.writeUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-2\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal\r\n                    backdrop=\"static\"\r\n                    show={showModal}\r\n                    onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    autoComplete=\"username\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <hr />\r\n                            <Row>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-warning\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport { Sorry, OK, Notify } from \"../tools/msgbox\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            Sorry(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\");\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    OK(\"ثبت نام با موفقیت انجام شد\");\r\n                    browserStorage.writeUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n\r\n                    Notify(\"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\");\r\n                } else if (!Configs.Status.isErrorExpected(err)) {\r\n                    Sorry(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\"\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            Sorry(\"رمز عبورها مطابقت ندارند\");\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Card border=\"success\" className=\"sign-up-card\">\r\n                <LoadingBar loading={loading} />\r\n                <Card.Header className=\"bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">\r\n                                نام خانوادگی\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">\r\n                                شماره دانشجویی\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                autoComplete=\"username\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">ایمیل</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                autoComplete=\"new-password\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">\r\n                                تایید رمز عبور\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer className=\"border-primary bg-transparent\">\r\n                    اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { Card, Form, Button, Col, Row } from \"react-bootstrap\";\r\nimport { Sorry } from \"../tools/msgbox\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                console.log(data);\r\n                browserStorage.writeUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                Sorry(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <Card border=\"primary\" className=\"sign-in-sidebar\">\r\n                <Card.Header\r\n                    border=\"primary\"\r\n                    className=\"text-center text-primary\">\r\n                    ورود کاربران\r\n                </Card.Header>\r\n                <LoadingBar loading={loading} />\r\n                <Card.Body className=\"text-primary\">\r\n                    <Form onSubmit={(event) => this.onSignInSubmitted(event)} >\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            autoComplete=\"username\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"شماره دانشجویی\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"رمز عبور\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Card.Footer className=\"bg-transparent border-primary\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"success\"\r\n                                        className=\"sign-in-sidebar-buttons\">\r\n                                        <i\r\n                                            className=\"fa fa-sign-in px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ورود\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button\r\n                                        className=\"sign-in-sidebar-buttons\"\r\n                                        variant=\"warning\">\r\n                                        <i\r\n                                            className=\"fa fa-recycle px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        بازیابی پسورد\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Server.Root}/${Server.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n\r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const { status, data } = await noticeServices.getShortNotices();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    \r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    if(data.notices.length === 0) {\r\n                        setNotices([{\r\n                            title: \"پیام\",\r\n                            text: \"اطلاعیه جدیدی وجود ندارد\",\r\n                        }]);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            }\r\n        })();\r\n        \r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"notice-sidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.length && notices.map((notice) => {\r\n                    return (\r\n                        <Fragment key={uuidv1()}>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-rss px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Badge, Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst OnlineStatistics = () => {\r\n    const {players, games} = useSelector((state) => state.statistics);\r\n    return (\r\n        <ListGroup className=\"list-group list-group-flush\">\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-wifi px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            کاربران آنلاین\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {players}\r\n                        </Badge>\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی های فعال\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {games}\r\n                        </Badge>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default OnlineStatistics;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const SaveNewToken = () => ({\r\n    type: \"SAVE_TOKEN\",\r\n});\r\n\r\nexport const TriggerRecordUpdate = () => ({\r\n    type: \"TRIGGER_UPDATE\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\nexport const ResetRoom = () => ({\r\n    type: \"RESET_ROOM\",\r\n});\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n\r\nexport const UpdateStatistics = (statistics) => ({\r\n    type: \"UPDATE_STATISTICS\",\r\n    payload: statistics,\r\n});\r\n\r\nexport const TriggerOpponentSearch = () => ({\r\n    type: \"TRIGGER_OPPONENT_SEARCH\",\r\n});\r\n\r\nexport const SendFriendRequestTo = (targetID) => ({\r\n    type: \"SEND_FRIEND_REQUEST\",\r\n    payload: targetID,\r\n});\r\n\r\nexport const SendMessageTo = (name, friendID, text) => ({\r\n    type: \"SEND_MESSAGE\",\r\n    payload: { name, friendID, text },\r\n});\r\n\r\nexport const RecieveMessageFrom = (name, friendID, text) => ({\r\n    type: \"RECIEVE_MESSAGE\",\r\n    payload: { name, friendID, text },\r\n});\r\n\r\nexport const MessagePushed = () => ({\r\n    type: \"MEESAGE_PUSHED\",\r\n});\r\nexport const ResetMessages = () => ({\r\n    type: \"RESET_MESSAGES\",\r\n});\r\n","import { Alert, Button, Form, Row, InputGroup } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendMessageTo } from \"../globals/redux/actions\";\r\n\r\nconst GameChatBox = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(\"\");\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n\r\n    const composeMessage = (event) => {\r\n        if (myMessage) {\r\n            //if message is not empty\r\n            event.preventDefault();\r\n            dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n            setMyMessage(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={(event) => composeMessage(event)}>\r\n            <Row className=\"w-100 mt-3 mx-auto\">\r\n                <Alert className=\"w-100 text-right\" variant=\"info\">\r\n                    {message && message.recieved ? (\r\n                        message.recieved.text\r\n                    ) : (\r\n                        <p className=\"p-1\"> </p>\r\n                    )}\r\n                </Alert>\r\n            </Row>\r\n            <Row className=\"w-100 mx-auto mb-3\">\r\n                <InputGroup className=\"w-100\">\r\n                    <InputGroup.Prepend style={{ width: \"10%\" }}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"mx-auto\"\r\n                            variant=\"outline-info\">\r\n                            <i\r\n                                className=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </InputGroup.Prepend>\r\n\r\n                    <InputGroup.Prepend style={{ width: \"88%\" }}>\r\n                        <Form.Control\r\n                            placeholder=\"پیام...\"\r\n                            value={myMessage}\r\n                            onChange={(e) => setMyMessage(e.target.value)}\r\n                            className=\"text-right\"></Form.Control>\r\n                    </InputGroup.Prepend>\r\n                </InputGroup>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default GameChatBox;\r\n","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Badge,\r\n    Image,\r\n    ListGroup,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport OnlineStatistics from \"./OnlineStatistics\";\r\nimport { SendFriendRequestTo } from \"../globals/redux/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport GameChatBox from \"../chat/GameChatBox\";\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { inGame } = props;\r\n    const me = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const [personIsFriend, setPersonIsFriend] = useState(false);\r\n\r\n    const person = props.person ? props.person : me;\r\n    \r\n    const onFriendRequestClick = (event) => {\r\n        event.target.innerHTML = \"ارسال شد...\";\r\n        event.target.disabled = true;\r\n        dispatch(SendFriendRequestTo(person.userID));\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (me && person.userID !== me.userID) {\r\n            (async () => {\r\n                try {\r\n                    const { status, data } = await userServices.isMyFriend(\r\n                        person.userID\r\n                    );\r\n                    if (status === Configs.Status.Successful) {\r\n                        setPersonIsFriend(data.isFriend);\r\n                    }\r\n                } catch (err) {\r\n                    // handle error.\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [person, me]);\r\n    if(!person) return null;\r\n    return (\r\n        <Card border=\"info\" className=\"player-info-sideBar\">\r\n            <Card.Header className=\"text-center text-info form-inline\">\r\n                <Col>\r\n                    <Card.Text className=\"text-left\">{person.fullname}</Card.Text>\r\n                </Col>\r\n                <Col>\r\n                    <Image\r\n                        className=\"card-img-top player-avatar\"\r\n                        src={noAvatar}\r\n                        alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n                    />\r\n                </Col>\r\n            </Card.Header>\r\n\r\n            <Card.Body>\r\n                <ListGroup className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <ListGroup.Item>\r\n                            <Alert\r\n                                variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading className=\"text-center\">\r\n                                    {inGame.score} : {inGame.shape}\r\n                                </Alert.Heading>\r\n                            </Alert>\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>امتیاز بازیکن</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>تعداد بردها</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.wins}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">تعداد تساوی ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.draws}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">تعداد باخت ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.loses}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {me === person ? (\r\n                    <OnlineStatistics />\r\n                ) : personIsFriend ? (\r\n                    <GameChatBox friendID={person.userID} />\r\n                ) : (\r\n                    <Button\r\n                        variant={\"outline-info\"}\r\n                        block\r\n                        onClick={(event) => onFriendRequestClick(event)}>\r\n                        <i\r\n                            className=\"fa fa-handshake-o px-2\"\r\n                            aria-hidden=\"true\"></i>\r\n                        درخواست دوستی\r\n                    </Button>\r\n                )}\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { MessagePushed } from \"../globals/redux/actions\";\r\nimport { browserStorage, Routes } from \"../services/configs\";\r\nimport { Attention, NewMsg } from \"./msgbox\";\r\nimport jwtdecode from \"jwt-decode\";\r\n\r\nconst NotificationCenter = ({ location }) => {\r\n\tconst message = useSelector((state) => state.message);\r\n\tconst { pathname } = location;\r\n\tconst dispatch = useDispatch();\r\n\t// check TOKEN EXPIRE time and notify user before he starts a game to re login\r\n\tuseEffect(() => {\r\n\t\ttry {\r\n\t\t\tif (message && message.recieved && !message.recieved.pushed) {\r\n\t\t\t\tif (pathname !== Routes.Client.ChatRoom) {\r\n\t\t\t\t\tif (pathname !== Routes.Client.GameDeck) {\r\n\t\t\t\t\t\t// then just only push when message sender is the opponent\r\n\t\t\t\t\t\t//return;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tNewMsg(message.recieved);\r\n\t\t\t\t\t//prevent recieved message from getting stuck in notificatioon loop\r\n\t\t\t\t\tdispatch(MessagePushed());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst decoded_token = jwtdecode(browserStorage.TOKEN());\r\n            \r\n\t\t\tconst toMin = (mili) => mili / 1000 / 60;\r\n\t\t\tif (decoded_token) {\r\n\t\t\t\tconst { exp, iat } = decoded_token;\r\n\t\t\t\tconst expirationLength =  (exp - iat) / 60;\r\n                const criticalNow = toMin(Date.now()) + expirationLength/4;\r\n                // ex: expiration is at 60 min\r\n                // after converting all values to minutes\r\n                // critical point is about 15 minutes to expiration\r\n                // so if toMin(now) + 15min passes expiration date -> inform user to take action\r\n\t\t\t\tif (criticalNow >= exp / 60) {\r\n\t\t\t\t\tAttention(\"نشست شما در شرف انقضاست ... برای پیش گیری از بروز مشکل لطفا دوباره وارد حساب خود شوید\");\r\n                    // ...some action\r\n                    // implement onClick for this toast\r\n                    // like rerouting to sing in model and etc\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t}, [message, pathname, dispatch]);\r\n\r\n\treturn null;\r\n};\r\n\r\nexport default withRouter(NotificationCenter);\r\n","import { browserStorage, Routes } from \"../configs\";\r\nimport { Fragment, useCallback, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    TriggerOpponentSearch,\r\n    UpdateStatistics,\r\n    SetRoom,\r\n    SendFriendRequestTo,\r\n    RecieveMessageFrom,\r\n    ResetMessages,\r\n} from \"../../globals/redux/actions\";\r\nimport { Modal, Button, Row, Col, Badge } from \"react-bootstrap\";\r\nimport { Attention, OK } from \"../../tools/msgbox\";\r\nimport NotificationCenter from '../../tools/NotificationCenter';\r\n\r\nconst GlobalSocketManager = () => {\r\n    // I actually used .jsx format to make this Component EventBased\r\n    // On Each event called socket will do some specific operation\r\n    // events are actually useEffects bound to special state changes\r\n    const [socketGlobal, setSocketGlobal] = useState(null);\r\n    const [incommingFriendRequest, setIncommingFriendRequest] = useState(null);\r\n    const [showFriendshipModal, setShowFriendshipModal] = useState(false);\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const tools = useSelector((state) => state.tools);\r\n    const room = useSelector((state) => state.room);\r\n    const message = useSelector((state) => state.message);\r\n    const [clientOnline, toggleClientOnline] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const enableGlobalTimer = useCallback(() => {\r\n        return setInterval(() => {\r\n            if (socketGlobal) {\r\n                console.log(\"updating statistics...\");\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"online\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                );\r\n            }\r\n        }, 300000); // every 5 MINUTES request number of online members to update the site\r\n    }, [socketGlobal, player]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"global timer enabled\");\r\n        const timerID = enableGlobalTimer();\r\n\r\n        return () => {\r\n            console.log(\"global timer disabled\");\r\n            clearInterval(timerID);\r\n        };\r\n    }, [enableGlobalTimer]);\r\n\r\n    const connect = useCallback(() => {\r\n        return new Promise((resolve, reject) => {\r\n            var socket = new WebSocket(\r\n                `${Routes.Server.WebSocketRoot}/${Routes.Server.wsGlobalRoute}`\r\n            );\r\n            socket.onopen = () => {\r\n                socket.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"online\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                ); //temp\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onmessage = (response) => {\r\n                const { data } = response;\r\n                const { command, msg } = JSON.parse(data);\r\n                switch (command) {\r\n                    case \"ONLINE\": {\r\n                        const { players, games } = msg;\r\n                        dispatch(\r\n                            UpdateStatistics({\r\n                                players,\r\n                                games,\r\n                            })\r\n                        ); //playing temp\r\n                        break;\r\n                    }\r\n                    case \"ENTER_ROOM\": {\r\n                        if (msg) {\r\n                            console.log(\"your room\", msg);\r\n                            dispatch(SetRoom(msg));\r\n                            socket.send(\r\n                                JSON.stringify({\r\n                                    token: browserStorage.TOKEN(),\r\n                                    request: \"online\",\r\n                                    clientID: player.userID,\r\n                                    msg: null,\r\n                                })\r\n                            );\r\n                        } else {\r\n                            //search again 5s later\r\n                            // **********************\r\n                            //time out must be set with rising time out time to prevent server getting fucked up\r\n                            setTimeout(() => {\r\n                                dispatch(TriggerOpponentSearch());\r\n                            }, 5000);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_REQUEST\": {\r\n                        if (msg.askerID === opponent.userID) {\r\n                            //if both players are in game then ask immidiately\r\n                            setIncommingFriendRequest(msg);\r\n                            setShowFriendshipModal(true);\r\n                        } else {\r\n                            //if the friend request is comming from some one else then manage it differently\r\n                            //...\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_RESPONSE\": {\r\n                        const { answer, targetName } = msg;\r\n                        //if(answer) dispatch(TriggerRecordUpdate());\r\n                        if (answer)\r\n                            OK(`${targetName} درخواست دوستی شما را پذیرفت`);\r\n                        else\r\n                            Attention(\r\n                                `${targetName} درخواست دوستی شما را رد کرد`\r\n                            );\r\n                        dispatch(SendFriendRequestTo(null));\r\n                        break;\r\n                    }\r\n                    case \"CHAT\": {\r\n                        dispatch(\r\n                            RecieveMessageFrom(msg.name, msg.friendID, msg.text)\r\n                        );\r\n\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        //... whatever\r\n                        break;\r\n                    }\r\n                }\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onerror = (error) => {\r\n                // console.log(`WebSocket error: ${error}`);\r\n                socket.close();\r\n                reject(error);\r\n            };\r\n\r\n            socket.onclose = () => {\r\n                // reconnectr or what?\r\n                console.log(\"Reconnecting in  5 seconds\");\r\n                setTimeout(() => {\r\n                    (async () => {\r\n                        try {\r\n                            console.log(\"global socket online request\");\r\n                            let socket = player ? await connect() : null;\r\n                            setSocketGlobal(socket);\r\n                        } catch (err) {\r\n                            console.log(err);\r\n                        }\r\n                    })();\r\n                }, 5000);\r\n                resolve(null);\r\n                // this part needs editing ? maybe not\r\n            };\r\n        });\r\n    }, [dispatch, opponent, player]);\r\n\r\n    // EVENT NAME: PlayerUpdateEvent\r\n    // happens when player sign in status changes => set ups global socket connection and then if signed in=> reads number of online users in page\r\n    useEffect(() => {\r\n        if (clientOnline && player) {\r\n            (async () => {\r\n                try {\r\n                    console.log(\"global socket online request\");\r\n                    let socket = player ? await connect() : null;\r\n                    setSocketGlobal(socket);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [clientOnline, player, connect]);\r\n\r\n    // EVENT NAME: RandomGameInitiated Event\r\n    // happens when user clicks on 'Random Game\" Tab search button => sends opponent search request to server\r\n    useEffect(() => {\r\n        if (room.type) {\r\n            //is it necessary?\r\n            //completely making sure we're on right stage\r\n            if (!room.name && socketGlobal && player)\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"find\",\r\n                        clientID: player.userID,\r\n                        msg: room.type,\r\n                    })\r\n                );\r\n        } else if (!room.name) {\r\n            //room --> {null,null} --> means room has been reset hand u need to remove\r\n            if (socketGlobal)\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        token: browserStorage.TOKEN(),\r\n                        request: \"close_game\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                );\r\n        }\r\n    }, [player, room, tools.opponentSearchTriggered, socketGlobal]);\r\n\r\n    useEffect(() => {\r\n        if (tools.friendRequest) {\r\n            //tools.friendRequest either contains null => no request, or contains target ID for friendship\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    token: browserStorage.TOKEN(),\r\n                    request: \"ask_friendship\",\r\n                    clientID: player.userID,\r\n                    msg: {\r\n                        targetID: tools.friendRequest,\r\n                        askerName: player.fullname,\r\n                    },\r\n                })\r\n            );\r\n        }\r\n    }, [tools.friendRequest, socketGlobal, player]);\r\n\r\n    const respondToFriendshipRequest = (answer) => {\r\n        // handle multiple requests *************\r\n        socketGlobal.send(\r\n            JSON.stringify({\r\n                token: browserStorage.TOKEN(),\r\n                request: \"respond_friendship\",\r\n                clientID: player.userID,\r\n                msg: {\r\n                    answer,\r\n                    targetName: player.fullname,\r\n                    askerID: incommingFriendRequest.askerID,\r\n                },\r\n            })\r\n        );\r\n        // if(answer) dispatch(TriggerRecordUpdate());\r\n        setShowFriendshipModal(false);\r\n        setIncommingFriendRequest(null);\r\n        dispatch(SendFriendRequestTo(null)); //reset friend request targetID to prevent any future problm\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (message.sent) {\r\n            //if destination is determined, otherwise => means no message has been sent\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    token: browserStorage.TOKEN(),\r\n                    request: \"chat\",\r\n                    clientID: player.userID,\r\n                    msg: message.sent,\r\n                })\r\n            );\r\n            dispatch(ResetMessages());\r\n        }\r\n    }, [player, message, socketGlobal, dispatch]);\r\n\r\n    // if online status changes\r\n    setInterval(() => {\r\n        if (window.navigator.onLine) {\r\n            //client online\r\n            if (!clientOnline)\r\n                //this means -> client JUST became online\r\n                toggleClientOnline(true); //change connection status\r\n        } else {\r\n            // clients offline\r\n            if (clientOnline)\r\n                //this means -> client JUST became offline now\r\n                toggleClientOnline(false); //change connection status\r\n        }\r\n    }, 5000);\r\n\r\n    // is it really necessary though ?????\r\n\r\n    return (\r\n        //this is just for firendship request in games\r\n        <Fragment>\r\n            <NotificationCenter />\r\n\r\n            <Modal\r\n                show={showFriendshipModal}\r\n                onHide={() => respondToFriendshipRequest(false)}>\r\n                <Modal.Header closeButton />\r\n                <Modal.Body className=\"text-right\">\r\n                    <p>\r\n                        {!incommingFriendRequest ? null : (\r\n                            <Badge\r\n                                style={{ fontSize: \"18px\", margin: \"2%\" }}\r\n                                pill\r\n                                variant=\"warning\">\r\n                                {incommingFriendRequest.askerName}\r\n                            </Badge>\r\n                        )}\r\n                        به شما پیشنهاد دوستی داده است.\r\n                    </p>\r\n                    <p>اگر تمایل به دوستی ندارید میتواند درخواست را رد کنید.</p>\r\n                </Modal.Body>\r\n                <Modal.Footer className=\"w-100 text-right\">\r\n                    <Row className=\"w-100\">\r\n                        <Col>\r\n                            <Button\r\n                                variant=\"success\"\r\n                                block\r\n                                onClick={() =>\r\n                                    respondToFriendshipRequest(true)\r\n                                }>\r\n                                پذیرفتن\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                variant=\"danger\"\r\n                                onClick={() =>\r\n                                    respondToFriendshipRequest(false)\r\n                                }>\r\n                                رد\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GlobalSocketManager;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { LoadMe, SignOut } from \"../globals/redux/actions\";\r\nimport { browserStorage } from \"../services/configs\";\r\nimport gameServices from \"../services/http/gameServices\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// auto-sign in if store sign in data was reset\r\nconst AutoSignIn = () => {\r\n    const storageUserID = browserStorage.ID();\r\n    const dispatch = useDispatch();\r\n    const opponent = useSelector((state) => state.opponent);\r\n    useEffect(() => {\r\n        console.log(\"storageUserID user changed\");\r\n        if (storageUserID) {\r\n            console.log(\"auth called\");\r\n            gameServices\r\n                .loadPlayerData(storageUserID)\r\n                .then((result) => {\r\n                    dispatch(LoadMe(result));\r\n                    //dispatch(SaveNewToken());\r\n                })\r\n                .catch((err) => {\r\n                    dispatch(LoadMe(null));\r\n                    //dispatch(SaveNewToken());\r\n                });\r\n        }\r\n        else{\r\n            dispatch(LoadMe(null))\r\n        }\r\n    }, [storageUserID, opponent, dispatch]);\r\n\r\n    return null;\r\n};\r\n\r\nexport default AutoSignIn;\r\n","import { createContext } from \"react\";\r\n\r\nconst GlobalContext = createContext({\r\n    device: 0\r\n});\r\n\r\nexport default GlobalContext;","import SignInSideBar from \"../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment, useState, useEffect, useContext } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport GlobalSocketManager from \"../services/ws/GlobalSocketManager\";\r\nimport { Devices, Routes } from \"../services/configs\";\r\nimport AutoSignIn from '../tools/AutoSignIn';\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\n\r\n\r\nconst MainLayout = (props) => {\r\n    const context = useContext(GlobalContext)\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const scoreboard = useSelector((state) => state.scoreboard);\r\n\r\n    const [leftSideBar, setLeftSideBar] = useState(null);\r\n    const [rightSideBar, setRightSideBar] = useState(null);\r\n    console.log(context);\r\n    useEffect(() => {\r\n        setLeftSideBar(<NoticeSideBar />);\r\n    }, []);\r\n\r\n    //teste\r\n    //determine sidebar\r\n    useEffect(() => {\r\n        console.log(\"context.device responsive manager called\");\r\n        const setPrimaryRightSideBar = () => {\r\n            if (context.device !== Devices.Tablet)\r\n                setRightSideBar(\r\n                    player ? (\r\n                        <PlayerInfoSideBar inGame={scoreboard.me} />\r\n                    ) : (\r\n                        <SignInSideBar />\r\n                    )\r\n                );\r\n            else setRightSideBar(null);\r\n        };\r\n        if (pathname === Routes.Client.SignUp) {\r\n            setRightSideBar(null);\r\n            setLeftSideBar(null);\r\n        } else if (pathname === Routes.Client.GameDeck) {\r\n            // EDIT THIS..\r\n            // ON REFRESH -> rightSideBar is null!\r\n            // SOMETIMES: ERROR: cannout read .fullname of undefined person\r\n            setPrimaryRightSideBar();\r\n            if (opponent) {\r\n                if (context.device !== Devices.SmartPhone) {\r\n                    setLeftSideBar(\r\n                        <PlayerInfoSideBar\r\n                            person={opponent}\r\n                            inGame={scoreboard.opp}\r\n                        />\r\n                    );\r\n                } else {\r\n                    setLeftSideBar(null);\r\n                    setRightSideBar(null);\r\n                }\r\n            }\r\n        } else {\r\n            setLeftSideBar(<NoticeSideBar />); //EDIT THIS\r\n            setPrimaryRightSideBar();\r\n        }\r\n    }, [player, opponent, pathname, scoreboard, context.device]);\r\n\r\n    return (\r\n        <Fragment>\r\n            <AutoSignIn />\r\n            {player && <GlobalSocketManager />}\r\n\r\n            {context.device !== Devices.SmartPhone ? (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {rightSideBar && <Col xs={3}>{rightSideBar}</Col>}\r\n                    <Col\r\n                        className=\"mx-auto\"\r\n                        xs={pathname !== Routes.Client.SignUp ? null : 7}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {leftSideBar && (\r\n                        <Col xs={context.device !== Devices.Tablet ? 3 : 4}>\r\n                            {leftSideBar}\r\n                        </Col>\r\n                    )}\r\n                </Row>\r\n            ) : (\r\n                <Container>\r\n                    {/* what to do for control panelk sidebar in smartphone */}\r\n                    {player ? (\r\n                        <Row className=\"w-100 mx-auto\">{rightSideBar}</Row>\r\n                    ) : null}\r\n                    <Row className=\"w-100 mx-auto\">{leftSideBar}</Row>\r\n                    <Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n                </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"5px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n            <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                <thead className=\"bg-info\">\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">نام بازیکن</th>\r\n                        <th scope=\"col\">امتیاز</th>\r\n                        <th scope=\"col\">تعداد برد</th>\r\n                        <th scope=\"col\">تعداد باخت</th>\r\n                        <th scope=\"col\">تعداد تساوی</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {players.map((player) => (\r\n                        <SinglePlayerCard\r\n                            key={player.userID}\r\n                            rowNumber={\r\n                                players.findIndex(\r\n                                    (p) => p.userID === player.userID\r\n                                ) + 1\r\n                            }\r\n                            name={player.fullname}\r\n                            points={player.records.points}\r\n                            wins={player.records.wins}\r\n                            loses={player.records.loses}\r\n                            draws={player.records.draws}></SinglePlayerCard>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport LoadingBar from \"../../commons/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <Row className=\"mx-auto mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <AllPlayers players={players} />\r\n                </Row>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import {browserStorage, Routes} from '../configs';\r\n\r\nexport const createSocketRequest = (request, rname, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        rname,\r\n        playerID,\r\n        token: browserStorage.TOKEN(),\r\n        msg,\r\n    });\r\n\r\nexport const connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(`${Routes.Server.WebSocketRoot}/${Routes.Server.wsGamePlayRoute}`);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            \r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n    ResetRoom,\r\n    TriggerRecordUpdate,\r\n    SaveNewToken\r\n    // UpdateStatistics,\r\n    // TriggerOpponentSearch,\r\n    // SendFriendRequestTo,\r\n    // SendMessageTo,\r\n    // RecieveMessageFrom,\r\n    // ResetMessages,\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n        tools: state.tools,\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        ResetRoom: () => dispatch(ResetRoom()),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n        TriggerRecordUpdate: () => dispatch(TriggerRecordUpdate()),\r\n        SaveNewToken: () => dispatch(SaveNewToken())\r\n        //for memory managment these are commented because they arent used in Class Components yet\r\n        //UpdateStatistics: (stat) => dispatch(UpdateStatistics(stat)),\r\n        //TriggerOpponentSearch: () => dispatch(TriggerOpponentSearch()),\r\n        //SendFriendRequestTo: () => dispatch(SendFriendRequestTo()),\r\n        //SendMessageTo: (name, friendID, text) => dispatch(SendMessageTo(name, friendID, text)),\r\n        //RecieveMessageFrom: (name, friendID, text) => dispatch(RecieveMessageFrom(name, friendID, text)),\r\n        //ResetMessages: () => dispatch(ResetMessages())\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Card, Col, Row } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { GameSetting } from \"../../services/configs\";\r\n\r\nconst BriefScoreboard = ({ timeRemaining, players }) => {\r\n    const [timeStamp, setTimeStamp] = useState(null);\r\n    const aThird = GameSetting.T3D.TurnTimeOut / 3;\r\n    useEffect(() => {\r\n        let color = null,\r\n            icon = null;\r\n        if (timeRemaining) {\r\n            if (timeRemaining >= aThird) {\r\n                color = \"text-success\";\r\n                icon = (\r\n                    <i className=\"fa fa-hourglass-start px-2\" aria-hidden=\"true\"></i>\r\n                );\r\n            } else {\r\n                color = \"text-danger\";\r\n                icon = (\r\n                    <i className=\"fa fa-hourglass-half px-2\" aria-hidden=\"true\"></i>\r\n                );\r\n            }\r\n        } else {\r\n            color = \"text-dark\";\r\n            icon = <i className=\"fa fa-hourglass-end px-2\" aria-hidden=\"true\"></i>;\r\n        }\r\n        setTimeStamp(<div className={color}>{icon}{timeRemaining}</div>);\r\n    }, [timeRemaining, aThird]);\r\n\r\n    return (\r\n        <Card.Header className=\"w-100 text-center\">\r\n            <Row style={{ fontSize: \"20px\" }}>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"right\",\r\n                        color: players[1].color,\r\n                    }}>\r\n                    {players[1].shape} : {players[1].score}\r\n                </Col>\r\n                <Col>{timeStamp}</Col>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        color: players[0].color,\r\n                    }}>\r\n                    {players[0].score} : {players[0].shape}\r\n                </Col>\r\n            </Row>\r\n        </Card.Header>\r\n    );\r\n};\r\n\r\nexport default BriefScoreboard;\r\n","import { Fragment } from \"react\";\r\nimport { Button, Card, Row } from \"react-bootstrap\";\r\nimport { GameSetting } from \"../../services/configs\";\r\nimport BriefScoreboard from \"./BriefScoreboard\";\r\nimport \"../games.css\";\r\n\r\nconst TableDesign = ({ timeRemaining, dimension, players, table, onEachCellClick }) => {\r\n    let dimens = [];\r\n    for (let i = 0; i < dimension; i++) dimens.push(i);\r\n\r\n    //prop drilling in BriefScoreBoard\r\n    return (\r\n        <Card\r\n            bg=\"transparent\"\r\n            border=\"dark\"\r\n            className=\"w-100 mx-auto\">\r\n            <BriefScoreboard timeRemaining={timeRemaining} players={players} />\r\n            <Card.Body className=\"game-border-card\">\r\n                {table ? (\r\n                    dimens.map((floor) => (\r\n                        <Fragment>\r\n                            {dimens.map((row) => (\r\n                                <Row\r\n                                    style={{\r\n                                        direction: \"ltr\",\r\n                                        marginLeft: `${GameSetting.T3D.TableRowMargings[row]}px`,\r\n                                    }}>\r\n                                    {dimens.map((column) => (\r\n                                        <Button\r\n                                            key={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            variant=\"btn btn-outline-dark\"\r\n                                            className=\"game-table-cells\"\r\n                                            style={\r\n                                                table[floor][row][column] !==\r\n                                                null\r\n                                                    ? {\r\n                                                          color: players[\r\n                                                              table[floor][row][\r\n                                                                  column\r\n                                                              ]\r\n                                                          ].color,\r\n                                                      }\r\n                                                    : null\r\n                                            }\r\n                                            id={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            onClick={(event) =>\r\n                                                onEachCellClick(event)\r\n                                            }>\r\n                                            {table[floor][row][column] !==\r\n                                                null &&\r\n                                                players[\r\n                                                    table[floor][row][column]\r\n                                                ].shape}\r\n                                        </Button>\r\n                                    ))}\r\n                                </Row>\r\n                            ))}\r\n                            <br />\r\n                        </Fragment>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"text-center\"> در حال اتصال... </p>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TableDesign;\r\n","import { Component } from \"react\";\r\nimport \"../games.css\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport {\r\n    connect,\r\n    createSocketRequest,\r\n} from \"../../services/ws/gamePlaySocketServices\";\r\nimport withReduxDashboard from \"../../globals/redux/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\nimport TableDesign from \"./TableDesign\";\r\nimport { GameSetting } from \"../../services/configs\";\r\nimport { Attention, Notify } from \"../../tools/msgbox\";\r\nimport { toTimeShort } from \"../../tools/format\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n                color: \"blue\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketGamePlay: undefined,\r\n        playerOnline: true,\r\n        timeRemaining: 0, //create a config\r\n        timerID: null,\r\n        connectionCheckTimerID: null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n\r\n    enableTimerForMyMove = (timeout = GameSetting.T3D.TurnTimeOut) => {\r\n        this.setState({ timeRemaining: timeout });\r\n        //is it needed to declare timerID as state?\r\n        const timerID = setInterval(() => {\r\n            const { timeRemaining, timerID } = this.state;\r\n            if (timeRemaining <= 0) {\r\n                clearInterval(timerID);\r\n                return;\r\n            }\r\n            this.setState({ timeRemaining: this.state.timeRemaining - 1 });\r\n        }, 1000);\r\n        this.setState({ timerID });\r\n    };\r\n\r\n    updatePlayerStates = ({ turn, xScore, oScore }) => {\r\n        const players = [...this.state.players];\r\n        players[0].score = xScore;\r\n        players[1].score = oScore;\r\n        this.setState({\r\n            players,\r\n            turn,\r\n        });\r\n    };\r\n\r\n    disableAllTimers = () => {\r\n        const { connectionCheckTimerID, timerID } = this.state;\r\n        clearTimeout(connectionCheckTimerID);\r\n        clearTimeout(timerID); //move time out timer\r\n    };\r\n\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { cmd, msg } = JSON.parse(data);\r\n        if (cmd === \"START\") {\r\n            const startTime = toTimeShort(msg);\r\n            Attention(`بازی راس ساعت ${startTime} آغاز شد.`);\r\n        } else if (cmd === \"GAME\") {\r\n            const { IDs, dimension, myTurn } = msg;\r\n            this.setState({ dimension, myTurn });\r\n            const opponentIndex = Number(!myTurn);\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (cmd === \"LOAD\") {\r\n            this.updatePlayerStates(msg);\r\n            const { table } = msg;\r\n\r\n            this.setState({\r\n                table,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (cmd === \"TIMER\") {\r\n            //you can calculate request respone time -> then minimize it from tiem sent by server -> to gain acurate time\r\n            //but its real neccessary, Math.floor on the server side does this nearly\r\n            //but for accurate approach remember: remove Math.floor from server side\r\n            console.log(\"time updated: \", msg);\r\n            this.setState({ timeRemaining: msg });\r\n            clearTimeout(this.state.timerID); //clear move time out timers, though their disabled before, this is for assurance\r\n            this.enableTimerForMyMove(msg);\r\n        } else if (cmd === \"SCORES\") this.updatePlayerStates(msg);\r\n        else if (cmd === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            const { dimension } = this.state;\r\n            const cellID = Number(msg.nextMove);\r\n\r\n            //*************** */\r\n            //is this needed to check the move in client? considering that complete check has been made in client\r\n            //and consder that: checking move in client may cause some bugs\r\n            //for ex: new move is sent -> and 'cause of some error the cell is not empty\r\n            //turn is not updated and this player can not make new moves to recieve server's table!!!\r\n            this.verifyAndApplyTheMove(\r\n                this.getCellCoordinates(cellID, dimension),\r\n                this.cellButtons[cellID]\r\n            );\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            this.updatePlayerStates(msg);\r\n\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n\r\n            // now inform the server that the move is recieved\r\n            //force connect it?\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\r\n                    \"move_recieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            // server time out is set and now setInterval for this client to show how much time left\r\n            this.enableTimerForMyMove();\r\n        } else if (cmd === \"MOVE_MISSED\") {\r\n            const { myTurn } = this.state;\r\n            //msg --> forced set turn\r\n            this.setState({ turn: msg });\r\n            if (msg === myTurn) this.enableTimerForMyMove();\r\n        } else if (cmd === \"END\") {\r\n            this.updatePlayerStates(msg);\r\n            this.endThisGame();\r\n            this.disableAllTimers();\r\n        } else if (cmd === \"CLOSE\") {\r\n            Attention(\r\n                \"بدلیل حاضر نبودن هیچ کدام از بازیکینان، بازی شما کنسل شد\"\r\n            );\r\n            this.closeThisGame();\r\n        } else {\r\n            console.log(\"wrong socket request\");\r\n        }\r\n    };\r\n\r\n    forceConnectWS = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await connect(room.name, player.userID, room.type);\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketGamePlay: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n            // **********************\r\n            //time out must be set with rising time out time to prevent server getting fucked up\r\n            setTimeout(\r\n                () => {\r\n                    console.log(\"rconnecting from GamePlay\");\r\n                    this.forceConnectWS(nextJob);\r\n                },\r\n                nextJob ? 1000 : 3000\r\n            );\r\n            //if there is a next job --> then player is sending a move or something important and\r\n            //time out needs to be called quicker 'cause players have timeout in server for sending moves\r\n        }\r\n    };\r\n\r\n    enableConnectionCheckTimer = () => {\r\n        return setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (!this.state.playerOnline) {\r\n                    //player JUST became online\r\n                    console.log(\"connected\");\r\n                    this.setState({ playerOnline: true }); // toggle online status\r\n                    this.forceConnectWS(null); // reconnect to gamePlayWebSocket\r\n                }\r\n            } else if (this.state.playerOnline) {\r\n                //player JUST became offline\r\n                console.log(\"dissconnected\");\r\n                this.setState({ playerOnline: false });\r\n            }\r\n        }, 2500); //2.5 sec is it ok?\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"game-table-cells\"); // pay attension to searched className! may cause an error\r\n\r\n        const { player, room } = this.props;\r\n        const { myTurn } = this.state;\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectWS(() => {\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\"load\", room.name, player.userID, null)\r\n            );\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\"mytimer\", room.name, player.userID, myTurn)\r\n            );\r\n        });\r\n\r\n        console.log(\"TOO MANY UNNEEDED PROPS SENT: \", this.props);\r\n        this.setState({\r\n            connectionCheckTimerID: this.enableConnectionCheckTimer(),\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.disableAllTimers();\r\n    }\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension, turn, timerID } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                //this is just for when the connection is not automatically came back, so the user via clicking cells can initiate connection\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    console.log(this.state.myTurn);\r\n                    //is this needed really?\r\n                    this.forceConnectWS(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n\r\n                    this.setState({ turn: (turn + 1) % 2 });\r\n                    this.forceConnectWS(() => {\r\n                        this.state.socketGamePlay.send(\r\n                            createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n\r\n                        //load is not needed cause i updated server to send back new scores immediately\r\n                        /*this.state.socketGamePlay.send(\r\n                            createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );*/\r\n                    });\r\n                    clearInterval(timerID);\r\n                    this.setState({ timeRemaining: 0 });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.value = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({ table: tempTable });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"game-table-cells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"game-table-cells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    closeThisGame = () => {\r\n        this.state.socketGamePlay.close();\r\n        this.setState({ socketGamePlay: null });\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.ResetRoom();\r\n            this.props.TriggerRecordUpdate();\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n\r\n    endThisGame = () => {\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        //NOTE: u can deliver this message to socket global to make sure toast shows all the tie but its no need really :|\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            Notify(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            Notify(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else Notify(\"شما باختید\");\r\n        //reset everything:\r\n        this.closeThisGame();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <TableDesign\r\n                dimension={this.state.dimension}\r\n                players={this.state.players}\r\n                table={this.state.table}\r\n                timeRemaining={this.state.timeRemaining}\r\n                onEachCellClick={this.onEachCellClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectWS(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectWS(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { SetRoom, TriggerOpponentSearch } from \"../globals/redux/actions\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport LoadingBar from '../commons/LoadingBar';\r\nimport { Notify } from \"../tools/msgbox\";\r\n\r\nconst RoomManager = ({ friendlyGame }) => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        if (!player) {\r\n            Notify(\"ابتدا باید وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n        if (friendlyGame) dispatch(SetRoom({ name: roomName, type: gameType }));\r\n        // random game:\r\n        else {\r\n            dispatch(SetRoom({ name: null, type: gameType }));\r\n            dispatch(TriggerOpponentSearch());\r\n            setSearching(true);\r\n        }\r\n    };\r\n\r\n    //on destroy\r\n    useEffect(() => {\r\n        return () => {\r\n            setSearching(false); //make sure preloader turns off\r\n         }\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <LoadingBar loading={searching} />\r\n            <hr />\r\n            <Form onSubmit={(event) => onStartGameClick(event)}>\r\n                <Form.Group className=\"form-inline\">\r\n                    <Form.Label className=\"w-25\">ابعاد جدول</Form.Label>\r\n                    <InputGroup\r\n                        style={{\r\n                            border: \"1px solid orange\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"2px\",\r\n                        }}>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"3\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)}\r\n                            />\r\n                            <InputGroup.Text>3 * 3 * 3</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"4\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)}\r\n                            />\r\n                            <InputGroup.Text>4 * 4 * 4</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"5\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)}\r\n                            />\r\n                            <InputGroup.Text>5 * 5 * 5</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <hr />\r\n                {friendlyGame && (\r\n                    \r\n                    <Form.Group className=\"mt-3 form-inline\">\r\n                        \r\n                        <Form.Label className=\"w-25\">نام روم</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"w-75 text-left bg-transparent\"\r\n                            placeholder=\"Room Name\"\r\n                            value={roomName}\r\n                            required=\"required\"\r\n                            onChange={(event) =>\r\n                                setRoomName(event.target.value)\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                )}\r\n                <hr />\r\n                <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                    <i\r\n                        className={`fa ${\r\n                            friendlyGame ? \"fa-handshake-o\" : \"fa-search\"\r\n                        } px-2`}\r\n                        aria-hidden=\"true\"></i>\r\n                    {friendlyGame ? \"ارسال درخواست\" : \"جستجو\"}\r\n                </Button>\r\n            </Form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import { Alert, Badge, Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst CompetitionSummary = ({ title, summary }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" variant=\"info\">\r\n                    <Alert.Heading className=\"text-center\">\r\n                        <Badge variant=\"success p-2\" >\r\n                            {title}\r\n                        </Badge>\r\n                    </Alert.Heading>\r\n\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill=\"true\" variant=\"info\">\r\n                    <p>تعداد شرکت کنندگان : 00000000</p>\r\n                    <p>نکات دیگر</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col>\r\n                    <Button block variant=\"outline-success\">شرکت در مسابقه</Button>\r\n                </Col>\r\n                <Col>\r\n                <Button block variant=\"outline-secondary\">بازیکنان حاضر</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionSummary;\r\n","import { Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport \"./competitions.css\";\r\nimport CompetitionSummary from \"./CompetitionSummary\";\r\n\r\nconst CompetitionsMain = () => {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <hr />\r\n\r\n            <Row>\r\n                <Col className=\"competition-menu-body\" sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"first\">\r\n                                جام حذفی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"second\">\r\n                                لیگ امتیازی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"third\">\r\n                                بازی شرطی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"forth\">\r\n                                جدول رندوم\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"fifth\">\r\n                                و غیره\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Col>\r\n                {/* <div style={{borderLeft: '1px solid gray', height:'500px'}}></div> */}\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <CompetitionSummary\r\n                                title=\"جام حذفی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <CompetitionSummary\r\n                                title=\"لیگ امتیازی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <CompetitionSummary\r\n                                title=\"بازی شرطی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"forth\">\r\n                            <CompetitionSummary\r\n                                title=\"جدول رندوم\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"fifth\">\r\n                            <CompetitionSummary\r\n                                title=\"و غیره\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionsMain;\r\n","import GamePlay from \"./gameplay/GamePlay\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SingleGame from \"./SingleGame\";\r\nimport { Tab, Tabs, Card, Fade } from \"react-bootstrap\";\r\nimport { Fragment } from \"react\";\r\nimport CompetitionsMain from \"./competitions/CompetitionsMain\";\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector((state) => state.room);\r\n\r\n    return (\r\n        <Fragment>\r\n            {room.name ? (\r\n                <GamePlay />\r\n            ) : (\r\n                <Card\r\n                    border=\"secondary\"\r\n                    bg=\"transparent\"\r\n                    className=\"game-deck-card\">\r\n                    <Card.Body>\r\n                        <Tabs\r\n                            defaultActiveKey=\"randomGame\"\r\n                            transition={false}\r\n                            id=\"noanim-tab-example\"\r\n                            variant=\"pills\"\r\n                            // transition={Fade}\r\n                            className=\"mb-3\">\r\n                            \r\n                            <Tab eventKey=\"randomGame\" title=\"بازی تصادفی\">\r\n                                <SingleGame friendlyGame={false} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"competitions\" title=\"مسابقات\">\r\n                                <CompetitionsMain />\r\n                            </Tab>\r\n                            <Tab eventKey=\"friendlyGame\" title=\"بازی با دوستان\">\r\n                                <SingleGame friendlyGame={true} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Card.Body>\r\n                </Card>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport { Status, browserStorage } from \"../services/configs\";\r\nimport \"./profile.css\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport jwtdecode from \"jwt-decode\";\r\nimport { OK, Sorry } from \"../tools/msgbox\";\r\nconst NoticeManager = () => {\r\n\t//u can create another component for listing notices ?\r\n\tconst player = useSelector((state) => state.player);\r\n\tconst [isAllowed, setAllowed] = useState(undefined);\r\n\tconst [title, setTitle] = useState(\"\");\r\n\tconst [text, setText] = useState(\"\");\r\n\tconst [startDate, setStartDate] = useState(null);\r\n\tconst [endDate, setEndDate] = useState(null);\r\n\tconst [notices, setNotices] = useState([]);\r\n\tconst [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n\tconst [updateTrigger, setUpdateTrigger] = useState(false);\r\n\tconst [loading, setLoading] = useState(false);\r\n\r\n\tconst resetStates = () => {\r\n\t\tsetTitle(\"\");\r\n\t\tsetText(\"\");\r\n\t\tsetStartDate(null);\r\n\t\tsetEndDate(null);\r\n\t\tsetSelectedNoticeID(null);\r\n\t\tsetUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\t//use another simpler preloader\r\n\t\t//load all notices in left side for selecting: load all and push them in notices state\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tconst { status, data } =\r\n\t\t\t\t\tawait noticeServices.getAdvancedNotics();\r\n\t\t\t\tif (status === Status.Successful) {\r\n\t\t\t\t\t//return data.notices;\r\n\t\t\t\t\tif (data.notices.length) setNotices(data.notices.reverse());\r\n\t\t\t\t\t//if all is empty\r\n\t\t\t\t\tif (data.notices.length === 0) {\r\n\t\t\t\t\t\tsetNotices([\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttitle: \"پیام\",\r\n\t\t\t\t\t\t\t\ttext: \"اطلاعیه جدیدی وجود ندارد\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tsetNotices([\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttitle: \"خطا\",\r\n\t\t\t\t\t\ttext: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n\t\t\t\t\t},\r\n\t\t\t\t]);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t\tsetLoading(false);\r\n\t\t})();\r\n\t}, [updateTrigger]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst token = browserStorage.TOKEN();\r\n        let isAdmin = undefined;\r\n\t\tif (token) {\r\n\t\t\tconst decoded_token = jwtdecode(browserStorage.TOKEN());\r\n\t\t\tisAdmin = decoded_token &&\r\n\t\t\t\tdecoded_token.user.admin &&\r\n\t\t\t\tdecoded_token.exp > Date.now() / 1000; //user is admin and token not expired\r\n\t\t\t// show proper message for simple users\r\n\t\t\tif (!player || isAdmin === false) {\r\n\t\t\t\t//in first render a wronge message will be shown! find a fix\r\n\t\t\t\t//2nd condition must be exactly the same\r\n\t\t\t\tSorry(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\");\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n        else isAdmin = false;\r\n\t\tsetAllowed(isAdmin);\r\n\t}, [player]);\r\n\t//***** in server implemented a middleware for this, is this needed? */\r\n\r\n\t//runs when create notice button clicks\r\n\tconst createNewNotice = async () => {\r\n\t\t//add patern and stuff to states and inputs\r\n\t\ttry {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst { status } = await noticeServices.createNotice({\r\n\t\t\t\ttitle,\r\n\t\t\t\ttext,\r\n\t\t\t\tstartDate: new Date(startDate),\r\n\t\t\t\tendDate: new Date(endDate),\r\n\t\t\t});\r\n\t\t\t//*********** */\r\n\t\t\t//COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n\t\t\tif (status === Status.CreatedSuccessfully) {\r\n\t\t\t\tOK(`اطلاعیه ی ${title} با موفقیت ساخته شد`);\r\n\t\t\t\tresetStates();\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tif (!Status.isErrorExpected(err))\r\n\t\t\t\tSorry(\r\n\t\t\t\t\t\"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\"\r\n\t\t\t\t);\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst selecteNotice = (notice) => {\r\n\t\t// console.log(notice);\r\n\t\tsetSelectedNoticeID(notice._id);\r\n\t\tsetTitle(notice.title);\r\n\t\tsetText(notice.text);\r\n\t\tsetStartDate(new Date(notice.startDate));\r\n\t\tsetEndDate(new Date(notice.endDate));\r\n\t};\r\n\r\n\tconst cancelEditing = () => {\r\n\t\tresetStates();\r\n\t};\r\n\r\n\tconst saveChanges = async () => {\r\n\t\t//add patern and stuff to states and inputs\r\n\t\tif (!selectedNoticeID) return;\r\n\t\tsetLoading(true);\r\n\t\ttry {\r\n\t\t\tconst { status } = await noticeServices.editNotice(\r\n\t\t\t\tselectedNoticeID,\r\n\t\t\t\t{ title, text, startDate, endDate }\r\n\t\t\t);\r\n\t\t\tif (status === Status.Successful) {\r\n\t\t\t\tOK(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`);\r\n\t\t\t\tresetStates();\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tif (!Status.isErrorExpected(err))\r\n\t\t\t\tSorry(\r\n\t\t\t\t\t\"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\"\r\n\t\t\t\t);\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t};\r\n\t// if admin status is checked directly by server then start rendering the page\r\n\t//consists two part\" right part => used for creating and editing notices\r\n\t//left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n\t//edit all heights in control panel\r\n\t//add patern and stuff to states and inputs\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{player && isAllowed && (\r\n\t\t\t\t<Row style={{ height: \"100%\" }}>\r\n\t\t\t\t\t<LoadingBar loading={loading} />\r\n\t\t\t\t\t<Col xs={5}>\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tborder=\"success\"\r\n\t\t\t\t\t\t\tbg=\"transparent\"\r\n\t\t\t\t\t\t\tclassName=\"mx-auto notice-manager-card\">\r\n\t\t\t\t\t\t\t<Card.Header className=\"text-center\">\r\n\t\t\t\t\t\t\t\tاطلاعیه جدید\r\n\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t<Card.Body className=\"text-right\">\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-auto\">\r\n\t\t\t\t\t\t\t\t\tعنوان اطلاعیه\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tpattern=\".{3,30}\"\r\n\t\t\t\t\t\t\t\t\tonInput={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\"\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tonInvalid={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\r\n\t\t\t\t\t\t\t\t\t\t\t\"عنوان اطلاعیه باید حداقل 3 و حداکثر 30 کاراکتر داشته باشد\"\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto\"\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"عنوان\"\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-auto\">\r\n\t\t\t\t\t\t\t\t\tتوضیحات\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\t\t\t\t\tpattern=\".{5,200}\"\r\n\t\t\t\t\t\t\t\t\tonInput={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\"\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tonInvalid={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\r\n\t\t\t\t\t\t\t\t\t\t\t\"متن اطلاعیه باید حداقل 5 و حداکثر 200 کاراکتر داشته باشد\"\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto h-25\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n\t\t\t\t\t\t\t\t\tvalue={text}\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setText(e.target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-2\">\r\n\t\t\t\t\t\t\t\t\tتاریخ شروع نمایش\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\r\n\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto w-100\"\r\n\t\t\t\t\t\t\t\t\tcalendar={persian}\r\n\t\t\t\t\t\t\t\t\tlocale={persian_fa}\r\n\t\t\t\t\t\t\t\t\tcalendarPosition=\"bottom-right\"\r\n\t\t\t\t\t\t\t\t\tvalue={startDate}\r\n\t\t\t\t\t\t\t\t\tonChange={setStartDate}\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-2\">\r\n\t\t\t\t\t\t\t\t\tتاریخ پایان نمایش\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\r\n\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto\"\r\n\t\t\t\t\t\t\t\t\tcalendar={persian}\r\n\t\t\t\t\t\t\t\t\tlocale={persian_fa}\r\n\t\t\t\t\t\t\t\t\tcalendarPosition=\"bottom-right\"\r\n\t\t\t\t\t\t\t\t\tvalue={endDate}\r\n\t\t\t\t\t\t\t\t\tonChange={setEndDate}\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t<Card.Footer>\r\n\t\t\t\t\t\t\t\t{!selectedNoticeID ? (\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"success\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={createNewNotice}>\r\n\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-floppy-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\tایجاد اطلاعیه\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline-primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={saveChanges}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-floppy-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\tذخیره تغییرات\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline-warning text-secondary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={cancelEditing}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-floppy-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\tلغو ویرایش\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Card.Footer>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col xs={7}>\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tborder=\"info\"\r\n\t\t\t\t\t\t\tbg=\"transparent\"\r\n\t\t\t\t\t\t\tclassName=\"mx-auto notice-manager-card\">\r\n\t\t\t\t\t\t\t<Card.Header className=\"text-center\">\r\n\t\t\t\t\t\t\t\tاطلاعیه های قبلی\r\n\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t<Card.Body\r\n\t\t\t\t\t\t\t\tstyle={{ overflowY: \"scroll\" }}\r\n\t\t\t\t\t\t\t\tclassName=\"text-right\">\r\n\t\t\t\t\t\t\t\t{notices.map((notice) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t\t<Alert variant=\"secondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-info-circle px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"red\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontSize: \"18px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{notice.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t: {notice.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon-edit-notice fa fa-pencil-square-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tselecteNotice(notice)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}></i>\r\n\t\t\t\t\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t)}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport \"./profile.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerRecordUpdate } from \"../globals/redux/actions\";\r\nimport { OK, Sorry } from \"../tools/msgbox\";\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    //on component mount download user credentials\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } = await userServices.getMyCredentials();\r\n                if (status === Configs.Status.Successful) {\r\n                    const { me } = data;\r\n                    setFullname(me.fullname);\r\n                    setStudentID(me.studentID);\r\n                    setEmail(me.email);\r\n                }\r\n            } catch (err) {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    Error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\"\r\n                    );\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                OK(`تغییرات با موفقیت اعمال شد`);\r\n                dispatch(TriggerRecordUpdate());\r\n\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                Error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const changeMyPassword = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.changeMyPassword({\r\n                studentID,\r\n                password,\r\n                newPassword,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                OK(\"رمز شما با موفقیت تغییر داده شد\");\r\n                dispatch(TriggerRecordUpdate());\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                Sorry(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\"\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch (pageMode) {\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                changeMyPassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const checkConfirmPassword = (event) => {\r\n        setConfirmNewPassword(event.target.value);\r\n        if (newPassword !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور جدید باید با خود رمز عبور جدید مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n\r\n    // *************************** DESIGN NOTE *******/\r\n    // HOW ABOUT USING TABS ? <Tabs>\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"big-single-card\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-100 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.READ_ONLY && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.EDIT && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.CHANGE_PASS && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={(e) => selectMode(e)}>\r\n                    <Card.Body className=\"w-75 text-center mx-auto\">\r\n                        <LoadingBar loading={loading} />\r\n\r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <Fragment>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </Fragment>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"account-info-textbox w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={newPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setNewPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        تایید رمز عبور جدید\r\n                                    </Form.Label>\r\n\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        value={confirmNewPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(event) =>\r\n                                            checkConfirmPassword(event)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={!pageMode}\r\n                            block\r\n                            variant=\"success\"\r\n                            className=\"w-50 mx-auto\">\r\n                            <i\r\n                                className=\"fa fa-wrench px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت تغییرات\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","\r\nimport { Card, Col, ListGroup, Row } from 'react-bootstrap';\r\nimport { Badge } from 'react-bootstrap';\r\nimport '../profile.css';\r\n\r\nconst Record = ({children,title}) => {\r\n    return (\r\n        <ListGroup.Item className=\"bg-transparent\">\r\n            <Row className=\"py-2\">\r\n                <Col className=\"text-center\">\r\n                    <Card.Text>{title}</Card.Text>\r\n                </Col>\r\n                <Col className=\"text-center\">\r\n                    <Badge\r\n                        className=\"friend-badge-font-size\"\r\n                        pill\r\n                        variant=\"primary\">\r\n                        {children}\r\n                    </Badge>\r\n                </Col>\r\n            </Row>\r\n        </ListGroup.Item>\r\n    );\r\n};\r\n\r\nexport default Record;\r\n","import { Button, Card, Col, Image, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"../profile.css\";\r\nimport noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport Record from \"./Record\";\r\nimport Avatar from \"react-avatar\";\r\nconst FriendRecords = (props) => {\r\n\tconst me = useSelector((state) => state.player);\r\n\tif (!me) return null; //because of time delay to load player data, component crashes below\r\n\t//fix the bug in a better way\r\n\tconst { records } = props.friend ? props.friend : me;\r\n\treturn (\r\n\t\t<Card border=\"success\" bg=\"transparent\" className=\"friend-records\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Row className=\"w-100 p-0 mx-auto\">\r\n\t\t\t\t\t{/* <hr /> */}\r\n\t\t\t\t\t<Col xs={3} className=\"text-center mx-auuto\">\r\n\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\twidth: \"100%\",\r\n\t\t\t\t\t\t\t\theight: \"100%\",\r\n\t\t\t\t\t\t\t\tmargin: \"auto\",\r\n\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tround={true}\r\n\t\t\t\t\t\t\tsrc={noAvatar}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<ListGroup className=\" list-group list-group-flush\">\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"امتیاز بازیکن\">\r\n\t\t\t\t\t\t\t\t\t\t{records.points}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"تعداد بردها\">\r\n\t\t\t\t\t\t\t\t\t\t{records.wins}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"تعداد تساوی\">\r\n\t\t\t\t\t\t\t\t\t\t{records.draws}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"تعداد باختها\">\r\n\t\t\t\t\t\t\t\t\t\t{records.loses}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Card.Body>\r\n\t\t\t{props.friend && (\r\n\t\t\t\t<Card.Footer>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\r\n\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\tonClick={null}>\r\n\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\tclassName=\"fa fa-handshake-o px-2\"\r\n\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\tدرخواست بازی\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"danger\"\r\n\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\tonClick={null}>\r\n\t\t\t\t\t\t\t\tتست\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Card.Footer>\r\n\t\t\t)}\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default FriendRecords;\r\n","import { useState, useEffect } from \"react\";\r\nimport LoadingBar from \"../../commons/LoadingBar\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport Configs from \"../../services/configs\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport { Card, Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport AllScores from \"../../tables/scores/AllScores\";\r\nimport \"../profile.css\";\r\nimport FriendRecords from \"./FriendRecords\";\r\n\r\nconst MyGamesAndFriends = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [myFriends, setMyFriends] = useState([]);\r\n\tconst [myGames, setMyGames] = useState([]);\r\n\tconst [filterID, setFilterID] = useState(\"me\");\r\n\tconst [selectedFriendIndex, setSelectedFriendIndex] = useState(-1);\r\n\tuseEffect(() => {\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tsetLoading(true); // use preloader here?\r\n\t\t\t\tlet serverResponse = await gameServices.getMyGames();\r\n\t\t\t\tif (serverResponse.status === Configs.Status.Successful)\r\n\t\t\t\t\tsetMyGames(serverResponse.data.myGames.reverse());\r\n\t\t\t\tserverResponse = await userServices.getMyFriends();\r\n\t\t\t\tif (serverResponse.status === Configs.Status.Successful)\r\n\t\t\t\t\tsetMyFriends(serverResponse.data.friends);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t\tsetLoading(false);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSelectedFriendIndex(\r\n\t\t\tfilterID !== \"me\"\r\n\t\t\t\t? myFriends.findIndex((friend) => friend.userID === filterID)\r\n\t\t\t\t: -1\r\n\t\t);\r\n\t\t// if filterID === \"me\" || frined id wia .findIndex not found ---> returns -1\r\n\t}, [filterID, myFriends]);\r\n\r\n    const unfriend = (friend) => {\r\n        //... show a modal or sth to ask if user's sure\r\n        // send proper http request to clear both from each others friend list\r\n\r\n    }\r\n\treturn (\r\n\t\t<Card border=\"secondary\" bg=\"transparent\" className=\"big-single-card\">\r\n\t\t\t<Card.Header className=\"text-center\">\r\n\t\t\t\tلیست دوستان و آمار بازی ها\r\n\t\t\t</Card.Header>\r\n\t\t\t<LoadingBar loading={loading} />\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<LoadingBar loading={loading} />\r\n\t\t\t\t<Tab.Container\r\n\t\t\t\t\tdefaultActiveKey={filterID}\r\n\t\t\t\t\tonSelect={(key) => setFilterID(key)}>\r\n\t\t\t\t\t<Row className=\"tabs-list-friends-in-games-scrollable\">\r\n\t\t\t\t\t\t<Col className=\"friend-list-name-length\" xs={3}>\r\n\t\t\t\t\t\t\t<Nav\r\n\t\t\t\t\t\t\t\tvariant=\"pills\"\r\n\t\t\t\t\t\t\t\tclassName=\"flex-column text-right\">\r\n\t\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t\t<Nav.Link eventKey=\"me\">\r\n\t\t\t\t\t\t\t\t\t\tهمه بازی ها\r\n\t\t\t\t\t\t\t\t\t</Nav.Link>\r\n\t\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t\t\t{myFriends.map((friend) => (\r\n\t\t\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t\t\t<Nav.Link eventKey={friend.userID}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Row className=\"w-100\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col>{friend.fullname}</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col xs={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i onClick={() => unfriend(friend)} className=\"icon-unfriend fa fa-times pl-2\" area-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t\t\t</Nav.Link>\r\n\t\t\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t{/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n\t\t\t\t\t\t<Col xs={9}>\r\n\t\t\t\t\t\t\t<FriendRecords\r\n\t\t\t\t\t\t\t\tfriend={\r\n\t\t\t\t\t\t\t\t\tselectedFriendIndex !== -1\r\n\t\t\t\t\t\t\t\t\t\t? myFriends[selectedFriendIndex]\r\n\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Tab.Content>\r\n\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"me\">\r\n\t\t\t\t\t\t\t\t\t<AllScores scores={myGames} />\r\n\t\t\t\t\t\t\t\t</Tab.Pane>\r\n\t\t\t\t\t\t\t\t{myFriends.map((friend) => (\r\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey={friend.userID}>\r\n\t\t\t\t\t\t\t\t\t\t<AllScores\r\n\t\t\t\t\t\t\t\t\t\t\tscores={myGames.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t(game) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfriend.userID ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgame.players[0].id ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfriend.userID ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgame.players[1].id\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Tab.Content>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t{/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Tab.Container>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default MyGamesAndFriends;\r\n","import { Routes } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst chatServices = {\r\n    \r\n    getOurChat: (friendID) => {\r\n        return http.get(`${Server.Root}/${Server.Chats}/${friendID}`);\r\n    }\r\n};\r\n\r\nexport default chatServices;","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Alert, Col, Row } from \"react-bootstrap\";\r\nimport \"./chat.css\";\r\nimport { v1 as uuidv1 } from 'uuid'\r\nimport { toHijri } from \"../tools/format\";\r\nconst Message = ({ msg, previousDay, inDesktop }) => {\r\n    const { date } = msg; // destructure date from msg then make a new date object\r\n    // reason for making new Date objects is that react throws error some time when you use it without new Date :|\r\n    const [showDate, setShowDate] = useState(false); //for each day, the first message in that day has persian date above it\r\n    const [time, setTime] = useState(null);\r\n    const [hijriDate, setHijriDate] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const [hDate, hTime] = toHijri(date);\r\n        setTime(hTime); setHijriDate(hDate);\r\n        setShowDate(\r\n            new Date(date).getDate() !== previousDay || previousDay === 0\r\n        ); //     0 means this is the first message in the chat\r\n    }, [date, previousDay]);\r\n\r\n    //note: Device.Desktop is 0 -> so it inDesktop is used conditionally but it actually contains device type and not a boolean\r\n    return (\r\n        <Fragment key={uuidv1()}>\r\n            {!showDate ? null : (\r\n                <Fragment>\r\n                    <hr />\r\n                    <p className=\"message-date\">{hijriDate}</p>\r\n                </Fragment>\r\n            )}\r\n            <Row>\r\n                <Col>\r\n                    {msg.me && (\r\n                        <Alert className=\"text-right\" variant=\"dark\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col>{msg.me}</Col>\r\n                                    <Col className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.me}</Row>\r\n                                    <Row className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n                <Col>\r\n                    {msg.friend && (\r\n                        <Alert className=\"text-right\" variant=\"primary\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                    <Col>{msg.friend}</Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.friend}</Row>\r\n                                    <Row className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import {\r\n    Button,\r\n    Card,\r\n    Container,\r\n    Form,\r\n    InputGroup,\r\n    Row,\r\n    Tab,\r\n} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useState, useEffect, useCallback, useRef, useContext } from \"react\";\r\nimport { SendMessageTo } from \"../globals/redux/actions\";\r\nimport \"./chat.css\";\r\nimport { Devices, Status } from \"../services/configs\";\r\nimport chatServices from \"../services/http/chatServices\";\r\n\r\nimport Message from \"./Message\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\n\r\nconst ChatBox = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(\"\");\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n    const mostRecentMessageRef = useRef(null);\r\n    const context = useContext(GlobalContext);\r\n\r\n    //...TEMP: just save msges in client side\r\n    const [allMsgs, setAllMsgs] = useState([\r\n        { me: null, friend: null, date: null, key: 0 },\r\n    ]);\r\n\r\n    const loadPreviousMessages = useCallback(async () => {\r\n        try {\r\n            const { status, data } = await chatServices.getOurChat(friendID);\r\n            if (status === Status.Successful) {\r\n                const { myIndex, chat } = data;\r\n                const previousMsgs = chat.map((message) => {\r\n                    const { text, owner, date } = message;\r\n                    if (owner === myIndex)\r\n                        return {\r\n                            me: text,\r\n                            friend: null,\r\n                            date,\r\n                        };\r\n                    return {\r\n                        me: null,\r\n                        friend: text,\r\n                        date,\r\n                    };\r\n                });\r\n                setAllMsgs(previousMsgs);\r\n            }\r\n        } catch (err) {\r\n            //consider a special place in chat box to show status change or error messages\r\n        }\r\n    }, [friendID]);\r\n\r\n    useEffect(() => {\r\n        loadPreviousMessages();\r\n\r\n        return () => {\r\n            setAllMsgs([]);\r\n        };\r\n    }, [loadPreviousMessages]);\r\n\r\n    const composeMessage = (event) => {\r\n        event.preventDefault();\r\n        if (myMessage) {\r\n            let tempMsg = [...allMsgs];\r\n            tempMsg.push({\r\n                me: myMessage,\r\n                friend: null,\r\n                date: new Date(),\r\n                key: allMsgs.length,\r\n            });\r\n            setAllMsgs(tempMsg);\r\n            dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n            setMyMessage(\"\");\r\n\r\n            if (mostRecentMessageRef && mostRecentMessageRef.current) {\r\n                setTimeout(() => {\r\n                    mostRecentMessageRef.current.scrollIntoView({\r\n                        behavior: \"smooth\",\r\n                        top: mostRecentMessageRef.current.offsetTop,\r\n                    });\r\n                }, 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    const recieveMessage = useCallback(\r\n        (msg) => {\r\n            let tempMsg = [...allMsgs];\r\n            tempMsg.push({ me: null, friend: msg.text, date: new Date() });\r\n            return tempMsg;\r\n        },\r\n        [allMsgs]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const { recieved } = message;\r\n        if (!message.sent && recieved && recieved.friendID === friendID) {\r\n            setAllMsgs(recieveMessage(message.recieved));\r\n\r\n            setTimeout(() => {\r\n                if (mostRecentMessageRef && mostRecentMessageRef.current)\r\n                    mostRecentMessageRef.current.scrollIntoView({\r\n                        behavior: \"smooth\",\r\n                        top: mostRecentMessageRef.current.offsetTop,\r\n                    });\r\n            }, 100);\r\n        }\r\n    }, [message, friendID]);\r\n\r\n    return (\r\n        <Tab.Pane eventKey={friendID}>\r\n            <Container>\r\n                <Row>\r\n                    <Card\r\n                        border=\"dark\"\r\n                        bg=\"transparent\"\r\n                        className={`big-single-card ${\r\n                            context.device !== Devices.SmartPhone\r\n                                ? \"chat-box-scrollable\"\r\n                                : \"smartphone-chat-box-scrollable\"\r\n                        }`}>\r\n                        <Card.Body>\r\n                            {allMsgs.map((msg, index) => (\r\n                                <div ref={mostRecentMessageRef}>\r\n                                    <Message\r\n                                        // key={msg.key}\r\n                                        msg={msg}\r\n                                        inDesktop={context.device === Devices.Desktop}\r\n                                        previousDay={\r\n                                            index !== 0\r\n                                                ? new Date(\r\n                                                      allMsgs[index - 1].date\r\n                                                  ).getDate()\r\n                                                : 0\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Form\r\n                        onSubmit={(event) => composeMessage(event)}\r\n                        className=\"w-100 mt-3\">\r\n                        <InputGroup className=\"w-100\">\r\n                            <InputGroup.Prepend\r\n                                style={{\r\n                                    width: \"8%\",\r\n                                }}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    style={{ border: \"none\", fontSize: \"22px\" }}\r\n                                    className=\"w-100 mx-auto\"\r\n                                    variant=\"outline-info\">\r\n                                    <i\r\n                                        className=\"fa fa-paper-plane\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n\r\n                            <InputGroup.Prepend\r\n                                style={{ margin: \"auto\", width: \"92%\" }}>\r\n                                <Form.Control\r\n                                    value={myMessage}\r\n                                    onChange={(e) =>\r\n                                        setMyMessage(e.target.value)\r\n                                    }\r\n                                    placeholder=\"پیام...\"\r\n                                    className=\"bg-transparent chat-room-message-box\r\n                                    mx-auto text-right\"></Form.Control>\r\n                            </InputGroup.Prepend>\r\n                        </InputGroup>\r\n                    </Form>\r\n                </Row>\r\n            </Container>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default ChatBox;\r\n","import { Card, Row, Col, Nav, Tab } from \"react-bootstrap\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport {Status, Devices} from \"../services/configs\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport ChatBox from \"./ChatBox\";\r\nimport \"./chat.css\";\r\nimport LoadingBar from '../commons/LoadingBar';\r\nimport { v1 as uuidv1 } from 'uuid'\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\nconst ChatRoom = ({Device}) => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [myFriends, setMyFriends] = useState([]);\r\n    const context = useContext(GlobalContext);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true); // use preloader here?\r\n                const { status, data } = await userServices.getMyFriends();\r\n                if (status === Status.Successful)\r\n                    setMyFriends(data.friends);\r\n            } catch (err) {\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card\r\n            border=\"secondary\"\r\n            bg=\"transparent\"\r\n            className=\"chat-main-card\">\r\n            <LoadingBar loading={loading} />\r\n            <Card.Header className=\"text-center\">چت روم شما</Card.Header>\r\n            <Card.Body>\r\n                <Tab.Container\r\n                // id=\"left-tabs-example\"\r\n                // defaultActiveKey={filterID}\r\n                // onSelect={(key) => setFilterID(key)}\r\n                >\r\n                    <Row>\r\n                        <Col\r\n                            className={\r\n                                context.device !== Devices.SmartPhone\r\n                                    ? \"chat-room-devider chat-scrollable-friends\"\r\n                                    : \"smartphone-chat-scrollable-friends\"\r\n                            }\r\n                            sm={3}>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column text-right\">\r\n                                {myFriends.map((friend) => (\r\n                                    <Nav.Item>\r\n                                        <Nav.Link key={friend.userID} eventKey={friend.userID}>\r\n                                            {friend.fullname}\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        <Col>\r\n                            <Tab.Content>\r\n                                {myFriends.map((friend) => (\r\n                                    <ChatBox key={uuidv1()} friendID={friend.userID} />\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n                    </Row>\r\n                </Tab.Container>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"../profile.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../../globals/redux/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nimport Configs from \"../../services/configs\";\r\n\r\nconst ProfilePanel = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n            <Row className=\"profile-panel-sidebar d-flex flex-column flex-shrink-0\">\r\n                <Button\r\n                    style={{ border: \"none\" }}\r\n                    variant=\"outline-warning\"\r\n                    className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </Button>\r\n                <hr />\r\n                <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            exact\r\n                            to={Configs.Routes.Client.Profile}\r\n                            className=\"nav-link\"\r\n                            aria-current=\"page\">\r\n                            <i\r\n                                className=\"fa fa-user-o px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            مشخصات\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink\r\n                            className=\"nav-link link-dark\"\r\n                            to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                            <i\r\n                                className=\"fa fa-users px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            دوستان و بازی ها\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink\r\n                            className=\"nav-link link-dark\"\r\n                            to={Configs.Routes.Client.ChatRoom}>\r\n                            <i\r\n                                className=\"fa fa-comment px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            چت روم\r\n                        </NavLink>\r\n                    </li>\r\n                    <hr />\r\n                    {player && player.isAdmin && (\r\n                        <Fragment>\r\n                            {/* admin tools */}\r\n                            <li>\r\n                                <NavLink\r\n                                    className=\"nav-link link-dark border-top\"\r\n                                    to={Configs.Routes.Client.Notices}>\r\n                                    <i\r\n                                        className=\"fa fa-newspaper-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    اطلاعیه ها\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink\r\n                                    className=\"nav-link link-dark\"\r\n                                    to=\"/controlPanel/admin/whatever\">\r\n                                    <svg\r\n                                        className=\"bi me-2\"\r\n                                        width=\"16\"\r\n                                        height=\"16\"></svg>\r\n                                    امکانات ادمین\r\n                                </NavLink>\r\n                            </li>\r\n                        </Fragment>\r\n                    )}\r\n                </ul>\r\n                <hr />\r\n                <Button variant=\"outline-danger\" onClick={signMeOut}>\r\n                    <i className=\"fa fa-sign-out px-2\" aria-hidden=\"true\"></i>\r\n                    خروج از حساب کاربری\r\n                </Button>\r\n            </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(ProfilePanel);\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"../profile.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../../globals/redux/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nimport Configs from \"../../services/configs\";\r\n\r\nconst CollapsedPanel = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n        <Row bg=\"light\" className=\"profile-panel-sidebar-collapsed w-100 text-right\">\r\n            <Button\r\n                style={{ border: \"none\", padding:0 }}\r\n                variant=\"outline-warning\"\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <i className=\"fa fa-cogs\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n            <NavLink\r\n                exact\r\n                to={Configs.Routes.Client.Profile}\r\n                className=\"nav-link\"\r\n                aria-current=\"page\">\r\n                <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <NavLink\r\n                className=\"nav-link link-dark\"\r\n                to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                <i className=\"fa fa-users\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <NavLink\r\n                className=\"nav-link link-dark\"\r\n                to={Configs.Routes.Client.ChatRoom}>\r\n                <i className=\"fa fa-weixin\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <hr />\r\n            {player && player.isAdmin && (\r\n                <Fragment>\r\n                    {/* admin tools */}\r\n                    <NavLink\r\n                        className=\"nav-link link-dark border-top\"\r\n                        to={Configs.Routes.Client.Notices}>\r\n                        <i className=\"fa fa-newspaper-o\" aria-hidden=\"true\"></i>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/admin/whatever\">\r\n                        <svg className=\"bi me-2\" width=\"16\" height=\"16\"></svg>\r\n                    </NavLink>\r\n                </Fragment>\r\n            )}\r\n            <hr />\r\n            <Button\r\n                className=\"text-right\"\r\n                variant=\"outline-danger\"\r\n                onClick={signMeOut}>\r\n                <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(CollapsedPanel);\r\n","import { Fragment, useContext } from \"react\";\r\nimport { Devices } from \"../services/configs\";\r\nimport ProfilePanel from \"../profile/panel/ProfilePanel\";\r\nimport CollapsedPanel from \"../profile/panel/CollapsedPanel\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport GlobalSocketManager from \"./../services/ws/GlobalSocketManager\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AutoSignIn from \"../tools/AutoSignIn\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\n\r\nconst ProfilePanelLayout = ({ Device, children }) => {\r\n    const user = useSelector((state) => state.player);\r\n    const context = useContext(GlobalContext);\r\n    return (\r\n        <Fragment>\r\n            <AutoSignIn />\r\n            {user && <GlobalSocketManager />}\r\n            {(context.device === Devices.Desktop) ? (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={3}>\r\n                        <ProfilePanel />\r\n                    </Col>\r\n                    <Col>{children}</Col>\r\n                </Row>\r\n            ) : (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={1}>\r\n                        <CollapsedPanel />\r\n                    </Col>\r\n                    <Col>{children}</Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ProfilePanelLayout;\r\n","import { useContext } from \"react\";\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\nimport { Devices, Routes } from \"../services/configs\";\r\n\r\nconst NavigationBar = () => {\r\n\tconst player = useSelector((state) => state.player);\r\n\tconst context = useContext(GlobalContext);\r\n\r\n\treturn (\r\n\t\t<Navbar bg=\"light\" className=\"nav-pills text-right\">\r\n\t\t\t<Container className=\"text-right\">\r\n\t\t\t\t<Nav className=\"me-auto\">\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tactiveClassName=\"btn-success text-dark\"\r\n\t\t\t\t\t\tto={\r\n\t\t\t\t\t\t\tplayer\r\n\t\t\t\t\t\t\t\t? Routes.Client.Profile\r\n\t\t\t\t\t\t\t\t: Routes.Client.SignUp\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-address-card px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{player\r\n\t\t\t\t\t\t\t? context.device !== Devices.SmartPhone && player.fullname\r\n\t\t\t\t\t\t\t: \"ثبت نام\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.Root}\r\n\t\t\t\t\t\texact\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i className=\"fa fa-home px-2\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"صفحه اصلی\"}\r\n\t\t\t\t\t</NavLink>\r\n\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.GameDeck}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-gamepad px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"بازی ها\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t{player && (\r\n\t\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\t\tto={Routes.Client.ChatRoom}\r\n\t\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\tclassName=\"fa fa-comment px-2\"\r\n\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t{context.device === Devices.Desktop && \"چت روم\"}\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.Rankings}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-list-ol px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"رنکینگ\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.GameGuide}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i className=\"fa fa-eye px-2\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"راهنما\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.ContactUs}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-phone-square px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"تماس با ما\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Container>\r\n\t\t</Navbar>\r\n\t);\r\n};\r\n\r\nexport default NavigationBar;\r\n","import ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport GameGuide from \"./informations/GameGuide\";\r\nimport ContactUs from \"./informations/ContactUs\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./layouts/MainLayout\";\r\nimport Rankings from \"./tables/rankings/Rankings\";\r\nimport GameDeck from \"./games/GameDeck\";\r\nimport NoticeManager from \"./profile/NoticeManager\";\r\nimport AccountCredentials from \"./profile/AcountCredentials\";\r\nimport MyGamesAndFriends from \"./profile/friendgames/MyGamesAndFriends\";\r\nimport { Routes } from \"./services/configs\";\r\nimport ChatRoom from \"./chat/ChatRoom\";\r\nimport ProfilePanelLayout from \"./layouts/ProfilePanelLayout\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./commons/NavigationBar\";\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<ToastContainer />\r\n\t\t\t<NavigationBar />\r\n\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route path={`${Routes.Client.Profile}/:path?`} exact>\r\n\t\t\t\t\t<ProfilePanelLayout>\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.MyGamesAndFriends}>\r\n\t\t\t\t\t\t\t\t<MyGamesAndFriends />\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.Notices}>\r\n\t\t\t\t\t\t\t\t<NoticeManager />\r\n\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.ChatRoom}>\r\n\t\t\t\t\t\t\t\t<ChatRoom />\r\n\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t<Route exact path={Routes.Client.Profile}>\r\n\t\t\t\t\t\t\t\t<AccountCredentials />\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t</ProfilePanelLayout>\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route>\r\n\t\t\t\t\t<MainLayout>\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.SignUp}>\r\n\t\t\t\t\t\t\t\t<SignUp />\r\n\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.GameDeck}>\r\n\t\t\t\t\t\t\t\t<GameDeck />\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.Rankings}>\r\n\t\t\t\t\t\t\t\t<Rankings />\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.GameGuide}>\r\n\t\t\t\t\t\t\t\t<GameGuide />/\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.ContactUs}>\r\n\t\t\t\t\t\t\t\t<ContactUs />\r\n\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t<Route path={Routes.Client.Root} exact>\r\n\t\t\t\t\t\t\t\t<ScoresTable />\r\n\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t</MainLayout>\r\n\t\t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t</BrowserRouter>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\nimport { statisticsReducer } from \"./statistics\";\r\nimport { messageReducer } from './message';\r\nimport { tokenReducer } from './token';\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer,\r\n    statistics: statisticsReducer,\r\n    message: messageReducer,\r\n    token: tokenReducer\r\n});","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n        case \"SIGN_OUT\": \r\n            sessionStorage.clear();\r\n            return null;\r\n        \r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = {name: null, type: null}, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {name, type} = action.payload;            \r\n            return {name, type};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        case \"RESET_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (\r\n    state = {\r\n        updateTriggered: false,\r\n        opponentSearchTriggered: false,\r\n        friendRequest: false,\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"TRIGGER_UPDATE\":\r\n            return {\r\n                updateTriggered: !state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger update\r\n        case \"TRIGGER_OPPONENT_SEARCH\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: !state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger search\r\n        case \"SEND_FRIEND_REQUEST\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","\r\nexport const statisticsReducer = (state = {players: 0, games: 0}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_STATISTICS\":\r\n            const {players, games} = action.payload;\r\n            return {players, games};\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","export const messageReducer = (\r\n    state = { sent: null, recieved: null },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"RECIEVE_MESSAGE\": {\r\n            const { friendID, name, text } = action.payload;\r\n            return {\r\n                recieved: { name, friendID, text, pushed: false },\r\n                sent: state.sent,\r\n            };\r\n        }\r\n        case \"SEND_MESSAGE\": {\r\n            const { friendID, name, text } = action.payload;\r\n            console.log(\"payload\", action.payload);\r\n            return { sent: { name, friendID, text }, recieved: state.recieved };\r\n        }\r\n        case \"MEESAGE_PUSHED\":\r\n            if (state.recieved) state.recieved.pushed = true;\r\n            return state;\r\n        case \"RESET_MESSAGES\":\r\n            return { sent: null, recieved: null };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { browserStorage } from \"../../../services/configs\";\r\n\r\nexport const tokenReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"SAVE_TOKEN\":\r\n            return browserStorage.TOKEN();\r\n        // case \"RESET_TOKEN\":\r\n        //     return null;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { useMediaQuery } from 'react-responsive';\r\nimport { useEffect, useState } from 'react';\r\nimport GlobalContext from './GlobalContext';\r\nconst GlobalStates = ({children}) => {\r\n    const isDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const isSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const isTablet = !isDesktop && !isSmartPhone;\r\n    const [device, setDevice] = useState(null);\r\n    console.log(\"runned\");//s\r\n    useEffect(() => {\r\n        // find device mode\r\n        // array is sorted according to Configs.Devices\r\n        setDevice(\r\n            [isDesktop, isTablet, isSmartPhone].findIndex((mode) => mode)\r\n        ); //return the index of the one that is true -> wich is the curret device mode\r\n    }, [isDesktop, isTablet, isSmartPhone]);\r\n\r\n    return ( \r\n        <GlobalContext.Provider value={{device}}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n     );\r\n}\r\n \r\nexport default GlobalStates;","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./globals/redux/store/index\";\r\nimport GlobalStates from \"./globals/state/GlobalStates.jsx\";\r\n\r\nrender(\r\n\t<Provider store={store}>\r\n\t\t<GlobalStates>\r\n\t\t\t<App />\r\n\t\t</GlobalStates>\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n","const ClientRoutes = require('./client');\r\nconst ServerRoutes = require('./server');\r\nconst Status = require('./status');\r\nconst browserStorage = require('./browser');\r\nconst GameSetting = require('./gamesetting');\r\n//all configs\r\nmodule.exports = {\r\n    browserStorage,\r\n    Routes: { Server: ServerRoutes, Client: ClientRoutes },\r\n    Status,\r\n    GameSetting,\r\n    Devices: { SmartPhone: 2, Tablet: 1, Desktop: 0 },\r\n}"],"sourceRoot":""}