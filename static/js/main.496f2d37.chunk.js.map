{"version":3,"sources":["tables/SingleScoreCard.jsx","tables/AllScores.jsx","services/httpService.js","services/userServices.js","services/gameServices.js","tables/ScoresTable.jsx","informations/GameRules.jsx","informations/ContactInfo.jsx","common/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","common/NavigationBar.jsx","sidebars/SignInSideBar.jsx","sidebars/NewsSideBar.jsx","common/SmartPhoneNavigationBar.jsx","sidebars/no-avatar.png","sidebars/PlayerInfoSideBar.jsx","dashboard/actions/index.js","common/MainLayout.jsx","tables/SinglePlayerCard.jsx","tables/AllPlayers.jsx","tables/Ranking.jsx","users/ControlPanel.jsx","services/socketServices.js","dashboard/withReduxDashboard.js","games/GamePlay.jsx","games/RoomManager.jsx","games/GameDeck.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/store/index.js","index.js"],"names":["SingleScoreCard","playerXName","playerOName","xScore","oScore","xBorderStyle","oBorderStyle","xBadgeColor","oBadgeColor","border","borderRadius","paddingLeft","paddingRight","className","style","id","AllScores","scores","map","score","xName","oName","gameID","axios","defaults","headers","post","put","interceptors","request","use","config","token","sessionStorage","getItem","Authorization","error","Promise","reject","response","STATUS","expectedErrors","status","toast","position","closeOnClick","http","get","delete","userServices","signUp","user","serverRoot","usersRoute","signupRoute","JSON","stringify","signIn","signinRoute","getPlayer","userID","getAllPlayers","saveUser","setItem","readUserID","gameServices","getAllResults","gamesRoute","loadPlayerData","a","data","resolve","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","SUCCESSFULL","gameResults","then","result","filter","game","isLive","catch","err","this","onClick","Component","GameRules","ContactInfo","href","LoadingBar","useLayoutEffect","document","body","overflowY","height","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","AUTHENTICATION_INVALID","Number","props","history","replace","onForgotPasswordClick","Button","variant","Modal","show","onHide","Header","closeButton","Body","Form","onSubmit","Group","Label","Control","type","placeholder","value","onChange","e","target","controlId","withRouter","SignUp","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","length","USER_CREATED","ALREADY_EXISTS","newUser","fullname","success","warn","pattern","onInput","onInvalid","required","NavigationBar","useSelector","to","exact","activeClassName","float","SignInSideBar","NewsSideBar","SmartPhoneNavigationBar","PlayerInfoSideBar","inGame","src","noAvatar","alt","Alert","index","Heading","shape","records","points","wins","loses","draws","LoadMe","payload","SetRoom","roomName","pathname","location","opponent","scoreboard","dispatch","useDispatch","deviceIsDesktop","useMediaQuery","query","deviceIsSmartPhone","deviceIsTablet","pageLeftSideBars","pageRightSideBar","me","opp","children","SinglePlayerCard","rowNumber","name","scope","AllPlayers","players","Card","width","findIndex","p","Ranking","tempPlayers","sort","p1","p2","ControlPanel","onSignOutClick","createSocketRequest","playerID","msg","socketServices","connect","gameType","server","WebSocket","webSocketRoot","onopen","send","onerror","close","onclose","withReduxDashboard","component","room","LoadOpponent","UpdateMyRecords","ResetOpponent","SetGameID","UpdateScoreboard","details","CleanScoreboard","rowMarginRatio","color","lineColor","turn","tableDimension","table","myTurn","undefined","socketConnection","LoadOpponentData","opponentID","updateGameScorebaord","oppTurn","socketOnMessage","parse","command","opponentIndex","newMove","cell","cellID","verifyAndApplyTheMove","cellButtons","focus","endGame","forceConnectToWebSocket","nextJob","socket","onmessage","console","log","setTimeout","updateMarginParameters","divTableBlock","offsetWidth","onTableBlockResize","initiateGameTimer","setInterval","window","navigator","onLine","connectionLost","getCellCoordinates","dimen","onFloorId","floor","Math","row","column","onEachCellClick","selectedCellButton","cellButton","tempTable","innerHTML","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","i","connectTheScoreLines","count","firstCell","step","dimension","info","drawGameTable","dimens","push","marginLeft","getElementsByClassName","getElementById","addEventListener","RoomManager","useState","setRoomName","onStartGameClick","GameDeck","App","path","reducers","combineReducers","action","clear","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render"],"mappings":"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","file":"static/js/main.496f2d37.chunk.js","sourcesContent":["import \"./tables.css\";\r\n\r\nconst SingleScoreCard = ({ playerXName, playerOName, xScore, oScore }) => {\r\n    // format score text:\r\n    let xBorderStyle = null;\r\n    let oBorderStyle = null; // null means default text color\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        xBorderStyle = {\r\n            border: \"5px solid green\",\r\n            borderRadius: \"15px\",\r\n            paddingLeft: \"1%\",\r\n            paddingRight: \"1%\",\r\n        };\r\n        oBadgeColor = \"badge-danger\";\r\n        oBorderStyle = null; // null means default text color\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n        xBorderStyle = null;\r\n        oBorderStyle = null; // null means default text color\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        oBorderStyle = {\r\n            border: \"5px solid green\",\r\n            borderRadius: \"15px\",\r\n            paddingLeft: \"1%\",\r\n            paddingRight: \"1%\",\r\n        };\r\n        xBadgeColor = \"badge-danger\";\r\n        xBorderStyle = null; // null means default text color\r\n    }\r\n\r\n    // make this car 'bg-transparent' too?\r\n    return (\r\n        <div className=\"card border-info mb-3 scoreCard\">\r\n            <div className=\"card-header text-center border-info\">نوع بازی</div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row text-center mx-auto\">\r\n                    <span className=\"col-5\" style={xBorderStyle}>{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} scoreBadge col-1`}\r\n                    >\r\n                        {xScore < 10 ? `0${xScore}` : `${xScore}`}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} scoreBadge col-1`}\r\n                    >\r\n                        {oScore < 10 ? `0${oScore}` : `${oScore}`}\r\n                    </span>\r\n                    <span className=\"col-5\" style={oBorderStyle}>{playerOName}</span>\r\n                </div>\r\n            </div>\r\n            <button\r\n                id=\"btnReplayGame\"\r\n                className=\"btn btn-outline-info btn-lg btn-block\"\r\n            >\r\n                بازپخش بازی\r\n            </button>\r\n            {/*1st method: pass key to the score.jsx and find the specific game to replay\r\n            2nd method: pass replay function from AllScore.jsx to Score.jsx ? */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    return ( \r\n        <Fragment>\r\n            { scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    playerXName={score.xName}\r\n                    playerOName={score.oName}\r\n                    xScore={score.xScore}\r\n                    oScore={score.oScore}\r\n                ></SingleScoreCard>\r\n            )) }\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use( config => {\r\n    const token = sessionStorage.getItem(\"token\");\r\n    if (token)\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    else\r\n        config.headers.Authorization = null;\r\n    // console.log(config.headers.Authorization);\r\n    return config;\r\n}, error => {\r\n    // what to do?\r\n    return Promise.reject(error);\r\n});\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try     \r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const STATUS = { AUTHENTICATION_INVALID: 401, INPUT_INVALID: 422 };\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= 400 &&\r\n        error.response.status < 500;\r\n\r\n    if (error.response.status === STATUS.AUTHENTICATION_INVALID) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === STATUS.INPUT_INVALID) {\r\n        toast.error(\"فرمت ورودی نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\"مشکلی از سمت سرور رخ داده است.\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport config from \"./config.json\";\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${config.serverRoot}/${config.usersRoute}/${config.signupRoute}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        return http.post(\r\n            `${config.serverRoot}/${config.usersRoute}/${config.signinRoute}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(`${config.serverRoot}/${config.usersRoute}/${userID}`);\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${config.serverRoot}/${config.usersRoute}`);\r\n    },\r\n    saveUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(\"uid\", id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(\"token\", token);\r\n    },\r\n    readUserID: () => {\r\n        // consider local storage\r\n        return sessionStorage.getItem(\"uid\");\r\n    },\r\n};\r\n\r\nexport default userServices;\r\n","import config from \"./config.json\";\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst gameServices = {\r\n    \r\n    getAllResults: () => {\r\n        return http.get(`${config.serverRoot}/${config.gamesRoute}`);\r\n    },\r\n    loadPlayerData: async (userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const STATUS = { SUCCESSFULL: 200 };\r\n            if (userID === null) reject(null);\r\n            if (status === STATUS.SUCCESSFULL) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;\r\n","import './tables.css';\r\nimport { Component } from 'react';\r\nimport AllScores from './AllScores';\r\nimport gameServices from './../services/gameServices';\r\n\r\n\r\nclass ScoresTable extends Component {\r\n    state = { \r\n        liveScores: [ ],\r\n        finalScores: [ ],\r\n        showLiveOnes: false,\r\n        loading: false\r\n     };\r\n\r\n     componentDidMount() {\r\n         // get all game results , live or final, handling promises\r\n         // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const STATUS = { SUCCESSFULL: 200 };\r\n            const { data, status } = await gameServices.getAllResults();\r\n            if (status === STATUS.SUCCESSFULL) return data.gameResults;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                this.setState({liveScores: result.filter(game => game.isLive), finalScores: result.filter(game => !game.isLive), loading: false});\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({showLiveOnes: true});\r\n\r\n    }\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({showLiveOnes: false});\r\n    }\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let {liveScores, finalScores, showLiveOnes} = this.state;\r\n\r\n        return ( \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className='col-6'>\r\n                       <button\r\n                        className={`scoresTypeSelectButton btn ${showLiveOnes ? `btn-outline-success` : `btn-outline-primary`}`}\r\n                        onClick={this.btnShowLiveScores}  >نتایج زنده</button>\r\n                    </div>\r\n                    <div className='col-6'>\r\n                        <button \r\n                            className={`scoresTypeSelectButton btn ${showLiveOnes ? `btn-outline-primary` : `btn-outline-success`}`}\r\n                            onClick={this.btnShowFinalScores}  >نتایج نهایی</button> \r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <AllScores scores={showLiveOnes? liveScores : finalScores} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ScoresTable;","import './info.css'\r\n\r\nconst GameRules = () => {\r\n    return ( \r\n        <div className=\"card border-warning mb-3 singleCard\" >\r\n            <div className=\"card-header text-center border-warning\">قوانین بازی</div>\r\n            <div className=\"card-body text-right\">\r\n                <p>سطر اول</p>\r\n                <p>سطر دوم</p>\r\n                <p>سطر سوم</p>\r\n                <p>سطر چهارم</p>\r\n                <p>سطر پنجم</p>\r\n                <p>سطر ششم</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GameRules;","import './info.css'\r\n\r\nconst ContactInfo = () => {\r\n    return ( \r\n        <div className=\"card border-dark mb-3 singleCard\" >\r\n            <div className=\"card-header text-center border-dark\">اطلاعات تماس</div>\r\n            <div className=\"card-body text-center\">\r\n                <p>دانشگاه علم و صنعت ایران</p>\r\n                <p>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></p>\r\n                <p>Phone Number: 0000000000000</p>\r\n                <p>اطلاعات تماس استاد</p>\r\n                <p>instagram: ......</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ContactInfo;","import { useLayoutEffect } from \"react\";\r\nimport { Planets } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading]);\r\n\r\n    return <>{loading ? <Planets time={0} customLoading={loading} /> : null}</>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const STATUS = { SUCCESSFULL: 200, AUTHENTICATION_INVALID: 401 };\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password};\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === STATUS.SUCCESSFULL) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (ex) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            //toast.error('.ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.', {position: 'top-right', closeOnClick: true});\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal show={showModal} onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}\r\n                        >\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\"\r\n                            >\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\"\r\n                                >\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-info\"\r\n                                    onClick={this.onForgotPasswordClick}\r\n                                >\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        const STATUS = { USER_CREATED: 201, ALREADY_EXISTS: 403 };\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === STATUS.USER_CREATED) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    userServices.saveUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (ex) {\r\n                // console.log(ex);\r\n                this.setState({ loading: false });\r\n                if (ex.response.status === STATUS.ALREADY_EXISTS) {\r\n                    toast.error(\r\n                        \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else {\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"card border-success mb-3 signUpCard\">\r\n                <LoadingBar loading={loading} />\r\n                <div className=\"card-header bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">نام</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">نام خانوادگی</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">شماره دانشجویی</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">ایمیل</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">رمز عبور</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">تایید رمز عبور</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\"\r\n                        >\r\n                            ثبت نام\r\n                        </button>\r\n                    </form>\r\n                    <p className=\"forgot-password text-right mt-5\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !{\" \"}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst NavigationBar = () => {\r\n  const player = useSelector(state => state.player);\r\n\r\n  return (\r\n    // 2. link items theme: make theme better\r\n\r\n    <nav className=\"navbar navbar-expand-lg nav-pills navbar-light bg-light text-right\">\r\n      <div className=\"container text-right\">\r\n        {/* <NavLink className=\"navbar-brand\" to=\"#\">نام بازیکن</NavLink>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"expand\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button> */}\r\n        <div className=\"navbar-expand\" id=\"navbarResponsive\">\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/\"\r\n                exact\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                صفحه اصلی\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/gameDeck\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                بازی ها\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/ranking\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                رنکینگ\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/gameRules\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                قوانین\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/contactInfo\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                تماس با ما\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n          {/* how to float search bar to right? */}\r\n        </div>\r\n      </div>\r\n      {player ? (\r\n        <NavLink\r\n          style={{ float: \"left\" }}\r\n          className=\"navItems nav-link btn btn-outline-success btn-sm\"\r\n          to=\"/controlPanel\"\r\n        >\r\n          کنترل پنل\r\n        </NavLink>\r\n      ) : (\r\n        <NavLink\r\n          style={{ float: \"left\" }}\r\n          className=\"navItems nav-link btn btn-outline-success btn-sm\"\r\n          to=\"/signUp\"\r\n        >\r\n          ثبت نام\r\n        </NavLink>\r\n      )}\r\n\r\n      {/* <form class=\"searchForm form-inline\">\r\n                    <input class=\" form-control mr-sm-2 bg-dark\" type=\"search\" placeholder=\"دنبال چی می گردی؟\" aria-label=\"Search\" />\r\n                    <button class=\" btn btn-outline-warning fa fa-search\" type=\"submit\"></button>\r\n            </form> */}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n    \r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const STATUS = { SUCCESSFULL: 200 };\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === STATUS.SUCCESSFULL) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (ex) {\r\n            // check nonserver errors\r\n            // console.log(ex);\r\n            this.setState({ password: \"\" });\r\n            //toast.error('.ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.', {position: 'top-left', closeOnClick: true});\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    \r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <div className=\"card signInSidebar border-primary mb-3\">\r\n                <div className=\"card-header text-center text-primary border-primary\">\r\n                    ورود کاربران\r\n                </div>\r\n                <LoadingBar loading={loading} />\r\n                <div className=\"card-body text-primary\">\r\n                    <form onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"signInSidebarTextBox form-control text-primary\"\r\n                            placeholder=\"Student ID\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <input\r\n                            type=\"password\"\r\n                            className=\"signInSidebarTextBox form-control text-primary\"\r\n                            placeholder=\"Password\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <div className=\"card-footer bg-transparent border-primary\">\r\n                            <button\r\n                                id=\"btnSideBarSignIn\"\r\n                                type=\"submit\"\r\n                                className=\"btn btn-outline-success btn-lg\"\r\n                            >\r\n                                ورود\r\n                            </button>\r\n                            <button\r\n                                id=\"btnSideBarPasswordRecovery\"\r\n                                className=\"btn btn-outline-info btn-lg\"\r\n                            >\r\n                                بازیابی پسورد\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","\r\n\r\nconst NewsSideBar = () => {\r\n    return ( \r\n        <div className=\"card newsSidebar border-success  mb-3\">\r\n            <div className=\"card-header text-center text-success border-success\">اطلاعیه</div>\r\n            <div className=\"card-body text-right\">\r\n                <p>متن خبر 1</p>\r\n                <p>متن خبر 2</p>\r\n                <p>متن خبر 3</p>\r\n                <p>متن خبر 4</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default NewsSideBar;","import { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst SmartPhoneNavigationBar = () => {\r\n\r\n  const player = useSelector(state => state.player);\r\n  return (\r\n    // 2. link items theme: make theme better\r\n\r\n    <nav className=\"navbar navbar-expand-lg nav-pills navbar-light bg-light text-right\">\r\n      <div className=\"container text-right\">\r\n        <div className=\"navbar-expand w-100\" id=\"navbarResponsive\">\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <div className=\"row\">\r\n              <li className=\"nav-item\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/\"\r\n                  exact\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  صفحه اصلی\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/gameDeck\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  بازی ها\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/ranking\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  رنکینگ\r\n                </NavLink>\r\n              </li>\r\n            </div>\r\n          </ul>\r\n          <hr />\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <div className=\"row\">\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/gameRules\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  قوانین\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/contactInfo\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  تماس با ما\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                {player ? (\r\n                  <NavLink\r\n                    className=\"navItems nav-link btn btn-outline-success btn-block mt-1 mr-lg-5\"\r\n                    to=\"/controlPanel\"\r\n                  >\r\n                    کنترل پنل\r\n                  </NavLink>\r\n                ) : (\r\n                  <NavLink\r\n                    className=\"navItems nav-link btn btn-outline-success btn-block mt-1 mr-lg-5\"\r\n                    to=\"/signUp\"\r\n                  >\r\n                    ثبت نام\r\n                  </NavLink>\r\n                )}\r\n              </li>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SmartPhoneNavigationBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Alert } from \"react-bootstrap\";\r\nimport noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { player, inGame } = props;\r\n    return (\r\n        <div className=\"card playerInfoSideBar border-info mb-3\">\r\n            <div className=\"card-header text-center text-info border-info\">\r\n                {player.fullname}\r\n            </div>\r\n            <img\r\n                className=\"card-img-top playerAvatar\"\r\n                src={noAvatar}\r\n                alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n            />\r\n            <hr />\r\n            <div className=\"card-body\">\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <li className=\"text-center list-group-item\">\r\n                            <Alert variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading>\r\n                                    {inGame.shape} : {inGame.score}\r\n                                </Alert.Heading>\r\n                                \r\n                            </Alert>\r\n                        </li>\r\n                    )}\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">امتیاز بازیکن</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.points}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد برد</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.wins}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد باخت</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.loses}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد تساوی</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.draws}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const UpdateMyRecords = () => ({\r\n    type: \"UPDATE_ME\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (roomName) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: roomName,\r\n});\r\n\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details ,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport SignInSideBar from \"./../sidebars/SignInSideBar\";\r\nimport NewsSideBar from \"./../sidebars/NewsSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport SmartPhoneNavigationBar from \"./SmartPhoneNavigationBar\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadMe } from \"../dashboard/actions\";\r\nimport { Fragment } from \"react\";\r\nimport userServices from \"./../services/userServices\";\r\nimport gameServices from \"../services/gameServices\";\r\nconst MainLayout = (props) => {\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector(state => state.opponent);\r\n    const scoreboard = useSelector(state => state.scoreboard);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const deviceIsDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const deviceIsSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const deviceIsTablet =\r\n        !deviceIsDesktop && !deviceIsSmartPhone ? true : false;\r\n    // this method is for temporary use and for finding items that cause horizontal overflow causing horizontal scrollbar\r\n    // const findHorizontalOverflow = () => {\r\n    //     let docWidth = document.documentElement.offsetWidth;\r\n    //     [].forEach.call(document.querySelectorAll(\"*\"), function (el) {\r\n    //         if (el.offsetWidth > docWidth) {\r\n    //             console.log(\"here is the sabotage: \", el);\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    //load player data after sign in\r\n    const userID = userServices.readUserID();\r\n    if (userID && !player) {\r\n        gameServices\r\n            .loadPlayerData(userID)\r\n            .then((result) => {\r\n                dispatch(LoadMe(result ? result : null));\r\n            })\r\n            .catch((err) => {\r\n                dispatch(LoadMe(null));\r\n            });\r\n    }\r\n\r\n    let pageLeftSideBars = <NewsSideBar />;\r\n    let pageRightSideBar = player ? (\r\n        <PlayerInfoSideBar player={player} inGame={scoreboard.me}/>\r\n    ) : (\r\n        <SignInSideBar />\r\n    ); // in case login hassnt been made\r\n\r\n    if (pathname === \"/signUp\") {\r\n        // || pathname === '/competitions'){ // this condition MUST change later\r\n        pageLeftSideBars = null; //change later\r\n        pageRightSideBar = null; // change then\r\n    }\r\n\r\n    if (pathname === \"/gameDeck\") {\r\n        // left sidebar must be opponents playerInfo\r\n        if(opponent){\r\n            pageLeftSideBars = <PlayerInfoSideBar player={opponent} inGame={scoreboard.opp}/>;\r\n        }\r\n        if (deviceIsSmartPhone) {\r\n            //this is temprory\r\n            // find a way for showing result in smartphone, without causing vertical scroll\r\n            pageLeftSideBars = null; //change later\r\n            pageRightSideBar = null; // change then\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n            {deviceIsDesktop || deviceIsTablet ? (\r\n                <NavigationBar />\r\n            ) : (\r\n                <SmartPhoneNavigationBar />\r\n            )}\r\n            {deviceIsDesktop && (\r\n                <div className=\"row mx-auto w-100\">\r\n                    <div className=\"col-3\">{pageRightSideBar}</div>\r\n                    <div\r\n                        className={\r\n                            pageLeftSideBars !== null ? \"col-6\" : \"col-12\"\r\n                        }>\r\n                        {props.children}\r\n                    </div>\r\n                    <div className=\"col-3\">{pageLeftSideBars}</div>\r\n                </div>\r\n            )}\r\n            {deviceIsTablet && (\r\n                <div className=\"row mx-auto w-100\">\r\n                    <div\r\n                        className={\r\n                            pageLeftSideBars !== null ? \"col-8\" : \"col-12\"\r\n                        }>\r\n                        {props.children}\r\n                    </div>\r\n                    <div className=\"col-4\">{pageLeftSideBars}</div>\r\n                </div>\r\n            )}\r\n            {deviceIsSmartPhone && (\r\n                <div className=\"container mx-auto w-100\">\r\n                    {player ? (\r\n                        <div className=\"row w-100 mx-auto\">\r\n                            {pageRightSideBar}\r\n                        </div>\r\n                    ) : null}\r\n                    <div className=\"row w-100 mx-auto\">{pageLeftSideBars}</div>\r\n                    <div className=\"row w-100 mx-auto\">{props.children}</div>\r\n                </div>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        \r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"15px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n                <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                    <thead className=\"bg-info\">\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">نام بازیکن</th>\r\n                            <th scope=\"col\">امتیاز</th>\r\n                            <th scope=\"col\">تعداد برد</th>\r\n                            <th scope=\"col\">تعداد باخت</th>\r\n                            <th scope=\"col\">تعداد تساوی</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {players.map((player) => (\r\n                            <SinglePlayerCard\r\n                                key={player.userID}\r\n                                rowNumber={players.findIndex(p => p.userID === player.userID) + 1}\r\n                                name={player.fullname}\r\n                                points={player.records.points}\r\n                                wins={player.records.wins}\r\n                                loses={player.records.loses}\r\n                                draws={player.records.draws}\r\n                            ></SinglePlayerCard>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"./../services/userServices\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const STATUS = { SUCCESSFULL: 200 };\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === STATUS.SUCCESSFULL) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort(\r\n                        (p1, p2) => p2.records.points - p1.records.points\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <div className=\"row mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <div className=\"col-12\">\r\n                    <AllPlayers players={players} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import { Component } from \"react\";\r\n\r\nclass ControlPanel extends Component {\r\n    // static contextType = MainContext;\r\n    // onSignOutClick = async () => {\r\n    //     this.context.signOutPlayer();\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"card border-success mb-3 signUpCard\">\r\n                <div className=\"card-header bg-transparent text-center border-success\">\r\n                    کنترل پنل\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger btn-block mt-4\"\r\n                        onClick={this.onSignOutClick} //temprory\r\n                    >\r\n                        خروج از حساب کاربری\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import config from \"./config.json\";\r\n\r\nconst createSocketRequest = (request, roomName, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        roomName,\r\n        playerID,\r\n        msg,\r\n    });\r\n\r\nconst connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(config.webSocketRoot);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            // change\r\n            // setTimeout( () => {\r\n            //     connect(roomName, playerID);\r\n            //     console.log('reconnecting from onClose');\r\n            // }, 1000)\r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n\r\nconst socketServices = {\r\n    createSocketRequest,\r\n    connect,\r\n};\r\n\r\nexport default socketServices;","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    UpdateMyRecords,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        UpdateMyRecords: () => dispatch(UpdateMyRecords()),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (roomName) => dispatch(SetRoom(roomName)),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Component, Fragment } from \"react\";\r\nimport \"./games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"./../services/userServices\";\r\nimport gameServices from \"./../services/gameServices\";\r\nimport socketServices from \"../services/socketServices\";\r\nimport withReduxDashboard from \"../dashboard/withReduxDashboard\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        rowMarginRatio: 0,\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: \"X\",\r\n                color: \"cyan\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: \"O\",\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        tableDimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketConnection: undefined,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.connectionLost = false;\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") {\r\n            this.setState({ myTurn: Number(msg) });\r\n        } else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.LoadOpponentData(msg[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            // toast.warn('new-move-recieved');\r\n            //******** */ catch exceptions\r\n            // ****** UPDATE THIS PART **************************************//\r\n            const { newMove, cell, xScore, oScore } = msg; //is table needed to be sent every time to clients?\r\n\r\n            const cellID = Number(newMove);\r\n\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                players,\r\n            });\r\n\r\n            this.state.socketConnection.send(\r\n                socketServices.createSocketRequest(\r\n                    \"moveRecieved\",\r\n                    room,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            this.verifyAndApplyTheMove(cell, this.cellButtons[cellID]);\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"END\") {\r\n            this.endGame();\r\n            this.props.CleanScoreboard();\r\n        }\r\n    };\r\n\r\n    forceConnectToWebSocket = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n        try {\r\n            let socket = await socketServices.connect(\r\n                room,\r\n                player.userID,\r\n                this.state.tableDimension\r\n            );\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketConnection: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n\r\n            setTimeout(() => {\r\n                console.log(\"rconnecting from GamePlay\");\r\n                this.forceConnectToWebSocket(nextJob);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    updateMarginParameters = (divTableBlock) => {\r\n        //const {deviceIsDesktop, deviceIsTablet, deviceIsSmartPhone} = this.context;\r\n        const rowMarginDevideOn = 12.4; // deviceIsDesktop ? 22 : (deviceIsTablet ? 14 : 6);\r\n        this.setState({\r\n            rowMarginRatio: divTableBlock.offsetWidth / rowMarginDevideOn,\r\n        });\r\n        //*** for now this method remain still but if the main container is in fixed pixels width, the hell is this needed? */\r\n    };\r\n\r\n    onTableBlockResize = (event) => {\r\n        this.updateMarginParameters(event.target);\r\n    };\r\n\r\n    initiateGameTimer = () => {\r\n        setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (this.connectionLost) {\r\n                    console.log(\"connected\");\r\n                    this.connectionLost = false;\r\n                    this.forceConnectToWebSocket(null);\r\n                }\r\n            } else {\r\n                console.log(\"dissconnected\");\r\n                this.connectionLost = true;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"gameTableCells\"); // pay attension to searched className! may cause an error\r\n\r\n        let divTableBlock = document.getElementById(\"divTableBlock\");\r\n        this.updateMarginParameters(divTableBlock);\r\n        divTableBlock.addEventListener(\"resize\", (event) =>\r\n            this.onTableBlockResize(event)\r\n        );\r\n        const { player, room } = this.props;\r\n        this.forceConnectToWebSocket(() => {\r\n            this.state.socketConnection.send(\r\n                socketServices.createSocketRequest(\r\n                    \"load\",\r\n                    room,\r\n                    player.userID,\r\n                    null\r\n                )\r\n            );\r\n        });\r\n        this.initiateGameTimer();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"divTableBlock\" className=\"card border-dark gameBorderCard\">\r\n                <div className=\"form-inline w-100\">\r\n                    <p\r\n                        style={{ color: this.state.players[1].color }}\r\n                        className=\"w-50 text-center\">{`O: ${this.state.players[1].score}`}</p>\r\n                    <p\r\n                        style={{ color: this.state.players[0].color }}\r\n                        className=\"w-50 text-center\">{`X: ${this.state.players[0].score}`}</p>\r\n                </div>\r\n                {this.drawGameTable()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { tableDimension } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    this.forceConnectToWebSocket(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    tableDimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n                    this.forceConnectToWebSocket(() => {\r\n                        this.state.socketConnection.send(\r\n                            socketServices.createSocketRequest(\r\n                                \"move\",\r\n                                room,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        this.state.socketConnection.send(\r\n                            socketServices.createSocketRequest(\r\n                                \"load\",\r\n                                room,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.innerHTML = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({\r\n                turn: (turn + 1) % 2,\r\n                table: tempTable,\r\n            });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, tableDimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < tableDimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === tableDimension) {\r\n                if (table[floor][i][tableDimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][tableDimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        let totalScores =\r\n            this.connectTheScoreLines(\r\n                rowCount,\r\n                floor * tableDimension * tableDimension + row * tableDimension,\r\n                1,\r\n                players[playerInTheCell],\r\n                tableDimension\r\n            ) +\r\n            this.connectTheScoreLines(\r\n                columnCount,\r\n                floor * tableDimension * tableDimension + column,\r\n                tableDimension,\r\n                players[playerInTheCell],\r\n                tableDimension\r\n            ) +\r\n            this.connectTheScoreLines(\r\n                floorMainDiagCount,\r\n                floor * tableDimension * tableDimension,\r\n                tableDimension + 1,\r\n                players[playerInTheCell],\r\n                tableDimension\r\n            ) +\r\n            this.connectTheScoreLines(\r\n                floorSideDiagCount,\r\n                floor * tableDimension * tableDimension + (tableDimension - 1),\r\n                tableDimension - 1,\r\n                players[playerInTheCell],\r\n                tableDimension\r\n            ) +\r\n            this.connectTheScoreLines(\r\n                tableMainDiagCount,\r\n                0,\r\n                tableDimension * (tableDimension + 1) + 1,\r\n                players[playerInTheCell],\r\n                tableDimension\r\n            ) +\r\n            this.connectTheScoreLines(\r\n                tableSideDiagCount,\r\n                tableDimension - 1,\r\n                tableDimension * (tableDimension + 1) - 1,\r\n                players[playerInTheCell],\r\n                tableDimension\r\n            ) +\r\n            this.connectTheScoreLines(\r\n                tableAltitudeCount,\r\n                row * tableDimension + column,\r\n                tableDimension * tableDimension,\r\n                players[playerInTheCell],\r\n                tableDimension\r\n            );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"gameTableCells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"gameTableCells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n\r\n            return 1;\r\n        }\r\n        return 0;\r\n    };\r\n\r\n    endGame = async () => {\r\n        //*******************important:\r\n        //ADD TRY CATCHimport socketServices from './../services/socketServices';\r\n        //*************edit: this.context.gatherPlayerData();\r\n        this.props.UpdateMyRecords(); //resets redux.state.player => forces MainLayout to reload player data and records\r\n\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else\r\n            toast.error('تکبیر!');\r\n        //reset everything:\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.SetRoom(null);\r\n        }, 5000);\r\n    };\r\n    drawGameTable = () => {\r\n        // *****************note: when window size changes: table's selected cells are cleared\r\n        // use this.state.table to load again*****************\r\n        const { rowMarginRatio, tableDimension } = this.state;\r\n        // initialize rows columns floors\r\n\r\n        try {\r\n            if (!this.state.table) {\r\n                return \"...در حال اتصال\";\r\n            } else {\r\n                let dimens = [];\r\n                for (let i = 0; i < tableDimension; i++) dimens.push(i);\r\n                const { table, players } = this.state;\r\n                // drawing the table and setting id s and click events\r\n                return dimens.map((floor) => (\r\n                    <Fragment>\r\n                        {dimens.map((row) => (\r\n                            <div\r\n                                style={{\r\n                                    marginLeft: `${row * rowMarginRatio}px`,\r\n                                }}>\r\n                                {dimens.map((column) => (\r\n                                    <button\r\n                                        key={\r\n                                            floor *\r\n                                                tableDimension *\r\n                                                tableDimension +\r\n                                            row * tableDimension +\r\n                                            column\r\n                                        }\r\n                                        type=\"button\"\r\n                                        className=\"gameTableCells btn btn-outline-dark\"\r\n                                        style={\r\n                                            table[floor][row][column] !== null\r\n                                                ? {\r\n                                                      color: players[\r\n                                                          table[floor][row][\r\n                                                              column\r\n                                                          ]\r\n                                                      ].color,\r\n                                                  }\r\n                                                : null\r\n                                        }\r\n                                        id={\r\n                                            floor *\r\n                                                tableDimension *\r\n                                                tableDimension +\r\n                                            row * tableDimension +\r\n                                            column\r\n                                        }\r\n                                        onClick={(event) =>\r\n                                            this.onEachCellClick(event)\r\n                                        }>\r\n                                        {table[floor][row][column] !== null &&\r\n                                            players[table[floor][row][column]]\r\n                                                .shape}\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </Fragment>\r\n                ));\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\nexport default withReduxDashboard(GamePlay);\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectToWebSocket(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectToWebSocket(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom } from \"../dashboard/actions\";\r\n\r\nconst RoomManager = () => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const player = useSelector(state => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        \r\n\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n\r\n        dispatch(SetRoom(roomName)); //set redux state room => roomname\r\n\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"card border-warning mb-3 singleCard\">\r\n                <div className=\"card-header text-center border-warning\">\r\n                    اتصال بازیکنان\r\n                </div>\r\n                <div className=\"card-body text-right\">\r\n                    <form onSubmit={(event) => onStartGameClick(event)}>\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">نام روم</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control w-75\"\r\n                                placeholder=\"Room Name\"\r\n                                value={roomName}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                        setRoomName(event.target.value)\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            شروع بازی\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import GamePlay from './GamePlay';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment } from 'react';\r\nimport RoomManager from './RoomManager';\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector(state => state.room);\r\n\r\n    return ( \r\n        <Fragment>\r\n            {room ? <GamePlay /> : <RoomManager />}\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default GameDeck;\r\n","import { Component } from \"react\";\r\nimport ScoresTable from \"./tables/ScoresTable\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport GameRules from \"./informations/GameRules\";\r\nimport ContactInfo from \"./informations/ContactInfo\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./common/MainLayout\";\r\nimport Ranking from \"./tables/Ranking\";\r\nimport ControlPanel from './users/ControlPanel';\r\nimport GameDeck from './games/GameDeck';\r\n\r\nclass App extends Component {\r\n    // 1. use uuid to produce ids\r\n    // state = {  }\r\n    \r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path=\"/signUp\" component={SignUp} />\r\n                    <Route path=\"/gameDeck\" component={GameDeck} />\r\n                    <Route path=\"/ranking\" component={Ranking} />\r\n                    <Route path=\"/gameRules\" component={GameRules} />\r\n                    <Route path=\"/contactInfo\" component={ContactInfo} />\r\n                    <Route path=\"/\" exact component={ScoresTable} />\r\n                    <Route path=\"/controlPanel\" exact component={ControlPanel} />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer\r\n});\r\n","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n\r\n        case \"UPDATE_ME\":\r\n            return null; //sets state.player => null, forces Mainlayout to reload and update state.player data\r\n\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            return action.payload;\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}