{"version":3,"sources":["services/configs/client.js","services/configs/server.js","services/configs/status.js","services/configs/browser.js","services/configs/gamesetting.js","tools/format.js","tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","tools/notification.js","services/http/httpService.js","services/http/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameGuide.jsx","informations/ContactUs.jsx","services/http/userServices.js","commons/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","sidebars/SignInSideBar.jsx","services/http/noticeServices.js","sidebars/NoticeSideBar.jsx","sidebars/no-avatar.png","sidebars/OnlineStatistics.jsx","globals/redux/actions/tools.js","globals/redux/actions/chats.js","globals/redux/actions/message.js","chat/GameChatBox.jsx","profile/friendgames/Record.jsx","sidebars/PlayerInfoSideBar.jsx","tools/NotificationCenter.jsx","globals/redux/actions/index.js","globals/state/GlobalContext.jsx","globals/redux/actions/game.js","services/ws/GlobalSocketManager.jsx","globals/redux/actions/player.js","users/AutoSignIn.jsx","layouts/MainLayout.jsx","tables/rankings/SinglePlayerCard.jsx","tables/rankings/AllPlayers.jsx","tables/rankings/Rankings.jsx","services/ws/gamePlaySocketServices.js","globals/redux/withReduxDashboard.js","games/gameplay/BriefScoreboard.jsx","games/gameplay/TableDesign.jsx","games/gameplay/GamePlay.jsx","games/SingleGame.jsx","games/competitions/CompetitionSummary.jsx","games/competitions/CompetitionsMain.jsx","games/GameDeck.jsx","profile/NoticeManager.jsx","profile/AcountCredentials.jsx","profile/friendgames/no-avatar.png","profile/friendgames/FriendRecords.jsx","profile/friendgames/MyGamesAndFriends.jsx","chat/Message.jsx","chat/ChatBox.jsx","services/http/chatServices.js","chat/ChatRoom.jsx","globals/redux/actions/friends.js","profile/panel/ProfilePanel.jsx","profile/panel/CollapsedPanel.jsx","layouts/ProfilePanelLayout.jsx","commons/NavigationBar.jsx","globals/state/GlobalStates.jsx","App.js","globals/redux/reducers/index.js","globals/redux/reducers/me.js","globals/redux/reducers/opponent.js","globals/redux/reducers/room.js","globals/redux/reducers/scoreboard.js","globals/redux/reducers/tools.js","globals/redux/reducers/statistics.js","globals/redux/reducers/message.js","globals/redux/reducers/chats.js","globals/redux/reducers/freinds.js","globals/redux/store/index.js","index.js","services/configs/index.js"],"names":["Profile","module","exports","Root","SignUp","SignIn","GameDeck","Rankings","GameGuide","ContactUs","ChatRoom","MyGamesAndFriends","Notices","WebSocketRoot","wsGamePlayRoute","wsGlobalRoute","Users","Private","Credentials","PasswordChange","Friends","Public","Administrators","Games","Mine","Chats","Interactions","SingleChat","NoticeManagement","Successful","CreatedSuccessfully","BadRequest","Unauthorized","Forbidden","NotFound","NotAcceptable","Conflict","SessionExpired","UnprocessableEntity","InternalServerError","isErrorExpected","error","response","status","save","token","sessionStorage","setItem","reset","clear","TOKEN","getItem","T3D","TableRowMargings","TurnTimeOut","objectify","date","DateObject","Date","calendar","persian","locale","persian_fa","toHijri","format","SingleScoreCard","Type","playerXName","playerOName","xScore","oScore","useState","xBadge","setXBadge","oBadge","setOBadge","hijriDate","setHijriDate","useEffect","Card","border","className","Body","Row","Footer","Button","variant","block","size","aria-hidden","AllScores","scores","length","map","score","players","name","gameID","Text","Sorry","text","toast","position","closeOnClick","icon","style","float","OK","success","Notify","info","Attention","onClick","warn","type","Boolean","NewMsg","event","console","log","window","location","Routes","Client","axios","defaults","headers","post","put","interceptors","request","use","config","browserStorage","Authorization","Promise","reject","expectedErrors","Status","err","http","get","delete","Server","gameServices","getAllGames","getMyGames","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","this","props","Device","a","data","Configs","allGames","then","result","reverse","filter","game","isLive","catch","Container","Col","Component","Header","href","userServices","signUp","user","JSON","stringify","signIn","getPlayer","userID","getAllPlayers","getMe","getMyCredentials","editMyCredentials","newMe","changeMyPassword","passwords","getMyFriends","isMyFriend","targetID","isAdministrator","LoadingBar","whichOne","setWhichOne","Math","floor","random","useLayoutEffect","document","body","overflowY","height","selectedLoader","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","preventDefault","Number","history","replace","onForgotPasswordClick","Modal","backdrop","show","onHide","closeButton","Form","onSubmit","Group","Label","Control","placeholder","autoComplete","value","onChange","e","target","controlId","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","newUser","fullname","pattern","onInput","onInvalid","required","SignInSideBar","noticeServices","createNotice","notice","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","notices","setNotices","title","Alert","color","fontSize","uuidv1","OnlineStatistics","useSelector","statistics","games","ListGroup","Item","Badge","pill","TriggerRandomSearch","dispatch","getState","previous","randomSearchTriggered","payload","EndFriendlyInvitation","friendlyGameTarget","UpdateMyChatList","friendID","sent","recieved","chats","find","chat","with","messages","push","me","friend","SendMessageTo","GameChatBox","myMessage","setMyMessage","message","useDispatch","composeMessage","InputGroup","Prepend","width","Record","children","small","PlayerInfoSideBar","scoreboard","personIsFriend","setPersonIsFriend","person","onFriendRequestClick","innerHTML","disabled","friendRequestTarget","piece","setPiece","opp","isFriend","records","margin","textAlign","round","src","noAvatar","index","Heading","shape","points","wins","draws","loses","pathname","tools","gameInvitation","pushed","by","accept","invitorID","ID","acceptedInviter","onClose","decoded_token","jwtdecode","exp","expirationLength","iat","now","GlobalContext","createContext","device","signOut","EnterRoom","room","GlobalSocketManager","context","useContext","socketGlobal","setSocketGlobal","incommingFriendRequest","setIncommingFriendRequest","showFriendshipModal","setShowFriendshipModal","clientOnline","toggleClientOnline","pack","useCallback","msg","enableGlobalTimer","setInterval","send","timerID","clearInterval","redirectToGamePlay","iamSignedIn","connect","resolve","socket","WebSocket","onopen","onmessage","parse","command","UpdateStatistics","setTimeout","answer","targetName","askerID","askerName","RecieveMessageFrom","onerror","close","onclose","inviterID","respondToFriendshipRequest","navigator","onLine","ResetOpponent","ResetMyPlayer","AutoSignIn","opponent","storageToken","player","leftSideBar","setLeftSideBar","rightSideBar","setRightSideBar","setPrimaryRightSideBar","Devices","Tablet","SmartPhone","xs","SinglePlayerCard","rowNumber","scope","AllPlayers","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","createSocketRequest","rname","playerID","roomName","gameType","server","withReduxDashboard","component","LoadThisPlayer","ExitRoom","UpdateScoreboard","details","CleanScoreboard","BriefScoreboard","timeRemaining","timeStamp","setTimeStamp","aThird","GameSetting","TableDesign","dimension","table","onEachCellClick","normalCell","dimens","i","bg","row","direction","marginLeft","column","id","GamePlay","selected","lineColor","turn","myTurn","undefined","socketGamePlay","playerOnline","connectionCheckTimerID","updateGameScorebaord","oppTurn","enableTimerForMyMove","timeout","updatePlayerStates","disableAllTimers","clearTimeout","socketOnMessage","cmd","startTime","IDs","opponentID","cellID","nextMove","verifyAndApplyTheMove","getCellCoordinates","cellButtons","focus","endThisGame","closeThisGame","forceConnectWS","nextJob","enableConnectionCheckTimer","dimen","onFloorId","selectedCellButton","cell","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","connectTheScoreLines","count","firstCell","step","getElementsByClassName","SingleGame","friendlyGame","setRoomName","setGameType","searching","setSearching","onStartGameClick","padding","Radio","checked","CompetitionSummary","summary","CompetitionsMain","Tab","defaultActiveKey","sm","Nav","Link","eventKey","Content","Pane","Tabs","transition","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","isAdmin","admin","createNewNotice","saveChanges","as","calendarPosition","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","Error","selectMode","FriendRecords","myFriends","setMyFriends","myGames","setMyGames","filterID","setFilterID","selectedFriendIndex","setSelectedFriendIndex","serverResponse","friends","onSelect","key","area-hidden","Message","previousDay","inDesktop","showDate","setShowDate","setTime","hDate","hTime","getDate","ChatBox","mostRecentMessageRef","useRef","ourChat","setOurChat","ours","current","scrollIntoView","behavior","top","offsetTop","Array","ref","Desktop","chatServices","getOurChat","getMyInteractions","myChats","interactions","forEach","interact","ownerOf","owner","myfriends","ProfilePanel","exact","to","aria-current","CollapsedPanel","ProfilePanelLayout","NavigationBar","Navbar","activeClassName","isDesktop","useMediaQuery","query","isSmartPhone","isTablet","setDevice","mode","Provider","App","path","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","render","getElementById","ClientRoutes","require","ServerRoutes"],"mappings":"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","file":"static/js/main.b109d890.chunk.js","sourcesContent":["//client routes\r\n\r\n// Partial Routes\r\nconst Profile = \"/Profile\",\r\n    ChatRoom = \"ChatRoom\",\r\n    MyGamesAndFriends = \"GamesFriends\",\r\n    Notices = \"Notices\";\r\n\r\nmodule.exports = {\r\n    Root: \"/\",\r\n    SignUp: \"/SignUp\",\r\n    SignIn: \"/SignIn\",\r\n    GameDeck: \"/GameDeck\",\r\n    Rankings: \"/Rankings\",\r\n    GameGuide: \"/GameGuide\",\r\n    ContactUs: \"/ContacUs\",\r\n    Profile,\r\n    ChatRoom: `${Profile}/${ChatRoom}`,\r\n    MyGamesAndFriends: `${Profile}/${MyGamesAndFriends}`,\r\n    Notices: `${Profile}/${Notices}`,\r\n};\r\n","//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com/ws\",\r\n    wsGamePlayRoute: \"gameplay\",\r\n    wsGlobalRoute: \"global\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Private: \"private\",\r\n    Credentials: \"credentials\",\r\n    PasswordChange: \"password\",\r\n    Friends: 'friends',\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    Mine: \"mine\",\r\n    Chats: \"chats\",\r\n    Interactions: \"interact\",\r\n    SingleChat: 'single',\r\n    Notices: \"notices\",\r\n    NoticeManagement: \"manage\"\r\n};","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    SessionExpired: 420,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\nconst KeyToken = \"ptk\";\r\nmodule.exports = {\r\n    save: (token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(KeyToken, token);\r\n    },\r\n    reset: () => {\r\n        sessionStorage.clear();\r\n    },\r\n    TOKEN: () => sessionStorage.getItem(KeyToken),\r\n};\r\n","module.exports = {\r\n    T3D: {\r\n        TableRowMargings: [0, 40, 80, 120, 160],\r\n        TurnTimeOut: 45, //secs\r\n    },\r\n};\r\n","import DateObject from \"react-date-object\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\n\r\nconst objectify = (date) => {\r\n    return new DateObject({\r\n\t\tdate: new Date(date),\r\n\t\tcalendar: persian,\r\n\t\tlocale: persian_fa,\r\n\t});\r\n}\r\nexport const toHijri = (date) => {\r\n\treturn [\r\n\t\tobjectify(date).format(\"dddd DD MMMM YYYY\"),\r\n\t\tobjectify(date).format(\"hh:mm\"),\r\n\t];\r\n};\r\n\r\nexport const toTimeShort = (date) => {\r\n\treturn objectify(date).format(\"hh:mm\");\r\n};\r\n","import { Button, Card, Row } from \"react-bootstrap\";\r\nimport \"./scores.css\";\r\nimport { useEffect, useState } from 'react';\r\nimport { toHijri } from \"../../tools/format\";\r\n\r\nconst SingleScoreCard = ({\r\n    Type,\r\n    date,\r\n    playerXName,\r\n    playerOName,\r\n    xScore,\r\n    oScore,\r\n}) => {\r\n    // format score text:\r\n    const [xBadge, setXBadge] = useState(null);\r\n    const [oBadge, setOBadge] = useState(null);\r\n    const [hijriDate, setHijriDate] = useState(null);\r\n    useEffect(() => {\r\n        setHijriDate(toHijri(date)[0]);//toHijri = [date, time]\r\n        if (xScore > oScore) {\r\n            // x won\r\n            setXBadge(\"badge-success\");\r\n            setOBadge(\"badge-danger\");\r\n        } else if (xScore === oScore) {\r\n            //draw\r\n            setXBadge(\"badge-warning\");\r\n            setOBadge(\"badge-warning\");\r\n        } else {\r\n            // o won\r\n            setOBadge(\"badge-success\");\r\n            setXBadge(\"badge-danger\");\r\n        }\r\n    }, [date, xScore, oScore]);\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <Card border=\"dark\" className=\"single-score-card\">\r\n            {/* <Card.Header className=\"text-center border-dark\">{`T3D ${Type}x${Type}x${Type}`}</Card.Header> */}\r\n            <Card.Body>\r\n                <Row className=\"text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadge} single-score-badge col-1`}>\r\n                        {xScore}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadge} single-score-badge col-1`}>\r\n                        {oScore}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer className=\"p-0\">\r\n                <Button\r\n                    variant=\"outline-dark\"\r\n                    block\r\n                    size=\"lg\"\r\n                    className=\"replay-game-button\">\r\n                        {hijriDate} \r\n                        <i className=\"fa fa-pie-chart px-3\" aria-hidden=\"true\"></i>\r\n                </Button>\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    return ( \r\n        <Fragment>\r\n            { scores.length ? scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    Type={score.Type}\r\n                    date={score.date}\r\n                    playerXName={score.players[0].name}\r\n                    playerOName={score.players[1].name}\r\n                    xScore={score.players[0].score}\r\n                    oScore={score.players[1].score}\r\n                ></SingleScoreCard>\r\n            )) :\r\n            <Card className=\"bg-transparent mx-auto mt-3\" border=\"danger\">\r\n                <Card.Body className=\"text-center\">\r\n                    <Card.Text>\r\n                        هیچ بازی ای انجام نگرفته است\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                </Card>}\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import { toast } from \"react-toastify\";\r\nimport { Routes } from \"../services/configs\";\r\n\r\nexport const Sorry = (text) => {\r\n\ttoast.error(text, {\r\n\t\t// theme: \"light\",\r\n\t\tposition: \"top-right\",\r\n\t\tcloseOnClick: true,\r\n\t\ticon: (\r\n\t\t\t<i\r\n\t\t\t\tstyle={{ float: \"right\" }}\r\n\t\t\t\tclassName=\"fa fa-times\"\r\n\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t),\r\n\t});\r\n};\r\n\r\nexport const OK = (text) => {\r\n\ttoast.success(text, {\r\n\t\t// theme: \"light\",\r\n\t\tposition: \"top-left\",\r\n\t\tcloseOnClick: true,\r\n\t\ticon: (\r\n\t\t\t<i\r\n\t\t\t\tstyle={{ float: \"right\" }}\r\n\t\t\t\tclassName=\"fa fa-check\"\r\n\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t),\r\n\t});\r\n};\r\n\r\nexport const Notify = (text) => {\r\n\ttoast.info(text, {\r\n\t\t// theme: \"light\",\r\n\t\tposition: \"top-center\",\r\n\t\tcloseOnClick: true,\r\n\t\ticon: (\r\n\t\t\t<i\r\n\t\t\t\tstyle={{ float: \"right\" }}\r\n\t\t\t\tclassName=\"fa fa-info\"\r\n\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t),\r\n\t});\r\n};\r\n\r\nexport const Attention = (text, onClick) => {\r\n\t/*toast.warn(text, {\r\n        type: \"colored\",\r\n        position: \"top-center\",\r\n        closeOnClick: true,\r\n        icon: <i style={{float:'right'}} className=\"fa fa-gavel\" aria-hidden=\"true\"></i>,\r\n    });*/\r\n\ttoast.warn(text, {\r\n\t\ttype: \"dark\",\r\n\t\tposition: \"top-center\",\r\n\t\tonClick, // check these two lines functionality to make sure they doesnt interfere with eachother\r\n\t\tcloseOnClick: !Boolean(onClick), //if it has an onClick, then dont close it, but if it hasnt any onClick then set closeOnClick to true\r\n\t\ticon: (\r\n\t\t\t<i\r\n\t\t\t\tstyle={{ float: \"right\" }}\r\n\t\t\t\tclassName=\"fa fa-gavel\"\r\n\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t),\r\n\t});\r\n};\r\n\r\nconst onNewMessageClick = (event) => {\r\n    console.log('new message clicked');\r\n\twindow.location = Routes.Client.ChatRoom;\r\n};\r\n\r\n//add maximum number of simultanious NewMsg s\r\nexport const NewMsg = ({ name, text }) => {\r\n\ttoast(\r\n\t\t<p className=\"text-right\">\r\n\t\t\t{`${name} : ${text}`}\r\n\t\t</p>,\r\n\t\t{\r\n\t\t\ttype: \"dark\",\r\n\t\t\tposition: \"top-left\",\r\n\t\t\tonClick: (event) => onNewMessageClick(event),\r\n\t\t\ticon: (\r\n\t\t\t\t<i\r\n\t\t\t\t\tstyle={{ float: \"right\" }}\r\n\t\t\t\t\tclassName=\"fa fa-envelope-o px-2 py-1\"\r\n\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t),\r\n\t\t}\r\n\t);\r\n};\r\n\r\nexport const Invitation = (by, accept, reject) => {\r\n\ttoast(\r\n\t\t<p className=\"text-right\">\r\n\t\t\t{`کاربر ${by.name} درخواست بازی با شما را دارد. برای پذیرفتن بازی اینجا کلیک کنید.`}\r\n\t\t</p>,\r\n\t\t{\r\n\t\t\tposition: \"top-left\",\r\n\t\t\tonClick: () => accept(by.ID),\r\n\t\t\t onClose: () => reject(),\r\n\t\t\ticon: (\r\n\t\t\t\t<i\r\n\t\t\t\t\tstyle={{ float: \"right\" }}\r\n\t\t\t\t\tclassName=\"fa fa-gamepad px-2 py-1\"\r\n\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t),\r\n\t\t}\r\n\t);\r\n};\r\n","import axios from \"axios\";\r\nimport { Status, browserStorage } from \"../configs\";\r\nimport { Attention, Sorry } from \"../../tools/notification\";\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n\t(config) => {\r\n\t\tconst token = browserStorage.TOKEN();\r\n\t\tif (token) config.headers.Authorization = `Bearer ${token}`;\r\n\t\telse config.headers.Authorization = null;\r\n\t\treturn config;\r\n\t},\r\n\t(error) => {\r\n\t\t// what to do?\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n\ttry {\r\n\t\tconst expectedErrors =\r\n\t\t\terror.response &&\r\n\t\t\terror.response.status >= Status.BadRequest && // >= 400\r\n\t\t\terror.response.status < Status.InternalServerError; // < 500\r\n\r\n\t\t//*****notice: */\r\n\t\t//remove some oftheese errors... because they need to be costomized in every use in each components\r\n\t\t// change to switch\r\n\t\tif (error.response.status === Status.BadRequest) {\r\n\t\t\tSorry(\r\n\t\t\t\t\"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\"\r\n\t\t\t);\r\n\t\t} else if (error.response.status === Status.Unauthorized) {\r\n\t\t\t// is this needed? browserStorage.reset();\r\n\t\t\tSorry(\r\n\t\t\t\t\"احراز هویت موفقیت آمیز نبود. لطفا وارد حساب کاربری خود شوید\"\r\n\t\t\t);\r\n\t\t\tbrowserStorage.reset();\r\n\t\t} else if (error.response.status === Status.Forbidden) {\r\n\t\t\tSorry(\"شماره دانشجویی یا رمز عبور نادرست است\");\r\n\t\t} else if (error.response.status === Status.NotAcceptable) {\r\n\t\t\t//or used Locked: 423\r\n\t\t\tSorry(\"این قسمت فقط مختص کاربران ادمین می باشد\");\r\n\t\t} else if (error.response.status === Status.Conflict) {\r\n\t\t\tAttention(\r\n\t\t\t\t\"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\"\r\n\t\t\t);\r\n\t\t} else if (error.response.status === Status.SessionExpired) {\r\n\t\t\tSorry(\"نشست شما منقضی شده است، لطفا دوباره وارد حساب خود شوید.\");\r\n\t\t\tbrowserStorage.reset();\r\n\t\t\t//redirect to sign in page !\r\n\t\t} else if (error.response.status === Status.UnprocessableEntity) {\r\n\t\t\tSorry(\"ورودی شما با استانداردهای سایت مطابقت ندارد\");\r\n\t\t} else if (!expectedErrors) {\r\n\t\t\t// console.log(error);\r\n\t\t\tSorry(\r\n\t\t\t\t\"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\"\r\n\t\t\t);\r\n\t\t}\r\n\t} catch (err) {\r\n        console.log(error);\r\n    }\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n\tget: axios.get,\r\n\tpost: axios.post,\r\n\tput: axios.put,\r\n\tdelete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import { Routes } from \"../configs\";\r\n\r\nimport http from \"./httpService\";\r\n\r\nconst { Server } = Routes;\r\n\r\nconst gameServices = {\r\n\tgetAllGames: () => {\r\n\t\treturn http.get(`${Server.Root}/${Server.Games}`);\r\n\t},\r\n\tgetMyGames: () => {\r\n\t\treturn http.get(`${Server.Root}/${Server.Games}/${Server.Mine}`);\r\n\t}\r\n};\r\n\r\nexport default gameServices;\r\n","import \"./scores.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport Configs from \"../../services/configs\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        console.log('CHecking prop: ', this.props.Device);\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllGames();\r\n            if (status === Configs.Status.Successful) return data.allGames;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                result = result.reverse();\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    \r\n    render() {\r\n       \r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        // DESIGN : USE <Tabs> ???\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                !showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {/* this single column is to make mode select buttons and Allscores same width */}\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst GameGuide = () => {\r\n    return ( \r\n        <Card border=\"warning\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">راهنمای بازی</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default GameGuide;","import { Card } from 'react-bootstrap';\r\nimport './info.css'\r\n\r\nconst ContactUs = () => {\r\n    return ( \r\n        <Card border=\"dark\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default ContactUs;","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst { Server } = Routes;\r\n\r\nconst userServices = {\r\n\tsignUp: (user) => {\r\n\t\treturn http.post(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.SignUp}`,\r\n\t\t\tJSON.stringify(user)\r\n\t\t);\r\n\t},\r\n\tsignIn: (user) => {\r\n\t\tconsole.log(`${Server.Root}/${Server.Users}/${Server.SignIn}`);\r\n\t\treturn http.post(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.SignIn}`,\r\n\t\t\tJSON.stringify(user)\r\n\t\t);\r\n\t},\r\n\tgetPlayer: (userID) => {\r\n\t\treturn http.get(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.Public}/${userID}`\r\n\t\t);\r\n\t},\r\n\tgetAllPlayers: () => {\r\n\t\treturn http.get(`${Server.Root}/${Server.Users}/${Server.Public}`);\r\n\t},\r\n\tgetMe: () => {\r\n\t\tconsole.log(\"IAM CALLED\");\r\n\t\treturn http.get(`${Server.Root}/${Server.Users}/${Server.Private}`);\r\n\t},\r\n\tgetMyCredentials: () => {\r\n\t\t//token will be sent automatically, o.w. method doesnt return anything\r\n\t\treturn http.get(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.Private}/${Server.Credentials}`\r\n\t\t);\r\n\t},\r\n\teditMyCredentials: (newMe) => {\r\n\t\treturn http.put(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.Private}/${Server.Credentials}`,\r\n\t\t\tJSON.stringify(newMe)\r\n\t\t);\r\n\t},\r\n\tchangeMyPassword: (passwords) => {\r\n\t\treturn http.put(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.Private}/${Server.Credentials}/${Server.PasswordChange}`,\r\n\t\t\tJSON.stringify(passwords)\r\n\t\t);\r\n\t},\r\n\tgetMyFriends: () => {\r\n\t\treturn http.get(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.Private}/${Server.Credentials}/${Server.Friends}`\r\n\t\t);\r\n\t},\r\n\tisMyFriend: (targetID) => {\r\n\t\treturn http.get(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.Private}/${Server.Credentials}/${Server.Friends}/${targetID}`\r\n\t\t);\r\n\t},\r\n\tisAdministrator: (userID) => {\r\n\t\treturn http.get(\r\n\t\t\t`${Server.Root}/${Server.Users}/${Server.Administrators}/${userID}`\r\n\t\t);\r\n\t},\r\n};\r\n\r\nexport default userServices;\r\n","import { Fragment, useLayoutEffect, useState, useEffect } from \"react\";\r\nimport { Planets, Circle2, Sugar } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    const [whichOne, setWhichOne] = useState(0);\r\n    useEffect(() => {\r\n        setWhichOne(Math.floor(Math.random() * 100)); //randomize animation\r\n    }, []);\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading, whichOne]); //may have bug yet!!\r\n    //random animation\r\n    const selectedLoader =\r\n        whichOne % 3 === 0 ? (\r\n            <Circle2 time={0} customLoading={loading} />\r\n        ) : whichOne % 3 === 1 ? (\r\n            <Planets time={0} customLoading={loading} />\r\n        ) : (\r\n            <Sugar time={0} customLoading={loading} />\r\n        );\r\n\r\n    return <Fragment>{loading ? selectedLoader : null}</Fragment>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                browserStorage.save(data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-2\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal\r\n                    backdrop=\"static\"\r\n                    show={showModal}\r\n                    onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    autoComplete=\"username\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <hr />\r\n                            <Row>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-warning\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { Card, Form, Button } from \"react-bootstrap\";\r\nimport { Sorry, OK, Attention } from \"../tools/notification\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            Sorry(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\");\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    OK(\"ثبت نام با موفقیت انجام شد\");\r\n                    browserStorage.save(data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n                    Attention(\"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\");\r\n                } else if (!Configs.Status.isErrorExpected(err)) {\r\n                    Sorry(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\"\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            Sorry(\"رمز عبورها مطابقت ندارند\");\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Card border=\"success\" className=\"sign-up-card\">\r\n                <LoadingBar loading={loading} />\r\n                <Card.Header className=\"bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">\r\n                                نام خانوادگی\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">\r\n                                شماره دانشجویی\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                autoComplete=\"username\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">ایمیل</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                autoComplete=\"new-password\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">\r\n                                تایید رمز عبور\r\n                            </Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer className=\"border-primary bg-transparent\">\r\n                    اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport Configs, { browserStorage } from \"../services/configs\";\r\nimport { Card, Form, Button, Col, Row } from \"react-bootstrap\";\r\nimport { Sorry } from \"../tools/notification\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                console.log(data);\r\n                browserStorage.save(data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                Sorry(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <Card border=\"primary\" className=\"sign-in-sidebar\">\r\n                <Card.Header\r\n                    border=\"primary\"\r\n                    className=\"text-center text-primary\">\r\n                    ورود کاربران\r\n                </Card.Header>\r\n                <LoadingBar loading={loading} />\r\n                <Card.Body className=\"text-primary\">\r\n                    <Form onSubmit={(event) => this.onSignInSubmitted(event)} >\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            autoComplete=\"username\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"شماره دانشجویی\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"رمز عبور\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Card.Footer className=\"bg-transparent border-primary\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"success\"\r\n                                        className=\"sign-in-sidebar-buttons\">\r\n                                        <i\r\n                                            className=\"fa fa-sign-in px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ورود\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button\r\n                                        className=\"sign-in-sidebar-buttons\"\r\n                                        variant=\"warning\">\r\n                                        <i\r\n                                            className=\"fa fa-recycle px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        بازیابی پسورد\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Server.Root}/${Server.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\nimport { v1 as uuidv1 } from \"uuid\";\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n\r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const { status, data } = await noticeServices.getShortNotices();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    \r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    if(data.notices.length === 0) {\r\n                        setNotices([{\r\n                            title: \"پیام\",\r\n                            text: \"اطلاعیه جدیدی وجود ندارد\",\r\n                        }]);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            }\r\n        })();\r\n        \r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"notice-sidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.length && notices.map((notice) => {\r\n                    return (\r\n                        <Fragment key={uuidv1()}>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-rss px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Badge, Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst OnlineStatistics = () => {\r\n    const {players, games} = useSelector((state) => state.statistics);\r\n    return (\r\n        <ListGroup className=\"list-group list-group-flush\">\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-wifi px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            کاربران آنلاین\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {players}\r\n                        </Badge>\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی های فعال\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {games}\r\n                        </Badge>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default OnlineStatistics;\r\n","export const TriggerRandomSearch = () => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.randomSearchTriggered = !previous.randomSearchTriggered;\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\nexport const SendFriendRequestTo = (targetID) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.friendRequestTarget = targetID;\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\nexport const EndFriendRequest = () => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.friendRequestTarget = null;\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\nexport const InviteToFriendlyGame = (targetID) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.friendlyGameTarget = targetID;\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\nexport const EndFriendlyInvitation = () => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.friendlyGameTarget = null;\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\nexport const RecieveGameInvitation = (ID, name) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.gameInvitation = { ID, name };\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\nexport const RejectGameInvitation = (ID, name) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.gameInvitation = null;\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\nexport const AcceptInvitation = (invitorID) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tconst previous = { ...getState() };\r\n\t\tprevious.acceptedInviter = invitorID;\r\n\t\tprevious.gameInvitation = null;\r\n\t\tawait dispatch({ type: \"UPDATE_TOOLS\", payload: previous });\r\n\t};\r\n};\r\n\r\n// reject invitation by nulling the field\r\n","\r\nexport const UpdateMyChatList = (name, friendID, text, { sent, recieved }) => {\r\n\t// one time u load from server, then new messages are simply pushed to previous data\r\n\treturn async (dispatch, getState) => {\r\n\t\ttry {\r\n\t\t\tconst previous = [...getState().chats];\r\n\t\t\t// is it ok to use by refrence ?\r\n\t\t\tconsole.log(\"recieve update\");\r\n\t\t\tprevious.find(chat => chat.with === friendID).messages.push({\r\n\t\t\t\tname: name, //is name needed?\r\n\t\t\t\tme: sent ? text : null,\r\n\t\t\t\tfriend: recieved ? text : null,\r\n\t\t\t\tdate: new Date(),\r\n\t\t\t});\r\n\t\t\tawait dispatch({\r\n\t\t\t\ttype: \"LOAD_CHATS\",\r\n\t\t\t\tpayload: previous,\r\n\t\t\t});\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\t//..propeer message\r\n\t\t\t// ...reset?\r\n\t\t}\r\n\t};\r\n};\r\n/*\r\n// load all chats\r\nexport const LoadMyChats = () => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tconst { status, data } = await chatServices.getMyChats();\r\n\t\t\tif (status === Status.Successful) {\r\n\t\t\t\tconst {myChats} = data;\r\n\t\t\t\tconsole.log(myChats);\r\n\t\t\t\tconst chats = myChats.map((chat) => {\r\n\t\t\t\t\tconst { ownerOf, friendID, messages } = chat;\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\twith: friendID,\r\n\t\t\t\t\t\tmessages: messages.map((msg) =>\r\n\t\t\t\t\t\t\townerOf === msg.owner\r\n\t\t\t\t\t\t\t\t? { me: msg.text, friend: null, date: msg.date }\r\n\t\t\t\t\t\t\t\t: { me: null, friend: msg.text, date: msg.date }\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\r\n\t\t\t\tawait dispatch({ type: \"LOAD_CHATS\", payload: chats });\r\n\t\t\t\t// dispatch friends here\r\n\t\t\t\t// chats key-value array: its keys are friendID that is relative to a special chat\r\n\t\t\t\tawait dispatch({ type: \"LOAD_FRIENDS\", payload: chats });\r\n\t\t\t} else throw new Error(\"Error happened while forming chats list\");\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Loading chats interrupted cause of this error: ${err}`\r\n\t\t\t);\r\n\t\t\t//show proper message\r\n\t\t\tSorry(\r\n\t\t\t\t\"حین بارگذاری پیام ها مشکلی پیش آمد. لطفا لحظاتی بعد دوباره تلاش کنید\"\r\n\t\t\t);\r\n\t\t\tawait dispatch({ type: \"RESET_CHATS\" });\r\n\t\t\tawait dispatch({ type: \"RESET_FRIENDS\" });\r\n\t\t}\r\n\t};\r\n};*/","import { UpdateMyChatList } from \"./chats\";\r\n\r\nexport const SendMessageTo = (name, friendID, text) => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tif (text && friendID && name) {\r\n\t\t\t\tawait dispatch({\r\n\t\t\t\t\ttype: \"SEND_MESSAGE\",\r\n\t\t\t\t\tpayload: { name, friendID, text },\r\n\t\t\t\t});\r\n\t\t\t\tawait dispatch(UpdateMyChatList(name, friendID, text, {sent: true}));\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"msg not sent: data missing...\");\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const RecieveMessageFrom = (name, friendID, text) => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tif (text && friendID && name) {\r\n\t\t\t\tawait dispatch({\r\n                    type: \"RECIEVE_MESSAGE\",\r\n                    payload: { name, friendID, text },\r\n                });\r\n\t\t\t\tawait dispatch(UpdateMyChatList(name, friendID, text, {recieved: true}));\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"msg not recieved: data missing...\");\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t};\r\n};","import { Alert, Button, Form, Row, InputGroup } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendMessageTo } from \"../globals/redux/actions/message\";\r\nconst GameChatBox = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(\"\");\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.me);\r\n\r\n    const composeMessage = (event) => {\r\n        if (myMessage) {\r\n            //if message is not empty\r\n            event.preventDefault();\r\n            dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n            setMyMessage(\"\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={(event) => composeMessage(event)}>\r\n            <Row className=\"w-100 mt-3 mx-auto\">\r\n                <Alert className=\"w-100 text-right\" variant=\"info\">\r\n                    {message && message.recieved ? (\r\n                        message.recieved.text\r\n                    ) : (\r\n                        <p className=\"p-1\"> </p>\r\n                    )}\r\n                </Alert>\r\n            </Row>\r\n            <Row className=\"w-100 mx-auto mb-3\">\r\n                <InputGroup className=\"w-100\">\r\n                    <InputGroup.Prepend style={{ width: \"10%\" }}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"mx-auto\"\r\n                            variant=\"outline-info\">\r\n                            <i\r\n                                className=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </InputGroup.Prepend>\r\n\r\n                    <InputGroup.Prepend style={{ width: \"88%\" }}>\r\n                        <Form.Control\r\n                            placeholder=\"پیام...\"\r\n                            value={myMessage}\r\n                            onChange={(e) => setMyMessage(e.target.value)}\r\n                            className=\"text-right\"></Form.Control>\r\n                    </InputGroup.Prepend>\r\n                </InputGroup>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default GameChatBox;\r\n","\r\nimport { Card, Col, ListGroup, Row } from 'react-bootstrap';\r\nimport { Badge } from 'react-bootstrap';\r\nimport '../profile.css';\r\n\r\nconst Record = ({children,title, small}) => {\r\n    return (\r\n        <ListGroup.Item className=\"bg-transparent\">\r\n            <Row className={!small && \"py-2\"}>\r\n                <Col className=\"text-center\">\r\n                    <Card.Text>{title}</Card.Text>\r\n                </Col>\r\n                <Col className={small ? \"text-left\" : \"text-center\"}>\r\n                    <Badge\r\n                        className=\"friend-badge-font-size\"\r\n                        pill\r\n                        variant=\"primary\">\r\n                        {children}\r\n                    </Badge>\r\n                </Col>\r\n            </Row>\r\n        </ListGroup.Item>\r\n    );\r\n};\r\n\r\nexport default Record;\r\n","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport { Card, Col, Alert, ListGroup, Button } from \"react-bootstrap\";\r\nimport OnlineStatistics from \"./OnlineStatistics\";\r\nimport { SendFriendRequestTo } from \"../globals/redux/actions/tools\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport GameChatBox from \"../chat/GameChatBox\";\r\nimport Record from \"../profile/friendgames/Record\";\r\nimport Avatar from \"react-avatar\";\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n\tconst me = useSelector((state) => state.me);\r\n\tconst scoreboard = useSelector((state) => state.scoreboard);\r\n\r\n\tconst dispatch = useDispatch();\r\n\tconst [personIsFriend, setPersonIsFriend] = useState(false);\r\n\r\n\tconst person = props.person ? props.person : me;\r\n\tconst onFriendRequestClick = (event) => {\r\n\t\tevent.target.innerHTML = \"ارسال شد...\";\r\n\t\tevent.target.disabled = true;\r\n\t\tdispatch(SendFriendRequestTo(person.userID));\r\n\t};\r\n\tconst [piece, setPiece] = useState(null); //piece === mohreh\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(scoreboard);\r\n\t\tsetPiece(\r\n\t\t\tme && person.userID !== me.userID ? scoreboard.opp : scoreboard.me\r\n\t\t);\r\n\t}, [person, me, scoreboard]);\r\n\tuseEffect(() => {\r\n\t\tif (me && person.userID !== me.userID) {\r\n\t\t\t(async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst { status, data } = await userServices.isMyFriend(\r\n\t\t\t\t\t\tperson.userID\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (status === Configs.Status.Successful) {\r\n\t\t\t\t\t\tsetPersonIsFriend(data.isFriend);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\t// handle error.\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t}\r\n\t}, [me, person]);\r\n\tif (!person) return null;\r\n\tconst { records } = person;\r\n\treturn (\r\n\t\t<Card border=\"info\" className=\"player-info-sidebar\">\r\n\t\t\t<Card.Header className=\"text-center text-info form-inline\">\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Card.Text className=\"text-left\">\r\n\t\t\t\t\t\t{person.fullname}\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col>\r\n\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tmargin: \"auto\",\r\n\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tsize=\"60\"\r\n\t\t\t\t\t\tround={true}\r\n\t\t\t\t\t\tsrc={noAvatar}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Col>\r\n\t\t\t</Card.Header>\r\n\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<ListGroup className=\"list-group list-group-flush\">\r\n\t\t\t\t\t{piece && (\r\n\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t<Alert variant={piece.index ? \"danger\" : \"primary\"}>\r\n\t\t\t\t\t\t\t\t<Alert.Heading className=\"text-center\">\r\n\t\t\t\t\t\t\t\t\t{piece.score} : {piece.shape}\r\n\t\t\t\t\t\t\t\t</Alert.Heading>\r\n\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t<Record small title=\"امتیاز بازیکن\">\r\n\t\t\t\t\t\t{records.points}\r\n\t\t\t\t\t</Record>\r\n\t\t\t\t\t<Record small title=\"تعداد بردها\">\r\n\t\t\t\t\t\t{records.wins}\r\n\t\t\t\t\t</Record>\r\n\t\t\t\t\t<Record small title=\"تعداد تساوی\">\r\n\t\t\t\t\t\t{records.draws}\r\n\t\t\t\t\t</Record>\r\n\t\t\t\t\t<Record small title=\"تعداد باختها\">\r\n\t\t\t\t\t\t{records.loses}\r\n\t\t\t\t\t</Record>\r\n\t\t\t\t</ListGroup>\r\n\t\t\t</Card.Body>\r\n\t\t\t<Card.Footer>\r\n\t\t\t\t{me === person ? (\r\n\t\t\t\t\t<OnlineStatistics />\r\n\t\t\t\t) : personIsFriend ? (\r\n\t\t\t\t\t<GameChatBox friendID={person.userID} />\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tvariant={\"outline-info\"}\r\n\t\t\t\t\t\tblock\r\n\t\t\t\t\t\tonClick={(event) => onFriendRequestClick(event)}>\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-handshake-o px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\tدرخواست دوستی\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t)}\r\n\t\t\t</Card.Footer>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","import { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { MessagePushed } from \"../globals/redux/actions\";\r\nimport { browserStorage, Routes } from \"../services/configs\";\r\nimport { Attention, Invitation, NewMsg } from \"./notification\";\r\nimport jwtdecode from \"jwt-decode\";\r\nimport { AcceptInvitation } from \"../globals/redux/actions/tools\";\r\nimport { RejectGameInvitation } from \"./../globals/redux/actions/tools\";\r\n\r\nconst NotificationCenter = ({ location }) => {\r\n\tconst message = useSelector((state) => state.message);\r\n\tconst { pathname } = location;\r\n\tconst tools = useSelector((state) => state.tools);\r\n\tconst dispatch = useDispatch();\r\n\t// check TOKEN EXPIRE time and notify user before he starts a game to re login\r\n\tconst { gameInvitation } = tools;\r\n\tuseEffect(() => {\r\n\t\ttry {\r\n\t\t\tif (message && message.recieved && !message.recieved.pushed) {\r\n\t\t\t\tif (pathname !== Routes.Client.ChatRoom) {\r\n\t\t\t\t\tif (pathname !== Routes.Client.GameDeck) {\r\n\t\t\t\t\t\t// then just only push when message sender is the opponent\r\n\t\t\t\t\t\t//return;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tNewMsg(message.recieved);\r\n\t\t\t\t\t//prevent recieved message from getting stuck in notificatioon loop\r\n\t\t\t\t\tdispatch(MessagePushed());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (gameInvitation) {\r\n\t\t\t\tInvitation(\r\n\t\t\t\t\tgameInvitation,\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tdispatch(AcceptInvitation(gameInvitation.ID));\r\n\t\t\t\t\t},\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tdispatch(RejectGameInvitation());\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tconst decoded_token = jwtdecode(browserStorage.TOKEN());\r\n\r\n\t\t\tconst toMin = (mili) => mili / 1000 / 60;\r\n\t\t\tif (decoded_token) {\r\n\t\t\t\tconst { exp, iat } = decoded_token;\r\n\t\t\t\tconst expirationLength = (exp - iat) / 60;\r\n\t\t\t\tconst criticalNow = toMin(Date.now()) + expirationLength / 4;\r\n\t\t\t\t// ex: expiration is at 60 min\r\n\t\t\t\t// after converting all values to minutes\r\n\t\t\t\t// critical point is about 15 minutes to expiration\r\n\t\t\t\t// so if toMin(now) + 15min passes expiration date -> inform user to take action\r\n\t\t\t\tif (criticalNow >= exp / 60) {\r\n\t\t\t\t\tAttention(\r\n\t\t\t\t\t\t\"نشست شما در شرف انقضاست ... برای پیش گیری از بروز مشکل لطفا دوباره وارد حساب خود شوید\"\r\n\t\t\t\t\t);\r\n\t\t\t\t\t// ...some action\r\n\t\t\t\t\t// implement onClick for this toast\r\n\t\t\t\t\t// like rerouting to sing in model and etc\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t}, [message, pathname, gameInvitation, dispatch]);\r\n\r\n\treturn null;\r\n};\r\n\r\nexport default withRouter(NotificationCenter);\r\n","export const UpdateStatistics = (players, games) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\tawait dispatch({\r\n\t\t\ttype: \"UPDATE_STATISTICS\",\r\n\t\t\tpayload: { players, games },\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport const MessagePushed = () => {\r\n\treturn async (dispatch) => {\r\n\t\tawait dispatch({ type: \"MEESAGE_PUSHED\" });\r\n\t};\r\n};\r\n\r\nexport const ResetMessages = () => {\r\n\treturn async (dispatch) => {\r\n\t\tawait dispatch({ type: \"RESET_MESSAGES\" });\r\n\t};\r\n};","import { createContext } from \"react\";\r\n\r\nconst GlobalContext = createContext({\r\n    device: 0,\r\n    signOut: () => {}\r\n});\r\n\r\nexport default GlobalContext;","export const EnterRoom = (room) => {\r\n\treturn async (dispatch) => {\r\n\t\tawait dispatch({\r\n\t\t\ttype: \"ENTER_ROOM\",\r\n\t\t\tpayload: room,\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport const ExitRoom = () => {\r\n\treturn async (dispatch) => {\r\n\t\tawait dispatch({\r\n\t\t\ttype: \"EXIT_ROOM\",\r\n\t\t});\r\n\t};\r\n};\r\n\r\nexport const CleanScoreboard = () => {\r\n\treturn async (dispatch) => {\r\n\t\tawait dispatch({ type: \"CLEAN_SCOREBOARD\" });\r\n\t};\r\n};\r\n\r\nexport const UpdateScoreboard = (details) => {\r\n\treturn async (dispatch) => {\r\n\t\tawait dispatch({\r\n\t\t\ttype: \"UPDATE_SCOREBOARD\",\r\n\t\t\tpayload: details,\r\n\t\t});\r\n\t};\r\n};\r\n\r\n/*export const SetGameID = (gameID) => {\r\n\treturn async (dispatch) => {\r\n\t\tawait dispatch({\r\n\t\t\ttype: \"SET_GAME_ID\",\r\n\t\t\tpayload: gameID,\r\n\t\t});\r\n\t};\r\n};*/\r\n","import { browserStorage, Routes } from \"../configs\";\r\nimport { Fragment, useCallback, useContext, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { UpdateStatistics, ResetMessages } from \"../../globals/redux/actions\";\r\nimport { RecieveMessageFrom } from \"../../globals/redux/actions/message\";\r\nimport { Modal, Button, Row, Col, Badge } from \"react-bootstrap\";\r\nimport { Attention, OK, Sorry } from \"../../tools/notification\";\r\nimport NotificationCenter from \"../../tools/NotificationCenter\";\r\nimport GlobalContext from \"./../../globals/state/GlobalContext\";\r\nimport {\r\n\tEndFriendlyInvitation,\r\n\tEndFriendRequest,\r\n\tRecieveGameInvitation,\r\n\tTriggerRandomSearch,\r\n} from \"./../../globals/redux/actions/tools\";\r\nimport { EnterRoom } from \"../../globals/redux/actions/game\";\r\nconst GlobalSocketManager = () => {\r\n\t// I actually used .jsx format to make this Component EventBased\r\n\t// On Each event called socket will do some specific operation\r\n\t// events are actually useEffects bound to special state changes\r\n\tconst context = useContext(GlobalContext);\r\n\tconst [socketGlobal, setSocketGlobal] = useState(null);\r\n\tconst [incommingFriendRequest, setIncommingFriendRequest] = useState(null);\r\n\tconst [showFriendshipModal, setShowFriendshipModal] = useState(false);\r\n\tconst me = useSelector((state) => state.me);\r\n\tconst tools = useSelector((state) => state.tools);\r\n\tconst room = useSelector((state) => state.room);\r\n\tconst message = useSelector((state) => state.message);\r\n\tconst [clientOnline, toggleClientOnline] = useState(true);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst pack = useCallback((request, msg = null) => {\r\n\t\treturn JSON.stringify({\r\n\t\t\ttoken: browserStorage.TOKEN(),\r\n\t\t\trequest,\r\n\t\t\tmsg,\r\n\t\t});\r\n\t}, []);\r\n\r\n\tconst enableGlobalTimer = useCallback(() => {\r\n\t\treturn setInterval(() => {\r\n\t\t\tif (socketGlobal) socketGlobal.send(pack(\"online\"));\r\n\t\t}, 300000); // every 5 MINUTES request number of online members to update the site\r\n\t}, [pack, socketGlobal]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log(\"global timer enabled\");\r\n\t\tconst timerID = enableGlobalTimer();\r\n\t\treturn () => {\r\n\t\t\tconsole.log(\"global timer disabled\");\r\n\t\t\tclearInterval(timerID);\r\n\t\t};\r\n\t}, [enableGlobalTimer]);\r\n\r\n\tconst { signOut, redirectToGamePlay } = context;\r\n\tconst iamSignedIn = me && me.userID;\r\n\r\n\tconst connect = useCallback(() => {\r\n\t\tconsole.log(\"global websocket connect called -> new socket returned\");\r\n\t\tif (!iamSignedIn) return null; //to make sure just site user trigger this connection\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\ttry {\r\n\t\t\t\tvar socket = new WebSocket(\r\n\t\t\t\t\t`${Routes.Server.WebSocketRoot}/${Routes.Server.wsGlobalRoute}`\r\n\t\t\t\t);\r\n\t\t\t\tsocket.onopen = () => {\r\n\t\t\t\t\tsocket.send(pack(\"online\")); //temp\r\n\t\t\t\t\tresolve(socket);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsocket.onmessage = (response) => {\r\n\t\t\t\t\tconst { data } = response;\r\n\t\t\t\t\tconst { command, msg } = JSON.parse(data);\r\n\t\t\t\t\tswitch (command) {\r\n\t\t\t\t\t\tcase \"ONLINE\": {\r\n\t\t\t\t\t\t\tconst { players, games } = msg;\r\n\t\t\t\t\t\t\tdispatch(UpdateStatistics(players, games)); //playing temp\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"NOT_AUTHORIZED\": {\r\n\t\t\t\t\t\t\tSorry(\r\n\t\t\t\t\t\t\t\t\"نشست شما منقضی شده، لطفا دوباره وارد حساب کاربری خود شوید\"\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tsignOut();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"FIND_RESULT\": {\r\n\t\t\t\t\t\t\t//response from random game request\r\n\t\t\t\t\t\t\tif (msg) {\r\n\t\t\t\t\t\t\t\tdispatch(EnterRoom(msg));\r\n\t\t\t\t\t\t\t\tsocket.send(pack(\"online\"));\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t//search again 5s later\r\n\t\t\t\t\t\t\t\t// **********************\r\n\t\t\t\t\t\t\t\t//time out must be set with rising time out time to prevent server getting fucked up\r\n\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\tdispatch(TriggerRandomSearch());\r\n\t\t\t\t\t\t\t\t}, 5000);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"FRIENDSHIP_REQUEST\": {\r\n\t\t\t\t\t\t\t//if (msg.askerID === opponentID) {\r\n\t\t\t\t\t\t\t//if both mes are in game then ask immidiately\r\n\t\t\t\t\t\t\tsetIncommingFriendRequest(msg);\r\n\t\t\t\t\t\t\tsetShowFriendshipModal(true);\r\n\r\n\t\t\t\t\t\t\t/*else {\r\n\t\t\t\t\t\t\t\t//if the friend request is comming from some one else then manage it differently\r\n\t\t\t\t\t\t\t\t//...\r\n\t\t\t\t\t\t\t}*/\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"FRIENDSHIP_RESPONSE\": {\r\n\t\t\t\t\t\t\tconst { answer, targetName } = msg;\r\n\t\t\t\t\t\t\t//if(answer) dispatch(TriggerRecordUpdate());\r\n\t\t\t\t\t\t\tif (answer)\r\n\t\t\t\t\t\t\t\tOK(`${targetName} درخواست دوستی شما را پذیرفت`);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tAttention(\r\n\t\t\t\t\t\t\t\t\t`${targetName} درخواست دوستی شما را رد کرد`\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tdispatch(EndFriendRequest());\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"TARGET_OFFLINE\": {\r\n\t\t\t\t\t\t\t//... while chatting or game request\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"TARGET_BUSY\": {\r\n\t\t\t\t\t\t\t//... while chatting or game request\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"FRIENDLY_GAME\": {\r\n\t\t\t\t\t\t\t// ... trigger and show responding form\r\n\t\t\t\t\t\t\tconst {askerID, askerName} = msg;\r\n\t\t\t\t\t\t\tdispatch(RecieveGameInvitation(askerID, askerName));\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"INVITATION_ACCEPTED\": {\r\n\t\t\t\t\t\t\t// ... friend responded to your request\r\n\t\t\t\t\t\t\t// ... if true -> room info has ben sent to you\r\n\t\t\t\t\t\t\t// needed to check room state? done in server\r\n\t\t\t\t\t\t\tdispatch(EndFriendlyInvitation()); \r\n\t\t\t\t\t\t\tredirectToGamePlay(msg);//msg -> room\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcase \"CHAT\": {\r\n\t\t\t\t\t\t\tdispatch(\r\n\t\t\t\t\t\t\t\tRecieveMessageFrom(\r\n\t\t\t\t\t\t\t\t\tmsg.name,\r\n\t\t\t\t\t\t\t\t\tmsg.friendID,\r\n\t\t\t\t\t\t\t\t\tmsg.text\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t//... whatever\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresolve(socket);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsocket.onerror = (error) => {\r\n\t\t\t\t\tsocket.close();\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tsocket.onclose = () => {\r\n\t\t\t\t\t// reconnectr or what?\r\n\t\t\t\t\tconsole.log(\"Reconnecting in  5 seconds\");\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t(async () => {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tlet socket = iamSignedIn\r\n\t\t\t\t\t\t\t\t\t? await connect()\r\n\t\t\t\t\t\t\t\t\t: null;\r\n\t\t\t\t\t\t\t\tsetSocketGlobal(socket);\r\n\t\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})();\r\n\t\t\t\t\t}, 5000);\r\n\t\t\t\t\tresolve(null);\r\n\t\t\t\t\t// this part needs editing ? maybe not\r\n\t\t\t\t};\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(`global websocket errpr: ${err}`);\r\n\t\t\t}\r\n\t\t});\r\n\t}, [dispatch, signOut, redirectToGamePlay, pack, iamSignedIn]);\r\n\r\n\t// EVENT NAME: PlayerUpdateEvent\r\n\t// happens when player sign in status changes => set ups global socket connection and then if signed in=> reads number of online users in page\r\n\tuseEffect(() => {\r\n\t\t//updates every time record changes or common user data changes, good or what?\r\n\t\tif (clientOnline && iamSignedIn) {\r\n\t\t\t(async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlet socket = iamSignedIn ? await connect() : null;\r\n\t\t\t\t\tsetSocketGlobal(socket);\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t}\r\n\t\t\t})();\r\n\t\t}\r\n\t}, [clientOnline, iamSignedIn, connect]);\r\n\r\n\tconst { fullname } = me ? me : { fullname: null };\r\n\tconst {\r\n\t\tfriendRequestTarget,\r\n\t\tfriendlyGameTarget,\r\n\t\trandomSearchTriggered,\r\n\t\tacceptedInviter,\r\n\t} = tools;\r\n\t// EVENT NAME: RandomGameInitiated Event\r\n\t// happens when user clicks on 'Random Game\" Tab search button => sends opponent search request to server\r\n\tuseEffect(() => {\r\n\t\tconsole.log(room);\r\n\t\tif (room.type) {\r\n\t\t\t//is it necessary?\r\n\t\t\t//completely making sure we're on right stage\r\n\t\t\tif (!room.name && iamSignedIn && socketGlobal)\r\n\t\t\t\tsocketGlobal.send(pack(\"find\", room.type));\r\n\t\t} else if (!room.name) {\r\n\t\t\t//room --> {null,null} --> means room has been reset hand u need to remove\r\n\t\t\tif (socketGlobal) socketGlobal.send(pack(\"close_game\"));\r\n\t\t}\r\n\t}, [iamSignedIn, room, randomSearchTriggered, socketGlobal, pack]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (friendRequestTarget) {\r\n\t\t\t//friendRequestTarget either contains null => no request, or contains target ID for friendship\r\n\t\t\tif (socketGlobal)\r\n\t\t\t\tsocketGlobal.send(\r\n\t\t\t\t\tpack(\"friendship\", {\r\n\t\t\t\t\t\ttargetID: friendRequestTarget,\r\n\t\t\t\t\t\taskerName: fullname,\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t}\r\n\t\tif (acceptedInviter) {\r\n\t\t\tif (socketGlobal)\r\n\t\t\t\tsocketGlobal.send(pack(\"respond_friendlygame\", {\r\n\t\t\t\t\tanswer: true,\r\n\t\t\t\t\tinviterID: acceptedInviter,\r\n\t\t\t\t}));\r\n\t\t} else if (friendlyGameTarget) {\r\n\t\t\tif (socketGlobal)\r\n\t\t\t\tsocketGlobal.send(\r\n\t\t\t\t\tpack(\"friendly_game\", {\r\n\t\t\t\t\t\ttargetID: friendlyGameTarget,\r\n\t\t\t\t\t\taskerName: fullname,\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t}\r\n\t}, [\r\n\t\tfriendRequestTarget,\r\n\t\tfriendlyGameTarget,\r\n\t\tacceptedInviter,\r\n\t\tsocketGlobal,\r\n\t\tpack,\r\n\t\tfullname,\r\n\t]);\r\n\r\n\tconst respondToFriendshipRequest = (answer) => {\r\n\t\t// handle multiple requests *************\r\n\r\n\t\t//target reponds to requester\r\n\t\tif (socketGlobal)\r\n\t\t\tsocketGlobal.send(\r\n\t\t\t\tpack(\"respond_friendship\", {\r\n\t\t\t\t\tanswer,\r\n\t\t\t\t\ttargetName: me.fullname,\r\n\t\t\t\t\taskerID: incommingFriendRequest.askerID,\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t// if(answer) dispatch(TriggerRecordUpdate());\r\n\t\tsetShowFriendshipModal(false);\r\n\t\tsetIncommingFriendRequest(null);\r\n\t\t// dispatch(SendFriendRequestTo(null)); //reset friend request targetID to prevent any future problm\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (message.sent && socketGlobal) {\r\n\t\t\t//if destination is determined, otherwise => means no message has been sent\r\n\t\t\tsocketGlobal.send(pack(\"chat\", message.sent));\r\n\t\t\tdispatch(ResetMessages());\r\n\t\t}\r\n\t}, [message.sent, socketGlobal, pack, dispatch]);\r\n\r\n\t// if online status changes\r\n\tsetInterval(() => {\r\n\t\tif (window.navigator.onLine) {\r\n\t\t\t//client online\r\n\t\t\tif (!clientOnline)\r\n\t\t\t\t//this means -> client JUST became online\r\n\t\t\t\ttoggleClientOnline(true); //change connection status\r\n\t\t} else {\r\n\t\t\t// clients offline\r\n\t\t\tif (clientOnline)\r\n\t\t\t\t//this means -> client JUST became offline now\r\n\t\t\t\ttoggleClientOnline(false); //change connection status\r\n\t\t}\r\n\t}, 5000);\r\n\r\n\t// is it really necessary though ?????\r\n\t// move UI to notification center\r\n\treturn (\r\n\t\t//this is just for firendship request in games\r\n\t\t<Fragment>\r\n\t\t\t<NotificationCenter />\r\n\t\t\t<Modal\r\n\t\t\t\tshow={showFriendshipModal}\r\n\t\t\t\tonHide={() => respondToFriendshipRequest(false)}>\r\n\t\t\t\t<Modal.Header closeButton />\r\n\t\t\t\t<Modal.Body className=\"text-right\">\r\n\t\t\t\t\t<p>\r\n\t\t\t\t\t\t{!incommingFriendRequest ? null : (\r\n\t\t\t\t\t\t\t<Badge\r\n\t\t\t\t\t\t\t\tstyle={{ fontSize: \"18px\", margin: \"2%\" }}\r\n\t\t\t\t\t\t\t\tpill\r\n\t\t\t\t\t\t\t\tvariant=\"warning\">\r\n\t\t\t\t\t\t\t\t{incommingFriendRequest.askerName}\r\n\t\t\t\t\t\t\t</Badge>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\tبه شما پیشنهاد دوستی داده است.\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<p>اگر تمایل به دوستی ندارید میتواند درخواست را رد کنید.</p>\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer className=\"w-100 text-right\">\r\n\t\t\t\t\t<Row className=\"w-100\">\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"success\"\r\n\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\trespondToFriendshipRequest(true)\r\n\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\tپذیرفتن\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\tvariant=\"danger\"\r\n\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\trespondToFriendshipRequest(false)\r\n\t\t\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t\t\tرد\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default GlobalSocketManager;\r\n","import { Status } from \"../../../services/configs\";\r\nimport userServices from \"./../../../services/http/userServices\";\r\n\r\nexport const ResetOpponent = () =>{\r\n    return async (dispatch) => {\r\n        await dispatch({type: \"RESET_OPPONENT\"})\r\n    }\r\n}\r\n\r\nexport const ResetMyPlayer = () => {\r\n    return async (dispatch) => {\r\n        await dispatch({ type: \"RESET_MINE\" });\r\n    };\r\n};\r\n\r\nexport const LoadThisPlayer = (userID) => {\r\n\treturn async (dispatch) => {\r\n\t\tif (userID) {\r\n\t\t\ttry {\r\n\t\t\t\tconst { data, status } = await userServices.getPlayer(userID);\r\n\t\t\t\tif (status === Status.Successful) {\r\n\t\t\t\t\tconst { player } = data;\r\n\t\t\t\t\tawait dispatch({ type: \"LOAD_OPPONENT\", payload: player });\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\t// ... toast proper message?\r\n\t\t\t\tawait dispatch(ResetOpponent());\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// ...propere message\r\n\t\t\tawait dispatch(ResetOpponent());\r\n\t\t}\r\n\t};\r\n};\r\n\r\nexport const LoadMyPlayer = () => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tconst { data, status } = await userServices.getMe();\r\n\t\t\tif (status === Status.Successful) {\r\n\t\t\t\tconst { player } = data;\r\n\t\t\t\tawait dispatch({ type: \"LOAD_MINE\", payload: player });\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\t// ... toast proper message?\r\n\t\t\tawait dispatch(ResetMyPlayer());\r\n\t\t}\r\n\t};\r\n};\r\n","import { useDispatch } from \"react-redux\";\r\nimport { browserStorage } from \"../services/configs\";\r\nimport { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { LoadMyPlayer } from \"../globals/redux/actions/player\";\r\nimport { ResetMyPlayer } from './../globals/redux/actions/player';\r\n\r\n// auto-sign in if store sign in data was reset\r\nconst AutoSignIn = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst opponent = useSelector((state) => state.opponent); //this is just to add opponent to useEffect dependencies\r\n\t// tis way, every time player game ends ( opponent resets ), player records will update\r\n\tconst storageToken = browserStorage.TOKEN();\r\n\tuseEffect(() => {\r\n\t\tif (storageToken) {\r\n\t\t\tconsole.log(`auth called then `);\r\n\t\t\tdispatch(LoadMyPlayer());\r\n\t\t} else {\r\n\t\t\tdispatch(ResetMyPlayer());\r\n\t\t}\r\n\t}, [storageToken, opponent, dispatch]);\r\n\r\n\treturn null;\r\n};\r\n\r\nexport default AutoSignIn;\r\n","import SignInSideBar from \"../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment, useState, useEffect, useContext } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport GlobalSocketManager from \"../services/ws/GlobalSocketManager\";\r\nimport { Devices, Routes } from \"../services/configs\";\r\nimport AutoSignIn from \"../users/AutoSignIn\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\n\r\nconst MainLayout = (props) => {\r\n\tconst context = useContext(GlobalContext);\r\n\tconst { pathname } = props.location;\r\n\t//redux\r\n\tconst me = useSelector((state) => state.me);\r\n\tconst opponent = useSelector((state) => state.opponent);\r\n\r\n\tconst [leftSideBar, setLeftSideBar] = useState(null);\r\n\tconst [rightSideBar, setRightSideBar] = useState(null);\r\n\tuseEffect(() => {\r\n\t\tsetLeftSideBar(<NoticeSideBar />);\r\n\t}, []);\r\n\r\n\t//teste\r\n\t//determine sidebar\r\n\tconst {device} = context;\r\n\tuseEffect(() => {\r\n\t\tconsole.log(\"sidebar manager called\");\r\n\t\tconst setPrimaryRightSideBar = () => {\r\n\t\t\tif (device !== Devices.Tablet)\r\n\t\t\t\tsetRightSideBar(\r\n\t\t\t\t\tme ? <PlayerInfoSideBar /> : <SignInSideBar />\r\n\t\t\t\t);\r\n\t\t\telse setRightSideBar(null);\r\n\t\t};\r\n\t\tif (pathname === Routes.Client.SignUp) {\r\n\t\t\tsetRightSideBar(null);\r\n\t\t\tsetLeftSideBar(null);\r\n\t\t} else if (pathname === Routes.Client.GameDeck) {\r\n\t\t\t// EDIT THIS..\r\n\t\t\t// ON REFRESH -> rightSideBar is null!\r\n\t\t\t// SOMETIMES: ERROR: cannout read .fullname of undefined person\r\n\t\t\tsetPrimaryRightSideBar();\r\n\t\t\tif (opponent) {\r\n\t\t\t\tif (device !== Devices.SmartPhone) {\r\n\t\t\t\t\tsetLeftSideBar(<PlayerInfoSideBar person={opponent} />);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetLeftSideBar(null);\r\n\t\t\t\t\tsetRightSideBar(null);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsetLeftSideBar(<NoticeSideBar />); //EDIT THIS\r\n\t\t\tsetPrimaryRightSideBar();\r\n\t\t}\r\n\t}, [me, opponent, pathname, device]);\r\n\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<AutoSignIn />\r\n\t\t\t{me && <GlobalSocketManager />}\r\n\r\n\t\t\t{context.device !== Devices.SmartPhone ? (\r\n\t\t\t\t<Row className=\"w-100 mx-auto\">\r\n\t\t\t\t\t{rightSideBar && <Col xs={3}>{rightSideBar}</Col>}\r\n\t\t\t\t\t<Col\r\n\t\t\t\t\t\tclassName=\"mx-auto\"\r\n\t\t\t\t\t\txs={pathname !== Routes.Client.SignUp ? null : 7}>\r\n\t\t\t\t\t\t{props.children}\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t{leftSideBar && (\r\n\t\t\t\t\t\t<Col xs={context.device !== Devices.Tablet ? 3 : 4}>\r\n\t\t\t\t\t\t\t{leftSideBar}\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Row>\r\n\t\t\t) : (\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t{/* what to do for control panelk sidebar in smartphone */}\r\n\t\t\t\t\t{me ? (\r\n\t\t\t\t\t\t<Row className=\"w-100 mx-auto\">{rightSideBar}</Row>\r\n\t\t\t\t\t) : null}\r\n\t\t\t\t\t<Row className=\"w-100 mx-auto\">{leftSideBar}</Row>\r\n\t\t\t\t\t<Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t)}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"5px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n            <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                <thead className=\"bg-info\">\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">نام بازیکن</th>\r\n                        <th scope=\"col\">امتیاز</th>\r\n                        <th scope=\"col\">تعداد برد</th>\r\n                        <th scope=\"col\">تعداد باخت</th>\r\n                        <th scope=\"col\">تعداد تساوی</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {players.map((player) => (\r\n                        <SinglePlayerCard\r\n                            key={player.userID}\r\n                            rowNumber={\r\n                                players.findIndex(\r\n                                    (p) => p.userID === player.userID\r\n                                ) + 1\r\n                            }\r\n                            name={player.fullname}\r\n                            points={player.records.points}\r\n                            wins={player.records.wins}\r\n                            loses={player.records.loses}\r\n                            draws={player.records.draws}></SinglePlayerCard>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport LoadingBar from \"../../commons/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <Row className=\"mx-auto mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <AllPlayers players={players} />\r\n                </Row>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import {browserStorage, Routes} from '../configs';\r\n\r\nexport const createSocketRequest = (request, rname, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        rname,\r\n        playerID,\r\n        token: browserStorage.TOKEN(),\r\n        msg,\r\n    });\r\n\r\nexport const connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(`${Routes.Server.WebSocketRoot}/${Routes.Server.wsGamePlayRoute}`);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            \r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport { UpdateScoreboard, CleanScoreboard } from \"./actions/game\";\r\nimport { LoadThisPlayer, ResetOpponent } from \"./actions/player\";\r\nimport { EnterRoom, ExitRoom } from \"./actions/game\";\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n\tconst mapStateToProps = (state) => ({\r\n\t\tme: state.me,\r\n\t\topponent: state.opponent,\r\n\t\troom: state.room,\r\n\t\tscoreboard: state.scoreboard,\r\n\t\ttools: state.tools,\r\n\t});\r\n\r\n\tconst mapDispatchToProps = (dispatch) => ({\r\n\t\tLoadThisPlayer: (userID) => dispatch(LoadThisPlayer(userID)),\r\n\t\tResetOpponent: () => dispatch(ResetOpponent()),\r\n\t\tEnterRoom: (room) => dispatch(EnterRoom(room)),\r\n\t\tExitRoom: () => dispatch(ExitRoom()),\r\n\t\t// SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n\t\tUpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n\t\tCleanScoreboard: () => dispatch(CleanScoreboard()),\r\n\t});\r\n\treturn connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n","import { Card, Col, Row } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { GameSetting } from \"../../services/configs\";\r\n\r\nconst BriefScoreboard = ({ timeRemaining, players }) => {\r\n    const [timeStamp, setTimeStamp] = useState(null);\r\n    const aThird = GameSetting.T3D.TurnTimeOut / 3;\r\n    useEffect(() => {\r\n        let color = null,\r\n            icon = null;\r\n        if (timeRemaining) {\r\n            if (timeRemaining >= aThird) {\r\n                color = \"text-success\";\r\n                icon = (\r\n                    <i className=\"fa fa-hourglass-start px-2\" aria-hidden=\"true\"></i>\r\n                );\r\n            } else {\r\n                color = \"text-danger\";\r\n                icon = (\r\n                    <i className=\"fa fa-hourglass-half px-2\" aria-hidden=\"true\"></i>\r\n                );\r\n            }\r\n        } else {\r\n            color = \"text-dark\";\r\n            icon = <i className=\"fa fa-hourglass-end px-2\" aria-hidden=\"true\"></i>;\r\n        }\r\n        setTimeStamp(<div className={color}>{icon}{timeRemaining}</div>);\r\n    }, [timeRemaining, aThird]);\r\n\r\n    return (\r\n        <Card.Header className=\"w-100 text-center\">\r\n            <Row style={{ fontSize: \"20px\" }}>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"right\",\r\n                        color: players[1].color,\r\n                    }}>\r\n                    {players[1].shape} : {players[1].score}\r\n                </Col>\r\n                <Col>{timeStamp}</Col>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        color: players[0].color,\r\n                    }}>\r\n                    {players[0].score} : {players[0].shape}\r\n                </Col>\r\n            </Row>\r\n        </Card.Header>\r\n    );\r\n};\r\n\r\nexport default BriefScoreboard;\r\n","import { Fragment } from \"react\";\r\nimport { Button, Card, Row } from \"react-bootstrap\";\r\nimport { GameSetting } from \"../../services/configs\";\r\nimport BriefScoreboard from \"./BriefScoreboard\";\r\nimport \"../games.css\";\r\n\r\nconst TableDesign = ({ timeRemaining, dimension, players, table, onEachCellClick,normalCell }) => {\r\n    let dimens = [];\r\n    for (let i = 0; i < dimension; i++) dimens.push(i);\r\n\r\n    //prop drilling in BriefScoreBoard\r\n    return (\r\n        <Card\r\n            bg=\"transparent\"\r\n            border=\"dark\"\r\n            className=\"w-100 mx-auto\">\r\n            <BriefScoreboard timeRemaining={timeRemaining} players={players} />\r\n            <Card.Body className=\"game-border-card\">\r\n                {table ? (\r\n                    dimens.map((floor) => (\r\n                        <Fragment>\r\n                            {dimens.map((row) => (\r\n                                <Row\r\n                                    style={{\r\n                                        direction: \"ltr\",\r\n                                        marginLeft: `${GameSetting.T3D.TableRowMargings[row]}px`,\r\n                                    }}>\r\n                                    {dimens.map((column) => (\r\n                                        <Button\r\n                                            key={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            variant={normalCell}\r\n                                            className=\"game-table-cells\"\r\n                                            style={\r\n                                                table[floor][row][column] !==\r\n                                                null\r\n                                                    ? {\r\n                                                          color: players[\r\n                                                              table[floor][row][\r\n                                                                  column\r\n                                                              ]\r\n                                                          ].color,\r\n                                                      }\r\n                                                    : null\r\n                                            }\r\n                                            id={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            onClick={(event) =>\r\n                                                onEachCellClick(event)\r\n                                            }>\r\n                                            {table[floor][row][column] !==\r\n                                                null &&\r\n                                                players[\r\n                                                    table[floor][row][column]\r\n                                                ].shape}\r\n                                        </Button>\r\n                                    ))}\r\n                                </Row>\r\n                            ))}\r\n                            <br />\r\n                        </Fragment>\r\n                    ))\r\n                ) : (\r\n                    <p className=\"text-center\"> در حال اتصال... </p>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TableDesign;\r\n","import { Component } from \"react\";\r\nimport \"../games.css\";\r\nimport {\r\n\tconnect,\r\n\tcreateSocketRequest,\r\n} from \"../../services/ws/gamePlaySocketServices\";\r\nimport withReduxDashboard from \"../../globals/redux/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\nimport TableDesign from \"./TableDesign\";\r\nimport { GameSetting } from \"../../services/configs\";\r\nimport { Attention, Notify } from \"../../tools/notification\";\r\nimport { toTimeShort } from \"../../tools/format\";\r\n\r\nclass GamePlay extends Component {\r\n\t//**** game resets on device change. fix it */\r\n\tstate = {\r\n\t\tnormalCell: \"outline-dark\",\r\n\t\tplayers: [\r\n\t\t\t{\r\n\t\t\t\t// ID: '',\r\n\t\t\t\tshape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n\t\t\t\tcolor: \"blue\",\r\n\t\t\t\tselected: \"warning\",\r\n\t\t\t\tlineColor: \"primary\",\r\n\t\t\t\tscore: 0,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t// ID: '',\r\n\t\t\t\tshape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n\t\t\t\tcolor: \"darkred\",\r\n\t\t\t\tselected: \"warning\",\r\n\t\t\t\tlineColor: \"danger\",\r\n\t\t\t\tscore: 0,\r\n\t\t\t},\r\n\t\t], // maybe use player actual user name and change this item to an object of objects?\r\n\t\tturn: 0, // start turn is decided by throwning dices\r\n\t\tdimension: 3,\r\n\t\ttable: null,\r\n\t\tmyTurn: undefined, // change this\r\n\t\tgameID: null,\r\n\t\tsocketGamePlay: undefined,\r\n\t\tplayerOnline: true,\r\n\t\ttimeRemaining: 0, //create a config\r\n\t\ttimerID: null,\r\n\t\tconnectionCheckTimerID: null,\r\n\t};\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.cellButtons = [];\r\n\t}\r\n\r\n\tupdateGameScorebaord = () => {\r\n\t\tconst { myTurn, players } = this.state;\r\n\t\tconst oppTurn = Number(!myTurn);\r\n\r\n\t\tthis.props.UpdateScoreboard({\r\n\t\t\tme: {\r\n\t\t\t\tindex: myTurn,\r\n\t\t\t\tshape: players[myTurn].shape,\r\n\t\t\t\tscore: players[myTurn].score,\r\n\t\t\t},\r\n\t\t\topp: {\r\n\t\t\t\tindex: oppTurn,\r\n\t\t\t\tshape: players[oppTurn].shape,\r\n\t\t\t\tscore: players[oppTurn].score,\r\n\t\t\t},\r\n\t\t});\r\n\t};\r\n\r\n\tenableTimerForMyMove = (timeout = GameSetting.T3D.TurnTimeOut) => {\r\n\t\tthis.setState({ timeRemaining: timeout });\r\n\t\t//is it needed to declare timerID as state?\r\n\t\tconst timerID = setInterval(() => {\r\n\t\t\tconst { timeRemaining, timerID } = this.state;\r\n\t\t\tif (timeRemaining <= 0) {\r\n\t\t\t\tclearInterval(timerID);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.setState({ timeRemaining: this.state.timeRemaining - 1 });\r\n\t\t}, 1000);\r\n\t\tthis.setState({ timerID });\r\n\t};\r\n\r\n\tupdatePlayerStates = ({ turn, xScore, oScore }) => {\r\n\t\tconst players = [...this.state.players];\r\n\t\tplayers[0].score = xScore;\r\n\t\tplayers[1].score = oScore;\r\n\t\tthis.setState({\r\n\t\t\tplayers,\r\n\t\t\tturn,\r\n\t\t});\r\n\t\tthis.updateGameScorebaord();\r\n\t};\r\n\r\n\tdisableAllTimers = () => {\r\n\t\tconst { connectionCheckTimerID, timerID } = this.state;\r\n\t\tclearTimeout(connectionCheckTimerID);\r\n\t\tclearTimeout(timerID); //move time out timer\r\n\t};\r\n\r\n\tsocketOnMessage = (response) => {\r\n\t\tconst { data } = response;\r\n\t\tconst { cmd, msg } = JSON.parse(data);\r\n\t\tif (cmd === \"START\") {\r\n\t\t\tconst startTime = toTimeShort(msg);\r\n\t\t\tAttention(`بازی راس ساعت ${startTime} آغاز شد.`);\r\n\t\t} else if (cmd === \"GAME\") {\r\n\t\t\tconst { IDs, dimension, myTurn } = msg;\r\n\t\t\tthis.setState({ dimension, myTurn });\r\n\t\t\tconst opponentID = IDs[Number(!myTurn)];\r\n\t\t\tconst { opponent, LoadThisPlayer } = this.props;\r\n\t\t\tif (!opponent && opponentID)  //if opponent is not null -> means this was called before and there's no need to run again\r\n\t\t\t\tLoadThisPlayer(opponentID);\r\n\t\t\t\r\n\t\t} else if (cmd === \"LOAD\") {\r\n\t\t\tthis.updatePlayerStates(msg);\r\n\t\t\tconst { table } = msg;\r\n\r\n\t\t\tthis.setState({\r\n\t\t\t\ttable,\r\n\t\t\t});\r\n\t\t\tthis.updateGameScorebaord();\r\n\t\t} else if (cmd === \"TIMER\") {\r\n\t\t\t//you can calculate request respone time -> then minimize it from tiem sent by server -> to gain acurate time\r\n\t\t\t//but its real neccessary, Math.floor on the server side does this nearly\r\n\t\t\t//but for accurate approach remember: remove Math.floor from server side\r\n\t\t\tconsole.log(\"time updated: \", msg);\r\n\t\t\tthis.setState({ timeRemaining: msg });\r\n\t\t\tclearTimeout(this.state.timerID); //clear move time out timers, though their disabled before, this is for assurance\r\n\t\t\tthis.enableTimerForMyMove(msg);\r\n\t\t} else if (cmd === \"SCORES\") this.updatePlayerStates(msg);\r\n\t\telse if (cmd === \"UPDATE\") {\r\n\t\t\tconst { me, room } = this.props;\r\n\t\t\tconst { dimension } = this.state;\r\n\t\t\tconst cellID = Number(msg.nextMove);\r\n\r\n\t\t\t//*************** */\r\n\t\t\t//is this needed to check the move in client? considering that complete check has been made in client\r\n\t\t\t//and consder that: checking move in client may cause some bugs\r\n\t\t\t//for ex: new move is sent -> and 'cause of some error the cell is not empty\r\n\t\t\t//turn is not updated and this player can not make new moves to recieve server's table!!!\r\n\t\t\tthis.verifyAndApplyTheMove(\r\n\t\t\t\tthis.getCellCoordinates(cellID, dimension),\r\n\t\t\t\tthis.cellButtons[cellID]\r\n\t\t\t);\r\n\t\t\t//wrap it up this part of UPDATE and LOAD in a method\r\n\t\t\tthis.updatePlayerStates(msg);\r\n\r\n\t\t\tthis.cellButtons[cellID].focus();\r\n\t\t\tthis.updateGameScorebaord();\r\n\r\n\t\t\t// now inform the server that the move is recieved\r\n\t\t\t//force connect it?\r\n\t\t\tthis.state.socketGamePlay.send(\r\n\t\t\t\tcreateSocketRequest(\r\n\t\t\t\t\t\"move_recieved\",\r\n\t\t\t\t\troom.name,\r\n\t\t\t\t\tme.userID,\r\n\t\t\t\t\ttrue\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\t// server time out is set and now setInterval for this client to show how much time left\r\n\t\t\tthis.enableTimerForMyMove();\r\n\t\t} else if (cmd === \"MOVE_MISSED\") {\r\n\t\t\tconst { myTurn } = this.state;\r\n\t\t\t//msg --> forced set turn\r\n\t\t\tthis.setState({ turn: msg });\r\n\t\t\tif (msg === myTurn) this.enableTimerForMyMove();\r\n\t\t} else if (cmd === \"END\") {\r\n\t\t\tthis.updatePlayerStates(msg);\r\n\t\t\tthis.endThisGame();\r\n\t\t\tthis.disableAllTimers();\r\n\t\t} else if (cmd === \"CLOSE\") {\r\n\t\t\tAttention(\r\n\t\t\t\t\"بدلیل حاضر نبودن هیچ کدام از بازیکینان، بازی شما کنسل شد\"\r\n\t\t\t);\r\n\t\t\tthis.closeThisGame();\r\n\t\t} else {\r\n\t\t\tconsole.log(\"wrong socket request\");\r\n\t\t}\r\n\t};\r\n\r\n\tforceConnectWS = async (nextJob) => {\r\n\t\tconst { me, room } = this.props;\r\n\r\n\t\ttry {\r\n\t\t\tlet socket = await connect(room.name, me.userID, room.type);\r\n\t\t\tsocket.onmessage = this.socketOnMessage;\r\n\t\t\tthis.setState({ socketGamePlay: socket });\r\n\t\t\tif (nextJob) nextJob();\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t\t// **********************\r\n\t\t\t//time out must be set with rising time out time to prevent server getting fucked up\r\n\t\t\tsetTimeout(\r\n\t\t\t\t() => {\r\n\t\t\t\t\tconsole.log(\"rconnecting from GamePlay\");\r\n\t\t\t\t\tthis.forceConnectWS(nextJob);\r\n\t\t\t\t},\r\n\t\t\t\tnextJob ? 1000 : 3000\r\n\t\t\t);\r\n\t\t\t//if there is a next job --> then player is sending a move or something important and\r\n\t\t\t//time out needs to be called quicker 'cause players have timeout in serimport { LoadPlayer } from './../../globals/redux/actions/player';\r\n\t\t\t//time out needs to be called quicker 'cause players have timeout in server for sending moves\r\n\t\t}\r\n\t};\r\n\r\n\tenableConnectionCheckTimer = () => {\r\n\t\treturn setInterval(() => {\r\n\t\t\tif (window.navigator.onLine) {\r\n\t\t\t\tif (!this.state.playerOnline) {\r\n\t\t\t\t\t//player JUST became online\r\n\t\t\t\t\tthis.setState({ playerOnline: true }); // toggle online status\r\n\t\t\t\t\tthis.forceConnectWS(null); // reconnect to gamePlayWebSocket\r\n\t\t\t\t}\r\n\t\t\t} else if (this.state.playerOnline) {\r\n\t\t\t\t//player JUST became offline\r\n\t\t\t\tthis.setState({ playerOnline: false });\r\n\t\t\t}\r\n\t\t}, 2500); //2.5 sec is it ok?\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.cellButtons = document.getElementsByClassName(\"game-table-cells\"); // pay attension to searched className! may cause an error\r\n\r\n\t\tconst { me, room } = this.props;\r\n\t\tconst { myTurn } = this.state;\r\n\t\tthis.setState({ dimension: room.type });\r\n\r\n\t\tthis.forceConnectWS(() => {\r\n\t\t\tthis.state.socketGamePlay.send(\r\n\t\t\t\tcreateSocketRequest(\"load\", room.name, me.userID, null)\r\n\t\t\t);\r\n\t\t\tthis.state.socketGamePlay.send(\r\n\t\t\t\tcreateSocketRequest(\"mytimer\", room.name, me.userID, myTurn)\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\tthis.setState({\r\n\t\t\tconnectionCheckTimerID: this.enableConnectionCheckTimer(),\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.disableAllTimers();\r\n\t}\r\n\tgetCellCoordinates = (cellID, dimen) => {\r\n\t\tconst cellFloor = Math.floor(cellID / (dimen * dimen));\r\n\t\tconst onFloorId = cellID % (dimen * dimen);\r\n\t\tconst cellRow = Math.floor(onFloorId / dimen);\r\n\t\tconst cellColumn = onFloorId % dimen;\r\n\t\t// just test a random id to see how above formula works!\r\n\t\treturn { floor: cellFloor, row: cellRow, column: cellColumn };\r\n\t};\r\n\tonEachCellClick = (event) => {\r\n\t\tconst { dimension, turn, timerID } = this.state;\r\n\t\tconst { me, opponent, room } = this.props;\r\n\t\tif (opponent) {\r\n\t\t\ttry {\r\n\t\t\t\tconst selectedCellButton = event.target;\r\n\r\n\t\t\t\t//this is just for when the connection is not automatically came back, so the user via clicking cells can initiate connection\r\n\t\t\t\tif (this.state.turn !== this.state.myTurn) {\r\n\t\t\t\t\t//is this needed really?\r\n\t\t\t\t\tthis.forceConnectWS(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst cell = this.getCellCoordinates(\r\n\t\t\t\t\tselectedCellButton.id,\r\n\t\t\t\t\tdimension\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n\t\t\t\t\t//send move to WebSocket Server\r\n\r\n\t\t\t\t\tthis.setState({ turn: (turn + 1) % 2 });\r\n\t\t\t\t\tthis.forceConnectWS(() => {\r\n\t\t\t\t\t\tthis.state.socketGamePlay.send(\r\n\t\t\t\t\t\t\tcreateSocketRequest(\r\n\t\t\t\t\t\t\t\t\"move\",\r\n\t\t\t\t\t\t\t\troom.name,\r\n\t\t\t\t\t\t\t\tme.userID,\r\n\t\t\t\t\t\t\t\tselectedCellButton.id\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tclearInterval(timerID);\r\n\t\t\t\t\tthis.setState({ timeRemaining: 0 });\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\t//load again here?\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tverifyAndApplyTheMove = (cell, cellButton) => {\r\n\t\tconst { players, turn, normalCell } = this.state;\r\n\t\tlet tempTable = [...this.state.table];\r\n\t\tif (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n\t\t\ttempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n\t\t\tthis.setState({ table: tempTable });\r\n\t\t\t// cellButton.value = players[turn].shape;\r\n\t\t\t// cellButton.style.color = players[turn].color;\r\n\t\t\tcellButton.className = `game-table-cells btn btn-${players[turn].selected}`;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tcellButton.className = `game-table-cells btn btn-${normalCell}`;\r\n\t\t\t}, 1000);\r\n\t\t\t// time to inspect the new cell:\r\n\t\t\tthis.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tinspectAreaAroundTheCell = (floor, row, column) => {\r\n\t\t// inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n\t\t// is it needed to write a inspectAll method ?\r\n\t\tconst { players, table, dimension } = this.state;\r\n\t\tconst playerInTheCell = table[floor][row][column];\r\n\t\tlet rowCount = 0,\r\n\t\t\tcolumnCount = 0,\r\n\t\t\tfloorMainDiagCount = 0,\r\n\t\t\tfloorSideDiagCount = 0;\r\n\t\tlet tableMainDiagCount = 0,\r\n\t\t\ttableSideDiagCount = 0,\r\n\t\t\ttableAltitudeCount = 0;\r\n\t\tfor (let i = 0; i < dimension; i++) {\r\n\t\t\tif (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n\t\t\tif (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n\t\t\tif (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n\t\t\tif (row === column) {\r\n\t\t\t\tif (table[floor][i][i] === playerInTheCell)\r\n\t\t\t\t\tfloorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n\t\t\t\tif (row === floor && table[i][i][i] === playerInTheCell)\r\n\t\t\t\t\ttableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n\t\t\t}\r\n\t\t\tif (row + column + 1 === dimension) {\r\n\t\t\t\tif (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n\t\t\t\t\tfloorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n\t\t\t\tif (\r\n\t\t\t\t\trow === floor &&\r\n\t\t\t\t\ttable[i][i][dimension - i - 1] === playerInTheCell\r\n\t\t\t\t)\r\n\t\t\t\t\ttableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// now inspect wether a line has been made and take action for it\r\n\t\tthis.connectTheScoreLines(\r\n\t\t\trowCount,\r\n\t\t\tfloor * dimension * dimension + row * dimension,\r\n\t\t\t1,\r\n\t\t\tplayers[playerInTheCell],\r\n\t\t\tdimension\r\n\t\t);\r\n\t\tthis.connectTheScoreLines(\r\n\t\t\tcolumnCount,\r\n\t\t\tfloor * dimension * dimension + column,\r\n\t\t\tdimension,\r\n\t\t\tplayers[playerInTheCell],\r\n\t\t\tdimension\r\n\t\t);\r\n\t\tthis.connectTheScoreLines(\r\n\t\t\tfloorMainDiagCount,\r\n\t\t\tfloor * dimension * dimension,\r\n\t\t\tdimension + 1,\r\n\t\t\tplayers[playerInTheCell],\r\n\t\t\tdimension\r\n\t\t);\r\n\t\tthis.connectTheScoreLines(\r\n\t\t\tfloorSideDiagCount,\r\n\t\t\tfloor * dimension * dimension + (dimension - 1),\r\n\t\t\tdimension - 1,\r\n\t\t\tplayers[playerInTheCell],\r\n\t\t\tdimension\r\n\t\t);\r\n\t\tthis.connectTheScoreLines(\r\n\t\t\ttableMainDiagCount,\r\n\t\t\t0,\r\n\t\t\tdimension * (dimension + 1) + 1,\r\n\t\t\tplayers[playerInTheCell],\r\n\t\t\tdimension\r\n\t\t);\r\n\t\tthis.connectTheScoreLines(\r\n\t\t\ttableSideDiagCount,\r\n\t\t\tdimension - 1,\r\n\t\t\tdimension * (dimension + 1) - 1,\r\n\t\t\tplayers[playerInTheCell],\r\n\t\t\tdimension\r\n\t\t);\r\n\t\tthis.connectTheScoreLines(\r\n\t\t\ttableAltitudeCount,\r\n\t\t\trow * dimension + column,\r\n\t\t\tdimension * dimension,\r\n\t\t\tplayers[playerInTheCell],\r\n\t\t\tdimension\r\n\t\t);\r\n\t};\r\n\r\n\t// method below: checks each possible line(according to the condition that user gives it),\r\n\t// if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n\tconnectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n\t\tconst { normalCell } = this.state;\r\n\t\tif (count === dimension) {\r\n\t\t\tfor (let i = 0; i < dimension; i++) {\r\n\t\t\t\tthis.cellButtons[\r\n\t\t\t\t\tfirstCell + i * step\r\n\t\t\t\t].className = `game-table-cells btn btn-${player.lineColor}`;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.cellButtons[\r\n\t\t\t\t\t\tfirstCell + i * step\r\n\t\t\t\t\t].className = `game-table-cells btn btn-${normalCell}`;\r\n\t\t\t\t}, 1000 + i * 100);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tcloseThisGame = () => {\r\n\t\tthis.state.socketGamePlay.close();\r\n\t\tthis.setState({ socketGamePlay: null });\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.props.CleanScoreboard();\r\n\t\t\tthis.props.ResetOpponent();\r\n\t\t\tthis.props.ExitRoom();\r\n\t\t\tthis.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n\t\t}, 5000);\r\n\t};\r\n\r\n\tendThisGame = () => {\r\n\t\tconst { players, myTurn } = this.state;\r\n\t\tconst oppTurn = Number(!myTurn);\r\n\t\t//NOTE: u can deliver this message to socket global to make sure toast shows all the tie but its no need really :|\r\n\t\tif (players[myTurn].score > players[oppTurn].score)\r\n\t\t\tNotify(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n\t\telse if (players[myTurn].score === players[oppTurn].score)\r\n\t\t\tNotify(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n\t\telse Notify(\"شما باختید\");\r\n\t\t//reset everything:\r\n\t\tthis.closeThisGame();\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<TableDesign\r\n\t\t\t\tdimension={this.state.dimension}\r\n\t\t\t\tplayers={this.state.players}\r\n\t\t\t\ttable={this.state.table}\r\n\t\t\t\ttimeRemaining={this.state.timeRemaining}\r\n\t\t\t\tonEachCellClick={this.onEachCellClick}\r\n\t\t\t\tnormalCell={this.state.normalCell}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectWS(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectWS(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport LoadingBar from '../commons/LoadingBar';\r\nimport { Notify } from \"../tools/notification\";\r\nimport { TriggerRandomSearch } from \"../globals/redux/actions/tools\";\r\nimport { EnterRoom } from \"../globals/redux/actions/game\";\r\nconst SingleGame = ({ friendlyGame }) => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const me = useSelector((state) => state.me);\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        if (!me) {\r\n            Notify(\"ابتدا باید وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n        if (friendlyGame) dispatch(EnterRoom({ name: roomName, type: gameType }));\r\n        // random game:\r\n        else {\r\n            dispatch(EnterRoom({ name: null, type: gameType }));\r\n            dispatch(TriggerRandomSearch());\r\n            setSearching(true);\r\n        }\r\n    };\r\n\r\n    //on destroy\r\n    useEffect(() => {\r\n        return () => {\r\n            setSearching(false); //make sure preloader turns off\r\n         }\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <LoadingBar loading={searching} />\r\n            <hr />\r\n            <Form onSubmit={(event) => onStartGameClick(event)}>\r\n                <Form.Group className=\"form-inline\">\r\n                    <Form.Label className=\"w-25\">ابعاد جدول</Form.Label>\r\n                    <InputGroup\r\n                        style={{\r\n                            border: \"1px solid orange\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"2px\",\r\n                        }}>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"3\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)}\r\n                            />\r\n                            <InputGroup.Text>3 * 3 * 3</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"4\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)}\r\n                            />\r\n                            <InputGroup.Text>4 * 4 * 4</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"5\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)}\r\n                            />\r\n                            <InputGroup.Text>5 * 5 * 5</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <hr />\r\n                {friendlyGame && (\r\n                    \r\n                    <Form.Group className=\"mt-3 form-inline\">\r\n                        \r\n                        <Form.Label className=\"w-25\">نام روم</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"w-75 text-left bg-transparent\"\r\n                            placeholder=\"Room Name\"\r\n                            value={roomName}\r\n                            required=\"required\"\r\n                            onChange={(event) =>\r\n                                setRoomName(event.target.value)\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                )}\r\n                <hr />\r\n                <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                    <i\r\n                        className={`fa ${\r\n                            friendlyGame ? \"fa-handshake-o\" : \"fa-search\"\r\n                        } px-2`}\r\n                        aria-hidden=\"true\"></i>\r\n                    {friendlyGame ? \"ارسال درخواست\" : \"جستجو\"}\r\n                </Button>\r\n            </Form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default SingleGame;\r\n","import { Alert, Badge, Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst CompetitionSummary = ({ title, summary }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" variant=\"info\">\r\n                    <Alert.Heading className=\"text-center\">\r\n                        <Badge variant=\"success p-2\" >\r\n                            {title}\r\n                        </Badge>\r\n                    </Alert.Heading>\r\n\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill=\"true\" variant=\"info\">\r\n                    <p>تعداد شرکت کنندگان : 00000000</p>\r\n                    <p>نکات دیگر</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col>\r\n                    <Button block variant=\"outline-success\">شرکت در مسابقه</Button>\r\n                </Col>\r\n                <Col>\r\n                <Button block variant=\"outline-secondary\">بازیکنان حاضر</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionSummary;\r\n","import { Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport \"./competitions.css\";\r\nimport CompetitionSummary from \"./CompetitionSummary\";\r\n\r\nconst CompetitionsMain = () => {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <hr />\r\n\r\n            <Row>\r\n                <Col className=\"competition-menu-body\" sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"first\">\r\n                                جام حذفی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"second\">\r\n                                لیگ امتیازی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"third\">\r\n                                بازی شرطی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"forth\">\r\n                                جدول رندوم\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"fifth\">\r\n                                و غیره\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Col>\r\n                {/* <div style={{borderLeft: '1px solid gray', height:'500px'}}></div> */}\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <CompetitionSummary\r\n                                title=\"جام حذفی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <CompetitionSummary\r\n                                title=\"لیگ امتیازی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <CompetitionSummary\r\n                                title=\"بازی شرطی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"forth\">\r\n                            <CompetitionSummary\r\n                                title=\"جدول رندوم\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"fifth\">\r\n                            <CompetitionSummary\r\n                                title=\"و غیره\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionsMain;\r\n","import GamePlay from \"./gameplay/GamePlay\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SingleGame from \"./SingleGame\";\r\nimport { Tab, Tabs, Card, Fade } from \"react-bootstrap\";\r\nimport { Fragment } from \"react\";\r\nimport CompetitionsMain from \"./competitions/CompetitionsMain\";\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector((state) => state.room);\r\n\r\n    return (\r\n        <Fragment>\r\n            {room.name ? (\r\n                <GamePlay />\r\n            ) : (\r\n                <Card\r\n                    border=\"secondary\"\r\n                    bg=\"transparent\"\r\n                    className=\"game-deck-card\">\r\n                    <Card.Body>\r\n                        <Tabs\r\n                            defaultActiveKey=\"randomGame\"\r\n                            transition={false}\r\n                            id=\"noanim-tab-example\"\r\n                            variant=\"pills\"\r\n                            // transition={Fade}\r\n                            className=\"mb-3\">\r\n                            \r\n                            <Tab eventKey=\"randomGame\" title=\"بازی تصادفی\">\r\n                                <SingleGame friendlyGame={false} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"competitions\" title=\"مسابقات\">\r\n                                <CompetitionsMain />\r\n                            </Tab>\r\n                            <Tab eventKey=\"friendlyGame\" title=\"بازی با دوستان\">\r\n                                <SingleGame friendlyGame={true} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Card.Body>\r\n                </Card>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport { Status, browserStorage } from \"../services/configs\";\r\nimport \"./profile.css\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport jwtdecode from \"jwt-decode\";\r\nimport { OK, Sorry } from \"../tools/notification\";\r\nconst NoticeManager = () => {\r\n\t//u can create another component for listing notices ?\r\n\tconst me = useSelector((state) => state.me);\r\n\tconst [isAllowed, setAllowed] = useState(undefined);\r\n\tconst [title, setTitle] = useState(\"\");\r\n\tconst [text, setText] = useState(\"\");\r\n\tconst [startDate, setStartDate] = useState(null);\r\n\tconst [endDate, setEndDate] = useState(null);\r\n\tconst [notices, setNotices] = useState([]);\r\n\tconst [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n\tconst [updateTrigger, setUpdateTrigger] = useState(false);\r\n\tconst [loading, setLoading] = useState(false);\r\n\r\n\tconst resetStates = () => {\r\n\t\tsetTitle(\"\");\r\n\t\tsetText(\"\");\r\n\t\tsetStartDate(null);\r\n\t\tsetEndDate(null);\r\n\t\tsetSelectedNoticeID(null);\r\n\t\tsetUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\t//use another simpler preloader\r\n\t\t//load all notices in left side for selecting: load all and push them in notices state\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tconst { status, data } =\r\n\t\t\t\t\tawait noticeServices.getAdvancedNotics();\r\n\t\t\t\tif (status === Status.Successful) {\r\n\t\t\t\t\t//return data.notices;\r\n\t\t\t\t\tif (data.notices.length) setNotices(data.notices.reverse());\r\n\t\t\t\t\t//if all is empty\r\n\t\t\t\t\tif (data.notices.length === 0) {\r\n\t\t\t\t\t\tsetNotices([\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttitle: \"پیام\",\r\n\t\t\t\t\t\t\t\ttext: \"اطلاعیه جدیدی وجود ندارد\",\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (err) {\r\n\t\t\t\tsetNotices([\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttitle: \"خطا\",\r\n\t\t\t\t\t\ttext: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n\t\t\t\t\t},\r\n\t\t\t\t]);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t\tsetLoading(false);\r\n\t\t})();\r\n\t}, [updateTrigger]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst token = browserStorage.TOKEN();\r\n        let isAdmin = undefined;\r\n\t\tif (token) {\r\n\t\t\tconst decoded_token = jwtdecode(browserStorage.TOKEN());\r\n\t\t\tisAdmin = decoded_token &&\r\n\t\t\t\tdecoded_token.user.admin &&\r\n\t\t\t\tdecoded_token.exp > Date.now() / 1000; //user is admin and token not expired\r\n\t\t\t// show proper message for simple users\r\n\t\t\tif (!me || isAdmin === false) {\r\n\t\t\t\t//in first render a wronge message will be shown! find a fix\r\n\t\t\t\t//2nd condition must be exactly the same\r\n\t\t\t\tSorry(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\");\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n        else isAdmin = false;\r\n\t\tsetAllowed(isAdmin);\r\n\t}, [me]);\r\n\t//***** in server implemented a middleware for this, is this needed? */\r\n\r\n\t//runs when create notice button clicks\r\n\tconst createNewNotice = async () => {\r\n\t\t//add patern and stuff to states and inputs\r\n\t\ttry {\r\n\t\t\tsetLoading(true);\r\n\t\t\tconst { status } = await noticeServices.createNotice({\r\n\t\t\t\ttitle,\r\n\t\t\t\ttext,\r\n\t\t\t\tstartDate: new Date(startDate),\r\n\t\t\t\tendDate: new Date(endDate),\r\n\t\t\t});\r\n\t\t\t//*********** */\r\n\t\t\t//COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n\t\t\tif (status === Status.CreatedSuccessfully) {\r\n\t\t\t\tOK(`اطلاعیه ی ${title} با موفقیت ساخته شد`);\r\n\t\t\t\tresetStates();\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tif (!Status.isErrorExpected(err))\r\n\t\t\t\tSorry(\r\n\t\t\t\t\t\"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\"\r\n\t\t\t\t);\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t};\r\n\r\n\tconst selecteNotice = (notice) => {\r\n\t\t// console.log(notice);\r\n\t\tsetSelectedNoticeID(notice._id);\r\n\t\tsetTitle(notice.title);\r\n\t\tsetText(notice.text);\r\n\t\tsetStartDate(new Date(notice.startDate));\r\n\t\tsetEndDate(new Date(notice.endDate));\r\n\t};\r\n\r\n\tconst cancelEditing = () => {\r\n\t\tresetStates();\r\n\t};\r\n\r\n\tconst saveChanges = async () => {\r\n\t\t//add patern and stuff to states and inputs\r\n\t\tif (!selectedNoticeID) return;\r\n\t\tsetLoading(true);\r\n\t\ttry {\r\n\t\t\tconst { status } = await noticeServices.editNotice(\r\n\t\t\t\tselectedNoticeID,\r\n\t\t\t\t{ title, text, startDate, endDate }\r\n\t\t\t);\r\n\t\t\tif (status === Status.Successful) {\r\n\t\t\t\tOK(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`);\r\n\t\t\t\tresetStates();\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tif (!Status.isErrorExpected(err))\r\n\t\t\t\tSorry(\r\n\t\t\t\t\t\"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\"\r\n\t\t\t\t);\r\n\t\t}\r\n\t\tsetLoading(false);\r\n\t};\r\n\t// if admin status is checked directly by server then start rendering the page\r\n\t//consists two part\" right part => used for creating and editing notices\r\n\t//left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n\t//edit all heights in control panel\r\n\t//add patern and stuff to states and inputs\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{me && isAllowed && (\r\n\t\t\t\t<Row style={{ height: \"100%\" }}>\r\n\t\t\t\t\t<LoadingBar loading={loading} />\r\n\t\t\t\t\t<Col xs={5}>\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tborder=\"success\"\r\n\t\t\t\t\t\t\tbg=\"transparent\"\r\n\t\t\t\t\t\t\tclassName=\"mx-auto notice-manager-card\">\r\n\t\t\t\t\t\t\t<Card.Header className=\"text-center\">\r\n\t\t\t\t\t\t\t\tاطلاعیه جدید\r\n\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t<Card.Body className=\"text-right\">\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-auto\">\r\n\t\t\t\t\t\t\t\t\tعنوان اطلاعیه\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\tvalue={title}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tpattern=\".{3,30}\"\r\n\t\t\t\t\t\t\t\t\tonInput={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\"\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tonInvalid={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\r\n\t\t\t\t\t\t\t\t\t\t\t\"عنوان اطلاعیه باید حداقل 3 و حداکثر 30 کاراکتر داشته باشد\"\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto\"\r\n\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"عنوان\"\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-auto\">\r\n\t\t\t\t\t\t\t\t\tتوضیحات\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\tas=\"textarea\"\r\n\t\t\t\t\t\t\t\t\tpattern=\".{5,200}\"\r\n\t\t\t\t\t\t\t\t\tonInput={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\"\")\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tonInvalid={(e) =>\r\n\t\t\t\t\t\t\t\t\t\te.target.setCustomValidity(\r\n\t\t\t\t\t\t\t\t\t\t\t\"متن اطلاعیه باید حداقل 5 و حداکثر 200 کاراکتر داشته باشد\"\r\n\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto h-25\"\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n\t\t\t\t\t\t\t\t\tvalue={text}\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => setText(e.target.value)}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-2\">\r\n\t\t\t\t\t\t\t\t\tتاریخ شروع نمایش\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\r\n\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto w-100\"\r\n\t\t\t\t\t\t\t\t\tcalendar={persian}\r\n\t\t\t\t\t\t\t\t\tlocale={persian_fa}\r\n\t\t\t\t\t\t\t\t\tcalendarPosition=\"bottom-right\"\r\n\t\t\t\t\t\t\t\t\tvalue={startDate}\r\n\t\t\t\t\t\t\t\t\tonChange={setStartDate}\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t<Form.Label className=\"my-1 mx-2\">\r\n\t\t\t\t\t\t\t\t\tتاریخ پایان نمایش\r\n\t\t\t\t\t\t\t\t</Form.Label>\r\n\r\n\t\t\t\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\t\t\t\tclassName=\"my-1 mx-auto\"\r\n\t\t\t\t\t\t\t\t\tcalendar={persian}\r\n\t\t\t\t\t\t\t\t\tlocale={persian_fa}\r\n\t\t\t\t\t\t\t\t\tcalendarPosition=\"bottom-right\"\r\n\t\t\t\t\t\t\t\t\tvalue={endDate}\r\n\t\t\t\t\t\t\t\t\tonChange={setEndDate}\r\n\t\t\t\t\t\t\t\t\trequired=\"required\"\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t\t<Card.Footer>\r\n\t\t\t\t\t\t\t\t{!selectedNoticeID ? (\r\n\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\t\t\tvariant=\"success\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={createNewNotice}>\r\n\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-floppy-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\tایجاد اطلاعیه\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline-primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={saveChanges}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-floppy-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\tذخیره تغییرات\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline-warning text-secondary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={cancelEditing}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-floppy-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\tلغو ویرایش\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</Card.Footer>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col xs={7}>\r\n\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\tborder=\"info\"\r\n\t\t\t\t\t\t\tbg=\"transparent\"\r\n\t\t\t\t\t\t\tclassName=\"mx-auto notice-manager-card\">\r\n\t\t\t\t\t\t\t<Card.Header className=\"text-center\">\r\n\t\t\t\t\t\t\t\tاطلاعیه های قبلی\r\n\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t<Card.Body\r\n\t\t\t\t\t\t\t\tstyle={{ overflowY: \"scroll\" }}\r\n\t\t\t\t\t\t\t\tclassName=\"text-right\">\r\n\t\t\t\t\t\t\t\t{notices.map((notice) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Fragment>\r\n\t\t\t\t\t\t\t\t\t\t\t<Alert variant=\"secondary\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-info-circle px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolor: \"red\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfontSize: \"18px\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{notice.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t: {notice.text}\r\n\t\t\t\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"icon-edit-notice fa fa-pencil-square-o px-3\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tselecteNotice(notice)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}></i>\r\n\t\t\t\t\t\t\t\t\t\t\t</Alert>\r\n\t\t\t\t\t\t\t\t\t\t\t<hr />\r\n\t\t\t\t\t\t\t\t\t\t</Fragment>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t\t</Card>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t)}\r\n\t\t</Fragment>\r\n\t);\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect, useContext } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../commons/LoadingBar\";\r\nimport \"./profile.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { OK, Sorry } from \"../tools/notification\";\r\nimport GlobalContext from './../globals/state/GlobalContext';\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n    const context = useContext(GlobalContext);\r\n    //on component mount download user credentials\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } = await userServices.getMyCredentials();\r\n                if (status === Configs.Status.Successful) {\r\n                    const { me } = data;\r\n                    setFullname(me.fullname);\r\n                    setStudentID(me.studentID);\r\n                    setEmail(me.email);\r\n                }\r\n            } catch (err) {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    Error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\"\r\n                    );\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                OK(`تغییرات با موفقیت اعمال شد`);\r\n                // dispatch(TriggerRecordUpdate());\r\n                // find another way to update\r\n\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                Error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const changeMyPassword = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.changeMyPassword({\r\n                studentID,\r\n                password,\r\n                newPassword,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                OK(\"رمز شما با موفقیت تغییر داده شد\");\r\n                context.signOut();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                Sorry(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\"\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch (pageMode) {\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                changeMyPassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const checkConfirmPassword = (event) => {\r\n        setConfirmNewPassword(event.target.value);\r\n        if (newPassword !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور جدید باید با خود رمز عبور جدید مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n\r\n    // *************************** DESIGN NOTE *******/\r\n    // HOW ABOUT USING TABS ? <Tabs>\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"big-single-card\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-100 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.READ_ONLY && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.EDIT && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.CHANGE_PASS && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={(e) => selectMode(e)}>\r\n                    <Card.Body className=\"w-75 text-center mx-auto\">\r\n                        <LoadingBar loading={loading} />\r\n\r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <Fragment>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </Fragment>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"account-info-textbox w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={newPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setNewPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        تایید رمز عبور جدید\r\n                                    </Form.Label>\r\n\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        value={confirmNewPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(event) =>\r\n                                            checkConfirmPassword(event)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={!pageMode}\r\n                            block\r\n                            variant=\"success\"\r\n                            className=\"w-50 mx-auto\">\r\n                            <i\r\n                                className=\"fa fa-wrench px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت تغییرات\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Button, Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"../profile.css\";\r\nimport noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport Record from \"./Record\";\r\nimport Avatar from \"react-avatar\";\r\nimport { Notify, Sorry } from \"./../../tools/notification\";\r\nimport { EndFriendlyInvitation, InviteToFriendlyGame } from \"../../globals/redux/actions/tools\";\r\n\r\nconst FriendRecords = (props) => {\r\n\tconst me = useSelector((state) => state.me);\r\n\tconst room = useSelector((state) => state.room);\r\n\tconst dispatch = useDispatch();\r\n\tif (!me) return null; //because of time delay to load player data, component crashes below\r\n\t//fix the bug in a better way\r\n\tconst { userID, records } = props.friend ? props.friend : me;\r\n\r\n\tconst onInviteToGameClick = () => {\r\n\t\tif (!room.type && !room.type && userID !== me.userID) {\r\n\t\t\t//if you want to enable players play multiple games then remove this\r\n\t\t\t// if player isnt still in a game\r\n\t\t\t//check room info?\r\n\t\t\tdispatch(InviteToFriendlyGame(userID));\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\t//Notify('دوست مورد نظر درخواست شما را نپذیرفت')\r\n\t\t\t\tdispatch(EndFriendlyInvitation());\r\n\t\t\t}, 10000);\r\n\t\t} else {\r\n\t\t\tSorry(\"برای شروع بازی جدید، باید بازی قبلی شما به اتمام برسد\");\r\n\t\t}\r\n\t};\r\n\treturn (\r\n\t\t<Card border=\"success\" bg=\"transparent\" className=\"friend-records\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Row className=\"w-100 p-0 mx-auto\">\r\n\t\t\t\t\t{/* <hr /> */}\r\n\t\t\t\t\t<Col xs={3} className=\"text-center mx-auuto\">\r\n\t\t\t\t\t\t<Avatar\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\tmargin: \"auto\",\r\n\t\t\t\t\t\t\t\ttextAlign: \"center\",\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tsize=\"128\"\r\n\t\t\t\t\t\t\tround={true}\r\n\t\t\t\t\t\t\tsrc={noAvatar}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t<ListGroup className=\" list-group list-group-flush\">\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"امتیاز بازیکن\">\r\n\t\t\t\t\t\t\t\t\t\t{records.points}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"تعداد بردها\">\r\n\t\t\t\t\t\t\t\t\t\t{records.wins}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"تعداد تساوی\">\r\n\t\t\t\t\t\t\t\t\t\t{records.draws}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col className=\"p-0 w-100\">\r\n\t\t\t\t\t\t\t\t\t<Record title=\"تعداد باختها\">\r\n\t\t\t\t\t\t\t\t\t\t{records.loses}\r\n\t\t\t\t\t\t\t\t\t</Record>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Card.Body>\r\n\t\t\t{props.friend && (\r\n\t\t\t\t<Card.Footer>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\tvariant=\"secondary\"\r\n\t\t\t\t\t\t\t\tblock\r\n\t\t\t\t\t\t\t\tonClick={onInviteToGameClick}>\r\n\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\tclassName=\"fa fa-handshake-o px-2\"\r\n\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\tدرخواست بازی\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Button variant=\"danger\" block onClick={null}>\r\n\t\t\t\t\t\t\t\tتست\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Card.Footer>\r\n\t\t\t)}\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default FriendRecords;\r\n","import { useState, useEffect } from \"react\";\r\nimport LoadingBar from \"../../commons/LoadingBar\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport Configs from \"../../services/configs\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport { Card, Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport AllScores from \"../../tables/scores/AllScores\";\r\nimport \"../profile.css\";\r\nimport FriendRecords from \"./FriendRecords\";\r\n\r\nconst MyGamesAndFriends = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [myFriends, setMyFriends] = useState([]);\r\n\tconst [myGames, setMyGames] = useState([]);\r\n\tconst [filterID, setFilterID] = useState(\"me\");\r\n\tconst [selectedFriendIndex, setSelectedFriendIndex] = useState(-1);\r\n\tuseEffect(() => {\r\n\t\t(async () => {\r\n\t\t\ttry {\r\n\t\t\t\tsetLoading(true); // use preloader here?\r\n\t\t\t\tlet serverResponse = await gameServices.getMyGames();\r\n\t\t\t\tif (serverResponse.status === Configs.Status.Successful)\r\n\t\t\t\t\tsetMyGames(serverResponse.data.myGames.reverse());\r\n\t\t\t\tserverResponse = await userServices.getMyFriends();\r\n\t\t\t\tif (serverResponse.status === Configs.Status.Successful)\r\n\t\t\t\t\tsetMyFriends(serverResponse.data.friends);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t\tsetLoading(false);\r\n\t\t})();\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetSelectedFriendIndex(\r\n\t\t\tfilterID !== \"me\"\r\n\t\t\t\t? myFriends.findIndex((friend) => friend.userID === filterID)\r\n\t\t\t\t: -1\r\n\t\t);\r\n\t\t// if filterID === \"me\" || frined id wia .findIndex not found ---> returns -1\r\n\t}, [filterID, myFriends]);\r\n\r\n    const unfriend = (friend) => {\r\n        //... show a modal or sth to ask if user's sure\r\n        // send proper http request to clear both from each others friend list\r\n\r\n    }\r\n\treturn (\r\n\t\t<Card border=\"secondary\" bg=\"transparent\" className=\"big-single-card\">\r\n\t\t\t<Card.Header className=\"text-center\">\r\n\t\t\t\tلیست دوستان و آمار بازی ها\r\n\t\t\t</Card.Header>\r\n\t\t\t<LoadingBar loading={loading} />\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<LoadingBar loading={loading} />\r\n\t\t\t\t<Tab.Container\r\n\t\t\t\t\tdefaultActiveKey={filterID}\r\n\t\t\t\t\tonSelect={(key) => setFilterID(key)}>\r\n\t\t\t\t\t<Row className=\"tabs-list-friends-in-games-scrollable\">\r\n\t\t\t\t\t\t<Col className=\"friend-list-name-length\" xs={3}>\r\n\t\t\t\t\t\t\t<Nav\r\n\t\t\t\t\t\t\t\tvariant=\"pills\"\r\n\t\t\t\t\t\t\t\tclassName=\"flex-column text-right\">\r\n\t\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t\t<Nav.Link eventKey=\"me\">\r\n\t\t\t\t\t\t\t\t\t\tهمه بازی ها\r\n\t\t\t\t\t\t\t\t\t</Nav.Link>\r\n\t\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t\t\t{myFriends.map((friend) => (\r\n\t\t\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t\t\t<Nav.Link eventKey={friend.userID}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Row className=\"w-100\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col>{friend.fullname}</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Col xs={1}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i onClick={() => unfriend(friend)} className=\"icon-unfriend fa fa-times pl-2\" area-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t\t\t\t\t</Nav.Link>\r\n\t\t\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t{/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n\t\t\t\t\t\t<Col xs={9}>\r\n\t\t\t\t\t\t\t<FriendRecords\r\n\t\t\t\t\t\t\t\tfriend={\r\n\t\t\t\t\t\t\t\t\tselectedFriendIndex !== -1\r\n\t\t\t\t\t\t\t\t\t\t? myFriends[selectedFriendIndex]\r\n\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Tab.Content>\r\n\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"me\">\r\n\t\t\t\t\t\t\t\t\t<AllScores scores={myGames} />\r\n\t\t\t\t\t\t\t\t</Tab.Pane>\r\n\t\t\t\t\t\t\t\t{myFriends.map((friend) => (\r\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey={friend.userID}>\r\n\t\t\t\t\t\t\t\t\t\t<AllScores\r\n\t\t\t\t\t\t\t\t\t\t\tscores={myGames.filter(\r\n\t\t\t\t\t\t\t\t\t\t\t\t(game) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfriend.userID ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgame.players[0].id ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfriend.userID ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgame.players[1].id\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Tab.Content>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t{/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Tab.Container>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default MyGamesAndFriends;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Alert, Col, Row } from \"react-bootstrap\";\r\nimport \"./chat.css\";\r\nimport { v1 as uuidv1 } from 'uuid'\r\nimport { toHijri } from \"../tools/format\";\r\nconst Message = ({ msg, previousDay, inDesktop }) => {\r\n    const { date } = msg; // destructure date from msg then make a new date object\r\n    // reason for making new Date objects is that react throws error some time when you use it without new Date :|\r\n    const [showDate, setShowDate] = useState(false); //for each day, the first message in that day has persian date above it\r\n    const [time, setTime] = useState(null);\r\n    const [hijriDate, setHijriDate] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const [hDate, hTime] = toHijri(date);\r\n        setTime(hTime); setHijriDate(hDate);\r\n        setShowDate(\r\n            new Date(date).getDate() !== previousDay || previousDay === 0\r\n        ); //     0 means this is the first message in the chat\r\n    }, [date, previousDay]);\r\n\r\n    //note: Device.Desktop is 0 -> so it inDesktop is used conditionally but it actually contains device type and not a boolean\r\n    return (\r\n        <Fragment key={uuidv1()}>\r\n            {!showDate ? null : (\r\n                <Fragment>\r\n                    <hr />\r\n                    <p className=\"message-date\">{hijriDate}</p>\r\n                </Fragment>\r\n            )}\r\n            <Row>\r\n                <Col>\r\n                    {msg.me && (\r\n                        <Alert className=\"text-right\" variant=\"dark\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col>{msg.me}</Col>\r\n                                    <Col className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.me}</Row>\r\n                                    <Row className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n                <Col>\r\n                    {msg.friend && (\r\n                        <Alert className=\"text-right\" variant=\"primary\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                    <Col>{msg.friend}</Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.friend}</Row>\r\n                                    <Row className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import {\r\n\tButton,\r\n\tCard,\r\n\tContainer,\r\n\tForm,\r\n\tInputGroup,\r\n\tRow,\r\n\tTab,\r\n} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useState, useEffect, useRef, useContext } from \"react\";\r\nimport \"./chat.css\";\r\nimport { Devices } from \"../services/configs\";\r\nimport { SendMessageTo } from \"../globals/redux/actions/message\";\r\nimport Message from \"./Message\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\n\r\nconst ChatBox = ({ friendID }) => {\r\n\tconst [myMessage, setMyMessage] = useState(\"\");\r\n\tconst message = useSelector((state) => state.message);\r\n\tconst dispatch = useDispatch();\r\n\tconst me = useSelector((state) => state.me);\r\n\tconst mostRecentMessageRef = useRef(null);\r\n\tconst context = useContext(GlobalContext);\r\n\tconst chats = useSelector(state => state.chats);\r\n\tconst [ourChat, setOurChat] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tlet ours = chats.find(chat => chat.with === friendID);\r\n\t\tsetOurChat((ours && ours.messages) ? ours.messages : []);\r\n\t}, [chats, friendID]);\r\n\t\r\n\tconst composeMessage = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\t// init state vears ro get chat\r\n\t\tif (myMessage) {\r\n\t\t\tdispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n\t\t\tsetMyMessage(\"\");\r\n\r\n\t\t\tif (mostRecentMessageRef && mostRecentMessageRef.current) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tmostRecentMessageRef.current.scrollIntoView({\r\n\t\t\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\t\t\ttop: mostRecentMessageRef.current.offsetTop,\r\n\t\t\t\t\t});\r\n\t\t\t\t}, 100);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst { recieved } = message;\r\n\t\tif (!message.sent && recieved && recieved.friendID === friendID) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tif (mostRecentMessageRef && mostRecentMessageRef.current)\r\n\t\t\t\t\tmostRecentMessageRef.current.scrollIntoView({\r\n\t\t\t\t\t\tbehavior: \"smooth\",\r\n\t\t\t\t\t\ttop: mostRecentMessageRef.current.offsetTop,\r\n\t\t\t\t\t});\r\n\t\t\t}, 100);\r\n        }\r\n\t}, [message,ourChat, friendID, dispatch]);\r\n\r\n\treturn (\r\n\t\t<Tab.Pane eventKey={friendID}>\r\n\t\t\t<Container>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tborder=\"dark\"\r\n\t\t\t\t\t\tbg=\"transparent\"\r\n\t\t\t\t\t\tclassName={`big-single-card ${\r\n\t\t\t\t\t\t\tcontext.device !== Devices.SmartPhone\r\n\t\t\t\t\t\t\t\t? \"chat-box-scrollable\"\r\n\t\t\t\t\t\t\t\t: \"smartphone-chat-box-scrollable\"\r\n\t\t\t\t\t\t}`}>\r\n\t\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t\t{ourChat && ourChat instanceof Array && ourChat.map((msg, index) => (\r\n\t\t\t\t\t\t\t\t\t<div ref={mostRecentMessageRef}>\r\n\t\t\t\t\t\t\t\t\t\t<Message\r\n\t\t\t\t\t\t\t\t\t\t\t// key={msg.key}\r\n\t\t\t\t\t\t\t\t\t\t\tmsg={msg}\r\n\t\t\t\t\t\t\t\t\t\t\tinDesktop={\r\n\t\t\t\t\t\t\t\t\t\t\t\tcontext.device ===\r\n\t\t\t\t\t\t\t\t\t\t\t\tDevices.Desktop\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tpreviousDay={\r\n\t\t\t\t\t\t\t\t\t\t\t\tindex !== 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t? new Date(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tourChat[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tindex - 1\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].date\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t  ).getDate()\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 0\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Card.Body>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Form\r\n\t\t\t\t\t\tonSubmit={(event) => composeMessage(event)}\r\n\t\t\t\t\t\tclassName=\"w-100 mt-3\">\r\n\t\t\t\t\t\t<InputGroup className=\"w-100\">\r\n\t\t\t\t\t\t\t<InputGroup.Prepend\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\twidth: \"8%\",\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\t\t\tstyle={{ border: \"none\", fontSize: \"22px\" }}\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-100 mx-auto\"\r\n\t\t\t\t\t\t\t\t\tvariant=\"outline-info\">\r\n\t\t\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"fa fa-paper-plane\"\r\n\t\t\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</InputGroup.Prepend>\r\n\r\n\t\t\t\t\t\t\t<InputGroup.Prepend\r\n\t\t\t\t\t\t\t\tstyle={{ margin: \"auto\", width: \"92%\" }}>\r\n\t\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\t\tvalue={myMessage}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) =>\r\n\t\t\t\t\t\t\t\t\t\tsetMyMessage(e.target.value)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tplaceholder=\"پیام...\"\r\n\t\t\t\t\t\t\t\t\tclassName=\"bg-transparent chat-room-message-box\r\n                                    mx-auto text-right\"></Form.Control>\r\n\t\t\t\t\t\t\t</InputGroup.Prepend>\r\n\t\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t</Tab.Pane>\r\n\t);\r\n};\r\n\r\nexport default ChatBox;\r\n","import { Routes } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst chatServices = {\r\n    \r\n    getOurChat: (friendID) => {\r\n        return http.get(`${Server.Root}/${Server.Chats}/${Server.SingleChat}/${friendID}`);\r\n    },\r\n    getMyInteractions: () => {\r\n        return http.get(`${Server.Root}/${Server.Chats}/${Server.Interactions}`);\r\n    }\r\n};\r\n\r\nexport default chatServices;","import { Card, Row, Col, Nav, Tab } from \"react-bootstrap\";\r\nimport { useContext, useEffect } from \"react\";\r\nimport { Devices } from \"../services/configs\";\r\nimport ChatBox from \"./ChatBox\";\r\nimport \"./chat.css\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadMyFriendsChats } from \"../globals/redux/actions/friends\";\r\nconst ChatRoom = () => {\r\n\tconst context = useContext(GlobalContext);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(LoadMyFriendsChats());\r\n\t\t// chat room unmounted\r\n\t\treturn () => {\r\n\t\t\t// remove chat list from redux to save memory\r\n\t\t};\r\n\t}, [dispatch]);\r\n\r\n\tconst myfriends = useSelector((state) => state.friends);\r\n\t\r\n\treturn (\r\n\t\t<Card border=\"secondary\" bg=\"transparent\" className=\"chat-main-card\">\r\n\t\t\t<Card.Header className=\"text-center\">چت روم شما</Card.Header>\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Tab.Container\r\n\t\t\t\t// id=\"left-tabs-example\"\r\n\t\t\t\t// defaultActiveKey={filterID}\r\n\t\t\t\t// onSelect={(key) => setFilterID(key)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col\r\n\t\t\t\t\t\t\tclassName={\r\n\t\t\t\t\t\t\t\tcontext.device !== Devices.SmartPhone\r\n\t\t\t\t\t\t\t\t\t? \"chat-room-devider chat-scrollable-friends\"\r\n\t\t\t\t\t\t\t\t\t: \"smartphone-chat-scrollable-friends\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsm={3}>\r\n\t\t\t\t\t\t\t<Nav\r\n\t\t\t\t\t\t\t\tvariant=\"pills\"\r\n\t\t\t\t\t\t\t\tclassName=\"flex-column text-right\">\r\n\t\t\t\t\t\t\t\t{myfriends.map((friend) => (\r\n\t\t\t\t\t\t\t\t\t<Nav.Item>\r\n\t\t\t\t\t\t\t\t\t\t<Nav.Link\r\n\t\t\t\t\t\t\t\t\t\t\t// key={friend.ID}\r\n\t\t\t\t\t\t\t\t\t\t\teventKey={friend.ID}>\r\n\t\t\t\t\t\t\t\t\t\t\t{friend.name}\r\n\t\t\t\t\t\t\t\t\t\t</Nav.Link>\r\n\t\t\t\t\t\t\t\t\t</Nav.Item>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t{/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t<Tab.Content>\r\n\t\t\t\t\t\t\t\t{myfriends.map((friend) => (\r\n\t\t\t\t\t\t\t\t\t<ChatBox\r\n\t\t\t\t\t\t\t\t\t\t// key={uuidv1()}\r\n\t\t\t\t\t\t\t\t\t\tfriendID={friend.ID}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</Tab.Content>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Tab.Container>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default ChatRoom;\r\n","import { Status } from \"../../../services/configs\";\r\nimport chatServices from \"../../../services/http/chatServices\";\r\nimport { Sorry } from \"./../../../tools/notification\";\r\n\r\n// chats and friends\r\nexport const LoadMyFriendsChats = () => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tvar myFriends = [],\r\n\t\t\t\tmyChats = [];\r\n\t\t\tconst { status, data } = await chatServices.getMyInteractions();\r\n\t\t\tif (status === Status.Successful) {\r\n\t\t\t\tconst { interactions } = data;\r\n\t\t\t\tif (!(interactions instanceof Array))\r\n\t\t\t\t\tthrow new Error(\"server response is not an array!\");\r\n\t\t\t\tinteractions.forEach((interact) => {\r\n\t\t\t\t\tconst { friend, messages, ownerOf } = interact;\r\n\t\t\t\t\tmyFriends.push(friend);\r\n\t\t\t\t\tmyChats.push({\r\n\t\t\t\t\t\twith: friend.ID,\r\n\t\t\t\t\t\tmessages: messages.map((msg) =>\r\n\t\t\t\t\t\t\townerOf === msg.owner\r\n\t\t\t\t\t\t\t\t? { me: msg.text, friend: null, date: msg.date }\r\n\t\t\t\t\t\t\t\t: { me: null, friend: msg.text, date: msg.date }\r\n\t\t\t\t\t\t),\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tawait dispatch({\r\n\t\t\t\t\ttype: \"LOAD_FRIENDS\",\r\n\t\t\t\t\tpayload: myFriends,\r\n\t\t\t\t});\r\n\t\t\t\tawait dispatch({ type: \"LOAD_CHATS\", payload: myChats });\r\n\t\t\t\t// dispatch friends here\r\n\t\t\t\t// myChats key-value array: its keys are friendID that is relative to a special chat\r\n\t\t\t} else throw new Error(\"Error happened while forming chats list\");\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Loading chats interrupted cause of this error: ${err}`\r\n\t\t\t);\r\n\t\t\t//show proper message\r\n\t\t\tSorry(\r\n\t\t\t\t\"حین بارگذاری پیام ها مشکلی پیش آمد. لطفا لحظاتی بعد دوباره تلاش کنید\"\r\n\t\t\t);\r\n\t\t\tawait dispatch({ type: \"RESET_FRIENDS\" });\r\n\t\t\tawait dispatch({ type: \"RESET_CHATS\" });\r\n\t\t}\r\n\t};\r\n};\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"../profile.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment, useContext } from \"react\";\r\nimport Configs from \"../../services/configs\";\r\nimport GlobalContext from './../../globals/state/GlobalContext';\r\n\r\nconst ProfilePanel = (props) => {\r\n    const me = useSelector((state) => state.me);\r\n    const context = useContext(GlobalContext);\r\n\r\n    return (\r\n            <Row className=\"profile-panel-sidebar d-flex flex-column flex-shrink-0\">\r\n                <Button\r\n                    style={{ border: \"none\" }}\r\n                    variant=\"outline-warning\"\r\n                    className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </Button>\r\n                <hr />\r\n                <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            exact\r\n                            to={Configs.Routes.Client.Profile}\r\n                            className=\"nav-link\"\r\n                            aria-current=\"page\">\r\n                            <i\r\n                                className=\"fa fa-user-o px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            مشخصات\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink\r\n                            className=\"nav-link link-dark\"\r\n                            to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                            <i\r\n                                className=\"fa fa-users px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            دوستان و بازی ها\r\n                        </NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink\r\n                            className=\"nav-link link-dark\"\r\n                            to={Configs.Routes.Client.ChatRoom}>\r\n                            <i\r\n                                className=\"fa fa-comment px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            چت روم\r\n                        </NavLink>\r\n                    </li>\r\n                    <hr />\r\n                    {me && me.isAdmin && (\r\n                        <Fragment>\r\n                            {/* admin tools */}\r\n                            <li>\r\n                                <NavLink\r\n                                    className=\"nav-link link-dark border-top\"\r\n                                    to={Configs.Routes.Client.Notices}>\r\n                                    <i\r\n                                        className=\"fa fa-newspaper-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    اطلاعیه ها\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink\r\n                                    className=\"nav-link link-dark\"\r\n                                    to=\"/controlPanel/admin/whatever\">\r\n                                    <svg\r\n                                        className=\"bi me-2\"\r\n                                        width=\"16\"\r\n                                        height=\"16\"></svg>\r\n                                    امکانات ادمین\r\n                                </NavLink>\r\n                            </li>\r\n                        </Fragment>\r\n                    )}\r\n                </ul>\r\n                <hr />\r\n                <Button variant=\"outline-danger\" onClick={context.signOut}>\r\n                    <i className=\"fa fa-sign-out px-2\" aria-hidden=\"true\"></i>\r\n                    خروج از حساب کاربری\r\n                </Button>\r\n            </Row>\r\n    );\r\n};\r\n\r\nexport default ProfilePanel;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"../profile.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment, useContext } from \"react\";\r\nimport Configs from \"../../services/configs\";\r\nimport GlobalContext from \"../../globals/state/GlobalContext\";\r\n\r\nconst CollapsedPanel = (props) => {\r\n    const me = useSelector((state) => state.me);\r\n    const context = useContext(GlobalContext);\r\n    return (\r\n        <Row bg=\"light\" className=\"profile-panel-sidebar-collapsed w-100 text-right\">\r\n            <Button\r\n                style={{ border: \"none\", padding:0 }}\r\n                variant=\"outline-warning\"\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <i className=\"fa fa-cogs\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n            <NavLink\r\n                exact\r\n                to={Configs.Routes.Client.Profile}\r\n                className=\"nav-link\"\r\n                aria-current=\"page\">\r\n                <i className=\"fa fa-user-o\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <NavLink\r\n                className=\"nav-link link-dark\"\r\n                to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                <i className=\"fa fa-users\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <NavLink\r\n                className=\"nav-link link-dark\"\r\n                to={Configs.Routes.Client.ChatRoom}>\r\n                <i className=\"fa fa-weixin\" aria-hidden=\"true\"></i>\r\n            </NavLink>\r\n            <hr />\r\n            {me && me.isAdmin && (\r\n                <Fragment>\r\n                    {/* admin tools */}\r\n                    <NavLink\r\n                        className=\"nav-link link-dark border-top\"\r\n                        to={Configs.Routes.Client.Notices}>\r\n                        <i className=\"fa fa-newspaper-o\" aria-hidden=\"true\"></i>\r\n                    </NavLink>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/admin/whatever\">\r\n                        <svg className=\"bi me-2\" width=\"16\" height=\"16\"></svg>\r\n                    </NavLink>\r\n                </Fragment>\r\n            )}\r\n            <hr />\r\n            <Button\r\n                className=\"text-right\"\r\n                variant=\"outline-danger\"\r\n                onClick={context.signOut}>\r\n                <i className=\"fa fa-sign-out\" aria-hidden=\"true\"></i>\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default CollapsedPanel;\r\n","import { Fragment, useContext } from \"react\";\r\nimport { Devices } from \"../services/configs\";\r\nimport ProfilePanel from \"../profile/panel/ProfilePanel\";\r\nimport CollapsedPanel from \"../profile/panel/CollapsedPanel\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport GlobalSocketManager from \"./../services/ws/GlobalSocketManager\";\r\nimport { useSelector } from \"react-redux\";\r\nimport AutoSignIn from \"../users/AutoSignIn\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\n\r\nconst ProfilePanelLayout = ({ children }) => {\r\n    const me = useSelector((state) => state.me);\r\n    const context = useContext(GlobalContext);\r\n    return (\r\n        <Fragment>\r\n            <AutoSignIn />\r\n            {me && <GlobalSocketManager />}\r\n            {(context.device === Devices.Desktop) ? (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={3}>\r\n                        <ProfilePanel />\r\n                    </Col>\r\n                    <Col>{children}</Col>\r\n                </Row>\r\n            ) : (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={1}>\r\n                        <CollapsedPanel />\r\n                    </Col>\r\n                    <Col>{children}</Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ProfilePanelLayout;\r\n","import { useContext } from \"react\";\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport GlobalContext from \"../globals/state/GlobalContext\";\r\nimport { Devices, Routes } from \"../services/configs\";\r\n\r\nconst NavigationBar = () => {\r\n\tconst me = useSelector((state) => state.me);\r\n\tconst context = useContext(GlobalContext);\r\n\r\n\treturn (\r\n\t\t<Navbar bg=\"light\" className=\"nav-pills text-right\">\r\n\t\t\t<Container className=\"text-right\">\r\n\t\t\t\t<Nav className=\"me-auto\">\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tactiveClassName=\"btn-success text-dark\"\r\n\t\t\t\t\t\tto={\r\n\t\t\t\t\t\t\tme\r\n\t\t\t\t\t\t\t\t? Routes.Client.Profile\r\n\t\t\t\t\t\t\t\t: Routes.Client.SignUp\r\n\t\t\t\t\t\t}>\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-address-card px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{me\r\n\t\t\t\t\t\t\t? context.device !== Devices.SmartPhone && me.fullname\r\n\t\t\t\t\t\t\t: \"ثبت نام\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.Root}\r\n\t\t\t\t\t\texact\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i className=\"fa fa-home px-2\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"صفحه اصلی\"}\r\n\t\t\t\t\t</NavLink>\r\n\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.GameDeck}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-gamepad px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"بازی ها\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t{me && (\r\n\t\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\t\tto={Routes.Client.ChatRoom}\r\n\t\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\t\tclassName=\"fa fa-comment px-2\"\r\n\t\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t\t{context.device === Devices.Desktop && \"چت روم\"}\r\n\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.Rankings}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-list-ol px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"رنکینگ\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.GameGuide}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i className=\"fa fa-eye px-2\" aria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"راهنما\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t<NavLink\r\n\t\t\t\t\t\tclassName=\"nav-link text-primary\"\r\n\t\t\t\t\t\tto={Routes.Client.ContactUs}\r\n\t\t\t\t\t\tactiveClassName=\"btn-outline-secondary text-dark\">\r\n\t\t\t\t\t\t<i\r\n\t\t\t\t\t\t\tclassName=\"fa fa-phone-square px-2\"\r\n\t\t\t\t\t\t\taria-hidden=\"true\"></i>\r\n\t\t\t\t\t\t{context.device === Devices.Desktop && \"تماس با ما\"}\r\n\t\t\t\t\t</NavLink>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Container>\r\n\t\t</Navbar>\r\n\t);\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { useMediaQuery } from \"react-responsive\";\r\nimport { useEffect, useState } from \"react\";\r\nimport GlobalContext from \"./GlobalContext\";\r\nimport { withRouter } from \"react-router\";\r\nimport { browserStorage, Routes } from \"../../services/configs\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { ResetMyPlayer } from './../redux/actions/player';\r\nimport { EnterRoom } from './../redux/actions/game';\r\nconst GlobalStates = ({ children, history }) => {\r\n\tconst isDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n\tconst isSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n\tconst isTablet = !isDesktop && !isSmartPhone;\r\n\tconst [device, setDevice] = useState(null);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconsole.log(\"GlobalStates rendered\"); //s\r\n\tuseEffect(() => {\r\n\t\t// find device mode\r\n\t\t// array is sorted according to Configs.Devices\r\n\t\tsetDevice(\r\n\t\t\t[isDesktop, isTablet, isSmartPhone].findIndex((mode) => mode)\r\n\t\t); //return the index of the one that is true -> wich is the curret device mode\r\n\t}, [isDesktop, isTablet, isSmartPhone]);\r\n\r\n\tconst signOut = () => {\r\n\t\ttry {\r\n\t\t\tbrowserStorage.reset(); //sign out\r\n\t\t\thistory.replace(Routes.Client.SignUp);\r\n\t\t\tdispatch(ResetMyPlayer());\r\n\t\t\t// edit .replace; use a function that doesnt recent BACK key on browser\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t};\r\n\r\n\tconst redirectToGamePlay = (room) => {\r\n\t\tdispatch(EnterRoom(room));\r\n\t\thistory.replace(Routes.Client.GameDeck);\r\n\t}\r\n\treturn (\r\n\t\t<GlobalContext.Provider value={{ device, signOut, redirectToGamePlay }}>\r\n\t\t\t{children}\r\n\t\t</GlobalContext.Provider>\r\n\t);\r\n};\r\n\r\nexport default withRouter(GlobalStates);\r\n","import ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport GameGuide from \"./informations/GameGuide\";\r\nimport ContactUs from \"./informations/ContactUs\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./layouts/MainLayout\";\r\nimport Rankings from \"./tables/rankings/Rankings\";\r\nimport GameDeck from \"./games/GameDeck\";\r\nimport NoticeManager from \"./profile/NoticeManager\";\r\nimport AccountCredentials from \"./profile/AcountCredentials\";\r\nimport MyGamesAndFriends from \"./profile/friendgames/MyGamesAndFriends\";\r\nimport { Routes } from \"./services/configs\";\r\nimport ChatRoom from \"./chat/ChatRoom\";\r\nimport ProfilePanelLayout from \"./layouts/ProfilePanelLayout\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./commons/NavigationBar\";\r\nimport GlobalStates from \"./globals/state/GlobalStates\";\r\n\r\nconst App = () => {\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<ToastContainer />\r\n\t\t\t<GlobalStates>\r\n\t\t\t\t<NavigationBar />\r\n\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path={`${Routes.Client.Profile}/:path?`} exact>\r\n\t\t\t\t\t\t<ProfilePanelLayout>\r\n\t\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.MyGamesAndFriends}>\r\n\t\t\t\t\t\t\t\t\t<MyGamesAndFriends />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.Notices}>\r\n\t\t\t\t\t\t\t\t\t<NoticeManager />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.ChatRoom}>\r\n\t\t\t\t\t\t\t\t\t<ChatRoom />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t<Route exact path={Routes.Client.Profile}>\r\n\t\t\t\t\t\t\t\t\t<AccountCredentials />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t\t</ProfilePanelLayout>\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t\t<Route>\r\n\t\t\t\t\t\t<MainLayout>\r\n\t\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.SignUp}>\r\n\t\t\t\t\t\t\t\t\t<SignUp />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.GameDeck}>\r\n\t\t\t\t\t\t\t\t\t<GameDeck />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.Rankings}>\r\n\t\t\t\t\t\t\t\t\t<Rankings />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.GameGuide}>\r\n\t\t\t\t\t\t\t\t\t<GameGuide />/\r\n\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.ContactUs}>\r\n\t\t\t\t\t\t\t\t\t<ContactUs />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\r\n\t\t\t\t\t\t\t\t<Route path={Routes.Client.Root} exact>\r\n\t\t\t\t\t\t\t\t\t<ScoresTable />\r\n\t\t\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t\t</Switch>\r\n\t\t\t\t\t\t</MainLayout>\r\n\t\t\t\t\t</Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</GlobalStates>\r\n\t\t</BrowserRouter>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { meReducer } from \"./me\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\nimport { statisticsReducer } from \"./statistics\";\r\nimport { messageReducer } from './message';\r\nimport { chatsReducer } from './chats';\r\nimport { friendsReducer } from './freinds';\r\n\r\nexport const reducers = combineReducers({\r\n    me: meReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer,\r\n    statistics: statisticsReducer,\r\n    message: messageReducer,\r\n    chats: chatsReducer,\r\n    friends: friendsReducer\r\n});","export const meReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_MINE\":\r\n            return action.payload;\r\n        case \"RESET_MINE\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = {name: null, type: null}, action) => {\r\n    switch (action.type) {\r\n        case \"ENTER_ROOM\":\r\n            return {...action.payload};\r\n        case \"EXIT_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return {...action.payload}; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBOARD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (\r\n\tstate = {\r\n\t\trandomSearchTriggered: false,\r\n\t\tfriendRequestTarget: null,\r\n\t\tfriendlyGameTarget: null,\r\n\t\tgameInvitation: null\r\n\t},\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"UPDATE_TOOLS\":\r\n\t\t\treturn { ...action.payload };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","export const statisticsReducer = (state = { players: 0, games: 0 }, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"UPDATE_STATISTICS\":\r\n\t\t\treturn { ...action.payload };\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","export const messageReducer = (\r\n\tstate = { sent: null, recieved: null },\r\n\taction\r\n) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"RECIEVE_MESSAGE\": {\r\n\t\t\treturn {\r\n\t\t\t\trecieved: { ...action.payload, pushed: false },\r\n\t\t\t\tsent: state.sent,\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase \"SEND_MESSAGE\": {\r\n\t\t\treturn {\r\n\t\t\t\tsent: { ...action.payload, pushed: true },\r\n\t\t\t\trecieved: state.recieved,\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase \"MEESAGE_PUSHED\":\r\n\t\t\treturn {\r\n\t\t\t\tsent: state.sent,\r\n\t\t\t\trecieved: {...state.recieved, pushed: true},\r\n\t\t\t};\r\n\t\tcase \"RESET_MESSAGES\":\r\n\t\t\treturn { sent: null, recieved: null };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","export const chatsReducer = (state = [], action) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"LOAD_CHATS\":\r\n\t\t\t// use a copy of?\r\n\t\t\treturn [...action.payload];\r\n\t\tcase \"RESET_CHATS\":\r\n\t\t\t//... what to do?\r\n\t\t\treturn [];\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","export const friendsReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_FRIENDS\":\r\n            return [...action.payload];\r\n        case \"RESET_FRIENDS\":\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk));\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./globals/redux/store/index\";\r\n\r\nrender(\r\n\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t</Provider>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n","const ClientRoutes = require('./client');\r\nconst ServerRoutes = require('./server');\r\nconst Status = require('./status');\r\nconst browserStorage = require('./browser');\r\nconst GameSetting = require('./gamesetting');\r\n//all configs\r\nmodule.exports = {\r\n    browserStorage,\r\n    Routes: { Server: ServerRoutes, Client: ClientRoutes },\r\n    Status,\r\n    GameSetting,\r\n    Devices: { SmartPhone: 2, Tablet: 1, Desktop: 0 },\r\n}"],"sourceRoot":""}