{"version":3,"sources":["services/configs/server.js","services/configs/status.js","services/configs/browser.js","services/configs/gamesetting.js","tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","services/http/httpService.js","services/http/userServices.js","services/http/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameGuide.jsx","informations/ContactUs.jsx","common/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","common/NavigationBar.jsx","sidebars/SignInSideBar.jsx","services/http/noticeServices.js","sidebars/NoticeSideBar.jsx","sidebars/no-avatar.png","sidebars/OnlineStatistics.jsx","dashboard/actions/index.js","chat/GameChatRoom.jsx","sidebars/PlayerInfoSideBar.jsx","profile/ProfilePanel.jsx","services/ws/GlobalSocketManager.jsx","common/MainLayout.jsx","tables/rankings/SinglePlayerCard.jsx","tables/rankings/AllPlayers.jsx","tables/rankings/Rankings.jsx","services/ws/gamePlaySocketServices.js","dashboard/withReduxDashboard.js","games/gameplay/BriefScoreboard.jsx","games/gameplay/TableDesign.jsx","games/gameplay/GamePlay.jsx","games/SingleGame.jsx","games/competitions/CompetitionSummary.jsx","games/competitions/CompetitionsMain.jsx","games/GameDeck.jsx","profile/NoticeManager.jsx","profile/AcountCredentials.jsx","profile/MyGamesAndFriends.jsx","chat/ChatMessageBox.jsx","chat/ChatRoom.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/reducers/tools.js","dashboard/reducers/statistics.js","dashboard/reducers/message.js","dashboard/reducers/device.js","dashboard/store/index.js","index.js","services/configs/index.js","services/configs/client.js"],"names":["module","exports","Root","WebSocketRoot","wsGamePlayRoute","wsGlobalRoute","SignUp","SignIn","Users","Credentials","PasswordChange","Friends","Public","Administrators","Games","Mine","Notices","NoticeManagement","Successful","CreatedSuccessfully","BadRequest","Unauthorized","Forbidden","NotFound","NotAcceptable","Conflict","UnprocessableEntity","InternalServerError","isErrorExpected","error","response","status","Token","ID","TableRowMargings","SingleScoreCard","Type","playerXName","playerOName","xScore","oScore","xBadgeColor","oBadgeColor","className","id","AllScores","scores","console","log","length","map","score","players","name","gameID","Card","border","Body","Text","axios","defaults","headers","post","put","interceptors","request","use","config","token","sessionStorage","getItem","BrowserStorage","Authorization","Promise","reject","expectedErrors","Status","toast","position","closeOnClick","http","get","delete","Server","Routes","userServices","signUp","user","JSON","stringify","signIn","getPlayer","userID","getAllPlayers","getMyCredentials","editMyCredentials","newMe","changeMyPassword","passwords","getMyFriends","isMyFriend","targetID","isAdministrator","saveUser","setItem","readUserID","gameServices","getAllGames","getMyGames","loadPlayerData","a","data","resolve","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","Configs","allGames","then","result","reverse","filter","game","isLive","catch","err","this","onClick","Component","GameGuide","Header","href","ContactUs","LoadingBar","useState","whichOne","setWhichOne","useEffect","Math","floor","random","useLayoutEffect","document","body","style","overflowY","height","selectedLoader","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","Number","props","history","replace","onForgotPasswordClick","Button","variant","Modal","backdrop","show","onHide","closeButton","Form","onSubmit","Group","Label","Control","type","placeholder","autoComplete","value","onChange","e","target","controlId","Row","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","newUser","fullname","success","warn","pattern","onInput","onInvalid","required","Footer","NavigationBar","useSelector","device","Navbar","bg","expand","Container","Toggle","activeClassName","to","Client","Profile","Collapse","Nav","exact","GameDeck","Rankings","Device","SmartPhone","ChatRoom","SignInSideBar","Col","noticeServices","createNotice","notice","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","notices","setNotices","title","text","Alert","color","fontSize","OnlineStatistics","statistics","games","ListGroup","Item","Badge","pill","LoadMe","payload","SetRoom","room","SendFriendRequestTo","SendMessageTo","friendID","SetDeviceType","GameChatRoom","myMessage","setMyMessage","message","dispatch","useDispatch","me","composeMessage","recieved","InputGroup","Prepend","width","PlayerInfoSideBar","person","inGame","personIsFriend","setPersonIsFriend","isFriend","Image","src","noAvatar","alt","index","Heading","shape","records","points","wins","block","innerHTML","disabled","onFriendRequestClick","MyGamesAndFriends","isAdmin","GlobalSocketManager","socketGlobal","setSocketGlobal","incommingFriendRequest","setIncommingFriendRequest","showFriendshipModal","setShowFriendshipModal","opponent","tools","clientOnline","toggleClientOnline","connect","useCallback","socket","WebSocket","onopen","send","clientID","msg","onmessage","parse","command","setTimeout","askerID","answer","targetName","warning","onerror","close","onclose","opponentSearchTriggered","friendRequest","askerName","respondToFriendshipRequest","sent","setInterval","window","navigator","onLine","margin","pathname","location","scoreboard","deviceIsDesktop","useMediaQuery","query","deviceIsSmartPhone","deviceIsTablet","Desktop","Tablet","updateTriggered","pageLeftSideBar","pageRightSideBar","inProfilePages","includes","opp","xs","children","SinglePlayerCard","rowNumber","loses","draws","scope","AllPlayers","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","createSocketRequest","roomName","playerID","gamePlaySocketServices","gameType","server","withReduxDashboard","component","LoadOpponent","UpdateMyRecords","ResetOpponent","ResetRoom","SetGameID","UpdateScoreboard","details","CleanScoreboard","TriggerRecordUpdate","BriefScoreboard","textAlign","TableDesign","dimension","table","onEachCellClick","dimens","i","push","row","direction","marginLeft","GameSetting","column","GamePlay","lineColor","turn","myTurn","undefined","socketGamePlay","playerOnline","LoadOpponentData","opponentID","info","updateGameScorebaord","oppTurn","socketOnMessage","IDs","opponentIndex","newMove","cell","cellID","verifyAndApplyTheMove","cellButtons","focus","endGame","forceConnectToWebSocket","nextJob","initiateGameTimer","getCellCoordinates","dimen","onFloorId","selectedCellButton","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","connectTheScoreLines","count","firstCell","step","connectionLost","getElementsByClassName","RoomManager","friendlyGame","setRoomName","setGameType","searching","setSearching","onStartGameClick","padding","Radio","checked","CompetitionSummary","summary","CompetitionsMain","Tab","defaultActiveKey","sm","Link","eventKey","Content","Pane","Tabs","transition","SingleGame","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","createNewNotice","Date","saveChanges","as","calendar","persian","locale","persian_fa","calendarPosition","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","reloadPage","selectMode","myFriends","setMyFriends","myGames","setMyGames","filterID","setFilterID","serverResponse","friends","onSelect","key","friend","ChatMessageBox","allMsgs","setAllMsgs","recieveMessage","tempMsg","App","path","reducers","combineReducers","action","clear","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","getElementById","ClientRoutes","require","ServerRoutes"],"mappings":"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","file":"static/js/main.e94858f5.chunk.js","sourcesContent":["//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com\",\r\n    wsGamePlayRoute: \"gameplay\",\r\n    wsGlobalRoute: \"global\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Credentials: \"credentials\",\r\n    PasswordChange: \"password\",\r\n    Friends: 'friends',\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    Mine: \"mine\",\r\n    Notices: \"notices\",\r\n    NoticeManagement: \"manage\"\r\n};","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\n\r\nmodule.exports = {\r\n    Token: \"ptk\",\r\n    ID: \"pid\"\r\n}","module.exports = {\r\n    TableRowMargings: [0, 40, 80, 120, 160],\r\n};\r\n","import \"../tables.css\";\r\n\r\nconst SingleScoreCard = ({Type, playerXName, playerOName, xScore, oScore }) => {\r\n    // format score text:\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        oBadgeColor = \"badge-danger\";\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        xBadgeColor = \"badge-danger\";\r\n    }\r\n\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <div className=\"card border-info mb-3 scoreCard\">\r\n            <div className=\"card-header text-center border-info\">{`T3D ${Type}x${Type}x${Type}`}</div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} scoreBadge col-1`}>\r\n                        {xScore < 10 ? `0${xScore}` : `${xScore}`}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} scoreBadge col-1`}>\r\n                        {oScore < 10 ? `0${oScore}` : `${oScore}`}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </div>\r\n            </div>\r\n            <button\r\n                id=\"btnReplayGame\"\r\n                className=\"btn btn-outline-info btn-lg btn-block\">\r\n                بازپخش بازی\r\n            </button>\r\n            {/*1st method: pass key to the score.jsx and find the specific game to replay\r\n            2nd method: pass replay function from AllScore.jsx to Score.jsx ? */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    console.log(scores);\r\n    return ( \r\n        <Fragment className=\"mx-auto\">\r\n            { scores.length ? scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    Type={score.Type}\r\n                    playerXName={score.players[0].name}\r\n                    playerOName={score.players[1].name}\r\n                    xScore={score.players[0].score}\r\n                    oScore={score.players[1].score}\r\n                ></SingleScoreCard>\r\n            )) :\r\n            <Card className=\"bg-transparent mx-auto mt-3\" border=\"danger\">\r\n                <Card.Body className=\"text-center\">\r\n                    <Card.Text>\r\n                        هیچ بازی ای انجام نگرفته اس\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                </Card>}\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Status, BrowserStorage } from \"../configs\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = sessionStorage.getItem(BrowserStorage.Token);\r\n        if (token) config.headers.Authorization = `Bearer ${token}`;\r\n        else config.headers.Authorization = \"\";\r\n        // console.log(config.headers.Authorization);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // what to do?\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= Status.BadRequest && // >= 400\r\n        error.response.status < Status.InternalServerError; // < 500\r\n\r\n        //*****notice: */\r\n        //remove some oftheese errors... because they need to be costomized in every use in each components\r\n    if (error.response.status === Status.BadRequest) {\r\n        toast.error(\r\n            \"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Unauthorized) {\r\n        toast.error(\r\n            \"احراز هویت موفقیت آمیز نیست. لطفا دوباره وارد اکانت خود شوید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Forbidden) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.NotAcceptable) {\r\n        toast.error(\"این قسمت فقط مختص کاربران ادمین می باشد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.Conflict) {\r\n        toast.error(\r\n            \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n    else if (error.response.status === Status.UnprocessableEntity) {\r\n        toast.error(\"ورودی شما با استانداردهای سایت مطابقت ندارد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\r\n            \"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport { BrowserStorage, Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignUp}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignIn}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Public}/${userID}`\r\n        );\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Public}`);\r\n    },\r\n    getMyCredentials: () => {\r\n        //token will be sent automatically, o.w. method doesnt return anything\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}`);\r\n    },\r\n    editMyCredentials: (newMe) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}`,\r\n            JSON.stringify(newMe)\r\n        );\r\n    },\r\n    changeMyPassword: (passwords) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.PasswordChange}`,\r\n            JSON.stringify(passwords)\r\n        );\r\n    },\r\n    getMyFriends: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}`);\r\n    },\r\n    isMyFriend: (targetID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}/${targetID}`\r\n        );\r\n    },\r\n    isAdministrator: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Administrators}/${userID}`\r\n        );\r\n    }, // check is admin via token? or this?:|\r\n    saveUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(BrowserStorage.ID, id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(BrowserStorage.Token, token);\r\n    },\r\n    readUserID: () => {\r\n        //from browser\r\n        // consider local storage\r\n        return sessionStorage.getItem(BrowserStorage.ID);\r\n    },\r\n};\r\n\r\nexport default userServices;","import { Routes, Status } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst gameServices = {\r\n    \r\n    getAllGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}`);\r\n    },\r\n    getMyGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}/${Server.Mine}`);\r\n    },\r\n    loadPlayerData: async(userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (userID === null) reject(null);\r\n            if (status === Status.Successful) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;","import \"../tables.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllGames();\r\n            if (status === Configs.Status.Successful) return data.allGames;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                result = result.reverse();\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        // DESIGN : USE <Tabs> ???\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-success`\r\n                                    : `btn-outline-primary`\r\n                            }`}\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-primary`\r\n                                    : `btn-outline-success`\r\n                            }`}\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-stop-circle-o px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst GameGuide = () => {\r\n    return ( \r\n        <Card border=\"warning\" className=\"mb-3 singleCard\" >\r\n            <Card.Header className=\"text-center\">راهنمای بازی</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default GameGuide;","import { Card } from 'react-bootstrap';\r\nimport './info.css'\r\n\r\nconst ContactUs = () => {\r\n    return ( \r\n        <Card border=\"dark\" className=\"mb-3 singleCard\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default ContactUs;","import { Fragment, useLayoutEffect, useState, useEffect } from \"react\";\r\nimport { Planets, Circle2, Sugar } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    const [whichOne, setWhichOne] = useState(0);\r\n    useEffect(() => {\r\n        setWhichOne(Math.floor(Math.random() * 100)); //randomize animation\r\n    }, []);\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading, whichOne]); //may have bug yet!!\r\n    //random animation\r\n    const selectedLoader =\r\n        whichOne % 3 === 0 ? (\r\n            <Circle2 time={0} customLoading={loading} />\r\n        ) : whichOne % 3 === 1 ? (\r\n            <Planets time={0} customLoading={loading} />\r\n        ) : (\r\n            <Sugar time={0} customLoading={loading} />\r\n        );\r\n\r\n    return <Fragment>{loading ? selectedLoader : null}</Fragment>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-2\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal\r\n                    backdrop=\"static\"\r\n                    show={showModal}\r\n                    onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    autoComplete=\"username\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <hr />\r\n                            <Row>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-warning\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from '../services/configs';\r\nimport { Card, Form , Button} from \"react-bootstrap\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    userServices.saveUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n                    // toast.error(\r\n                    //     \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                    //     {\r\n                    //         position: \"top-right\",\r\n                    //         closeOnClick: true,\r\n                    //     }\r\n                    // );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else if(!Configs.Status.isErrorExpected(err)){\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Card border=\"success\" className=\"mb-3 signUpCard\">\r\n                <LoadingBar loading={loading} />\r\n                <Card.Header className=\"bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام خانوادگی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">شماره دانشجویی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                autoComplete=\"username\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">ایمیل</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                autoComplete=\"new-password\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">تایید رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer className=\"border-primary bg-transparent\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {  NavLink } from \"react-router-dom\";\r\nimport {Routes, Device} from '../services/configs';\r\n\r\nconst NavigationBar = () => {\r\n    const player = useSelector((state) => state.player);\r\n    const device = useSelector(state => state.device);\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\" className=\"nav-pills text-right\">\r\n            <Container className=\"text-right\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <NavLink\r\n                    border=\"secandary\"\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"btn-success text-dark\"\r\n                    to={player ? Routes.Client.Profile : Routes.Client.SignUp}>\r\n                    <i\r\n                        className=\"fa fa-address-card px-2\"\r\n                        aria-hidden=\"true\"></i>\r\n                    {player ? player.fullname : \"ثبت نام\"}\r\n                </NavLink>\r\n\r\n                <Navbar.Collapse>\r\n                    <Nav className=\"me-auto\">\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.Root}\r\n                            exact\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-home px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            صفحه اصلی\r\n                        </NavLink>\r\n\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.GameDeck}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی ها\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.Rankings}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-list-ol px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            رنکینگ\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.GameGuide}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-eye px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            راهنما\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.ContactUs}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-phone-square px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            تماس با ما\r\n                        </NavLink>\r\n                        {device === Device.SmartPhone && <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.ChatRoom}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-phone-square px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            چت روم\r\n                        </NavLink>}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card, Form, Button, Col, Row } from \"react-bootstrap\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            // console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <Card border=\"primary\" className=\"signInSidebar\">\r\n                <Card.Header\r\n                    border=\"primary\"\r\n                    className=\"text-center text-primary\">\r\n                    ورود کاربران\r\n                </Card.Header>\r\n                <LoadingBar loading={loading} />\r\n                <Card.Body className=\"text-primary\">\r\n                    <Form onSubmit={(event) => this.onSignInSubmitted(event)} >\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            autoComplete=\"username\"\r\n                            className=\"signInSidebarTextBox\"\r\n                            placeholder=\"شماره دانشجویی\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            className=\"signInSidebarTextBox\"\r\n                            placeholder=\"رمز عبور\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Card.Footer className=\"bg-transparent border-primary\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button\r\n                                        id=\"btnSideBarSignIn\"\r\n                                        type=\"submit\"\r\n                                        variant=\"success\"\r\n                                        className=\"h-100\">\r\n                                        <i\r\n                                            className=\"fa fa-sign-in px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ورود\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button\r\n                                        id=\"btnSideBarPasswordRecovery\"\r\n                                        className=\"h-100\"\r\n                                        variant=\"warning\">\r\n                                        <i\r\n                                            className=\"fa fa-recycle px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        بازیابی پسورد\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Server.Root}/${Server.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\n\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n\r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const { status, data } =\r\n                    await noticeServices.getShortNotices();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    else\r\n                        setNotices([\r\n                            { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                        ]);\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"noticeSidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.map((notice) => {\r\n                    return (\r\n                        <Fragment>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-info-circle px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Badge, Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst OnlineStatistics = () => {\r\n    const {players, games} = useSelector((state) => state.statistics);\r\n    return (\r\n        <ListGroup className=\"list-group list-group-flush\">\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-wifi px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            کاربران آنلاین\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"badgeFontSize\" variant=\"success\" pill>\r\n                            {players}\r\n                        </Badge>\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی های فعال\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"badgeFontSize\" variant=\"success\" pill>\r\n                            {games}\r\n                        </Badge>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default OnlineStatistics;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const UpdateMyRecords = () => ({\r\n    type: \"UPDATE_ME\",\r\n});\r\n\r\nexport const TriggerRecordUpdate = () => ({\r\n    type: \"TRIGGER_UPDATE\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\nexport const ResetRoom = () => ({\r\n    type: \"RESET_ROOM\",\r\n});\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n\r\nexport const UpdateStatistics = (statistics) => ({\r\n    type: \"UPDATE_STATISTICS\",\r\n    payload: statistics,\r\n});\r\n\r\nexport const TriggerOpponentSearch = () => ({\r\n    type: \"TRIGGER_OPPONENT_SEARCH\"\r\n})\r\n\r\nexport const SendFriendRequestTo = (targetID) => ({\r\n    type: \"SEND_FRIEND_REQUEST\",\r\n    payload: targetID\r\n})\r\n\r\nexport const SendMessageTo = (name, friendID, text) => ({\r\n    type: \"SEND_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const RecieveMessageFrom = (name, friendID, text) => ({\r\n    type: \"RECIEVE_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const ResetMessages = () => ({\r\n    type: \"RESET_MESSAGES\"\r\n});\r\n\r\nexport const SetDeviceType = (Type) => ({\r\n    type: \"SET_DEVICE\",\r\n    payload: Type\r\n});","import { Alert, Button, Form, Row, InputGroup } from \"react-bootstrap\";\r\nimport {  useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendMessageTo } from \"../dashboard/actions\";\r\n\r\nconst GameChatRoom = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(null);\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n\r\n    const composeMessage = (event) => {\r\n        event.preventDefault();\r\n        dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={(event) => composeMessage(event)}>\r\n            <Row className=\"w-100 mt-3 mx-auto\">\r\n                <Alert className=\"w-100 text-right\" variant=\"info\">\r\n                    {message.recieved ? message.recieved.text : null}\r\n                </Alert>\r\n            </Row>\r\n            <Row className=\"w-100 mx-auto mb-3\">\r\n                <InputGroup className=\"w-100\">\r\n                    <InputGroup.Prepend style={{ width: \"10%\" }}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"mx-auto\"\r\n                            variant=\"outline-info\">\r\n                            <i\r\n                                className=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </InputGroup.Prepend>\r\n\r\n                    <InputGroup.Prepend style={{ width: \"90%\" }}>\r\n                        <Form.Control\r\n                            placeholder=\"پیام...\"\r\n                            value={myMessage}\r\n                            onChange={(e) => setMyMessage(e.target.value)}\r\n                            className=\"text-right\"></Form.Control>\r\n                    </InputGroup.Prepend>\r\n                </InputGroup>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default GameChatRoom;\r\n","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Badge,\r\n    Image,\r\n    ListGroup,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport OnlineStatistics from \"./OnlineStatistics\";\r\nimport { SendFriendRequestTo } from \"../dashboard/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport GameChatRoom from \"../chat/GameChatRoom\";\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { person, inGame } = props;\r\n    const me = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const [personIsFriend, setPersonIsFriend] = useState(false);\r\n\r\n    const onFriendRequestClick = (event) => {\r\n        event.target.innerHTML = \"ارسال شد...\";\r\n        event.target.disabled = true;\r\n        dispatch(SendFriendRequestTo(person.userID));\r\n    };\r\n    useEffect(() => {\r\n        if (person.userID !== me.userID) {\r\n            (async () => {\r\n                try {\r\n                    const { status, data } = await userServices.isMyFriend(\r\n                        person.userID\r\n                    );\r\n                    if (status === Configs.Status.Successful) {\r\n                        setPersonIsFriend(data.isFriend);\r\n                    }\r\n                } catch (err) {\r\n                    // handle error.\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [person, me]);\r\n    return (\r\n        <Card border=\"info\" className=\"playerInfoSideBar\">\r\n            <Card.Header className=\"text-center text-info\">\r\n                {person.fullname}\r\n            </Card.Header>\r\n            <Image\r\n                className=\"card-img-top playerAvatar\"\r\n                src={noAvatar}\r\n                alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n            />\r\n            <hr />\r\n            <Card.Body className=\"card-body\">\r\n                <ListGroup className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <ListGroup.Item>\r\n                            <Alert\r\n                                variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading className=\"text-center\">\r\n                                    {inGame.score} : {inGame.shape}\r\n                                </Alert.Heading>\r\n                            </Alert>\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>امتیاز بازیکن</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>تعداد بردها</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.wins}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">تعداد تساوی ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">تعداد باخت ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {me.userID === person.userID ? (\r\n                    <OnlineStatistics />\r\n                ) : personIsFriend ? (\r\n                    <GameChatRoom friendID={person.userID}/>\r\n                ) : (\r\n                    <Button\r\n                        variant={\"outline-info\"}\r\n                        block\r\n                        onClick={(event) => onFriendRequestClick(event)}>\r\n                        <i\r\n                            className=\"fa fa-handshake-o px-2\"\r\n                            aria-hidden=\"true\"></i>\r\n                        درخواست دوستی\r\n                    </Button>\r\n                )}\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"./profile.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../dashboard/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nimport Configs from \"../services/configs\";\r\n\r\nconst ProfilePanel = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n        <Row //bg-transparent\r\n            className=\"panelSideBar mt-2 bg-dark text-right d-flex flex-column mx-auto flex-shrink-0 p-3\">\r\n            <NavLink\r\n                to={Configs.Routes.Client.Profile}\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <svg className=\"bi me-2\" width=\"40\" height=\"32\"></svg>\r\n                <span className=\"fs-4\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </span>\r\n            </NavLink>\r\n            <hr />\r\n            <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink\r\n                        exact\r\n                        to={Configs.Routes.Client.Profile}\r\n                        className=\"nav-link\"\r\n                        aria-current=\"page\">\r\n                        <i className=\"fa fa-user-o px-3\" aria-hidden=\"true\"></i>\r\n                        مشخصات\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                        <i className=\"fa fa-users px-3\" aria-hidden=\"true\"></i>\r\n                        دوستان و بازی ها\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to={Configs.Routes.Client.ChatRoom}>\r\n                        <i className=\"fa fa-users px-3\" aria-hidden=\"true\"></i>\r\n                        چت روم\r\n                    </NavLink>\r\n                </li>\r\n                <hr />\r\n                {player && player.isAdmin && (\r\n                    <Fragment>\r\n                        {/* admin tools */}\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to={Configs.Routes.Client.Notices}>\r\n                                <i\r\n                                    className=\"fa fa-newspaper-o px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                اطلاعیه ها\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/whatever\">\r\n                                <svg\r\n                                    className=\"bi me-2\"\r\n                                    width=\"16\"\r\n                                    height=\"16\"></svg>\r\n                                امکانات ادمین\r\n                            </NavLink>\r\n                        </li>\r\n                    </Fragment>\r\n                )}\r\n            </ul>\r\n            <hr />\r\n            <Button variant=\"outline-danger\" onClick={signMeOut}>\r\n                <i className=\"fa fa-sign-out px-3\" aria-hidden=\"true\"></i>\r\n                خروج از حساب کاربری\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(ProfilePanel);\r\n","import { Routes } from \"../configs\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    TriggerOpponentSearch,\r\n    UpdateStatistics,\r\n    SetRoom,\r\n    SendFriendRequestTo,\r\n    RecieveMessageFrom,\r\n    ResetMessages,\r\n    TriggerRecordUpdate,\r\n} from \"../../dashboard/actions\";\r\nimport { Modal, Button, Row, Col, Badge } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst GlobalSocketManager = () => {\r\n    // I actually used .jsx format to make this Component EventBased\r\n    // On Each event called socket will do some specific operation\r\n    // events are actually useEffects bound to special state changes\r\n    const [socketGlobal, setSocketGlobal] = useState(null);\r\n    const [incommingFriendRequest, setIncommingFriendRequest] = useState(null);\r\n    const [showFriendshipModal, setShowFriendshipModal] = useState(false);\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const tools = useSelector((state) => state.tools);\r\n    const room = useSelector((state) => state.room);\r\n    const message = useSelector((state) => state.message);\r\n    const [clientOnline, toggleClientOnline] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const connect = useCallback(() => {\r\n        return new Promise((resolve, reject) => {\r\n            var socket = new WebSocket(\r\n                `${Routes.Server.WebSocketRoot}/${Routes.Server.wsGlobalRoute}`\r\n            );\r\n            socket.onopen = () => {\r\n                socket.send(\r\n                    JSON.stringify({\r\n                        request: \"online\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                ); //temp\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onmessage = (response) => {\r\n                const { data } = response;\r\n                const { command, msg } = JSON.parse(data);\r\n                switch (command) {\r\n                    case \"ONLINE\": {\r\n                        const { players, games } = msg;\r\n                        dispatch(\r\n                            UpdateStatistics({\r\n                                players,\r\n                                games,\r\n                            })\r\n                        ); //playing temp\r\n                        break;\r\n                    }\r\n                    case \"ENTER_ROOM\": {\r\n                        if (msg) {\r\n                            console.log(\"your room\", msg);\r\n                            dispatch(SetRoom(msg));\r\n                            socket.send(\r\n                                JSON.stringify({\r\n                                    request: \"online\",\r\n                                    clientID: player.userID,\r\n                                    msg: null,\r\n                                })\r\n                            );\r\n                        } else {\r\n                            //search again 5s later\r\n                            // **********************\r\n                            //time out must be set with rising time out time to prevent server getting fucked up\r\n                            setTimeout(() => {\r\n                                dispatch(TriggerOpponentSearch());\r\n                            }, 5000);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_REQUEST\": {\r\n                        if (msg.askerID === opponent.userID) {\r\n                            //if both players are in game then ask immidiately\r\n                            setIncommingFriendRequest(msg);\r\n                            setShowFriendshipModal(true);\r\n                        } else {\r\n                            //if the friend request is comming from some one else then manage it differently\r\n                            //...\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_RESPONSE\": {\r\n                        const { answer, targetName } = msg;\r\n                        //if(answer) dispatch(TriggerRecordUpdate());\r\n                        toast.warning(\r\n                            `کاربر ${targetName} درخواست دوستی شما را ${\r\n                                answer ? \"پذیرفت\" : \"رد کرد\"\r\n                            }`\r\n                        );\r\n                        break;\r\n                    }\r\n                    case \"CHAT\": {\r\n                        dispatch(\r\n                            RecieveMessageFrom(msg.name, msg.friendID, msg.text)\r\n                        );\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        //... whatever\r\n                        break;\r\n                    }\r\n                }\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onerror = (error) => {\r\n                // console.log(`WebSocket error: ${error}`);\r\n                socket.close();\r\n                reject(error);\r\n            };\r\n\r\n            socket.onclose = () => {\r\n                // reconnectr or what?\r\n                console.log(\"Reconnecting in  5 seconds\");\r\n                setTimeout(() => {\r\n                    (async () => {\r\n                        try {\r\n                            console.log(\"global socket online request\");\r\n                            let socket = player ? await connect() : null;\r\n                            setSocketGlobal(socket);\r\n                        } catch (err) {\r\n                            console.log(err);\r\n                        }\r\n                    })();\r\n                }, 5000);\r\n                resolve(null);\r\n                // this part needs editing ? maybe not\r\n            };\r\n        });\r\n    }, [dispatch, opponent, player]);\r\n\r\n    // EVENT NAME: PlayerUpdateEvent\r\n    // happens when player sign in status changes => set ups global socket connection and then if signed in=> reads number of online users in page\r\n    useEffect(() => {\r\n        if (clientOnline && player) {\r\n            (async () => {\r\n                try {\r\n                    console.log(\"global socket online request\");\r\n                    let socket = player ? await connect() : null;\r\n                    setSocketGlobal(socket);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [clientOnline, player, connect]);\r\n\r\n    // EVENT NAME: RandomGameInitiated Event\r\n    // happens when user clicks on 'Random Game\" Tab search button => sends opponent search request to server\r\n    useEffect(() => {\r\n        if (room.type && !room.name && socketGlobal && player) {\r\n            //is it necessary?\r\n            //completely making sure we're on right stage\r\n            console.log(room.type);\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"find\",\r\n                    clientID: player.userID,\r\n                    msg: room.type,\r\n                })\r\n            );\r\n        }\r\n    }, [player, room, tools.opponentSearchTriggered, socketGlobal]);\r\n\r\n    useEffect(() => {\r\n        if (tools.friendRequest) {\r\n            //tools.friendRequest either contains null => no request, or contains target ID for friendship\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"ask_friendship\",\r\n                    clientID: player.userID,\r\n                    msg: {\r\n                        targetID: tools.friendRequest,\r\n                        askerName: player.fullname,\r\n                    },\r\n                })\r\n            );\r\n        }\r\n    }, [tools.friendRequest, socketGlobal, player]);\r\n\r\n    const respondToFriendshipRequest = (answer) => {\r\n        // handle multiple requests *************\r\n        socketGlobal.send(\r\n            JSON.stringify({\r\n                request: \"respond_friendship\",\r\n                clientID: player.userID,\r\n                msg: {\r\n                    answer,\r\n                    targetName: player.fullname,\r\n                    askerID: incommingFriendRequest.askerID,\r\n                },\r\n            })\r\n        );\r\n        // if(answer) dispatch(TriggerRecordUpdate());\r\n        setShowFriendshipModal(false);\r\n        setIncommingFriendRequest(null);\r\n        dispatch(SendFriendRequestTo(null)); //reset friend request targetID to prevent any future problm\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (message.sent) {\r\n            //if destination is determined, otherwise => means no message has been sent\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"chat\",\r\n                    clientID: player.userID,\r\n                    msg: message.sent,\r\n                })\r\n            );\r\n            console.log(\"sent: \" + message.sent.text);\r\n            dispatch(ResetMessages());\r\n        }\r\n    }, [player, message, socketGlobal, dispatch]);\r\n\r\n    // if online status changes\r\n    setInterval(() => {\r\n        if (window.navigator.onLine) {\r\n            //client online\r\n            if (!clientOnline)\r\n                //this means -> client JUST became online\r\n                toggleClientOnline(true); //change connection status\r\n        } else {\r\n            // clients offline\r\n            if (clientOnline)\r\n                //this means -> client JUST became offline now\r\n                toggleClientOnline(false); //change connection status\r\n        }\r\n    }, 5000);\r\n\r\n\r\n    setInterval(() => {\r\n        socketGlobal && socketGlobal.send(\r\n            JSON.stringify({\r\n                request: \"online\",\r\n                clientID: player.userID,\r\n                msg: null,\r\n            })\r\n        );\r\n    }, 60000); // every ONE MINUTE request number of online members to update the site\r\n    // is it really necessary though ?????\r\n\r\n\r\n    return (\r\n        //this is just for firendship request in games\r\n        <Modal\r\n            show={showFriendshipModal}\r\n            onHide={() => respondToFriendshipRequest(false)}>\r\n            <Modal.Header closeButton />\r\n            <Modal.Body className=\"text-right\">\r\n                <p>\r\n                    {!incommingFriendRequest ? null : (\r\n                        <Badge\r\n                            style={{ fontSize: \"18px\", margin: \"2%\" }}\r\n                            pill\r\n                            variant=\"warning\">\r\n                            {incommingFriendRequest.askerName}\r\n                        </Badge>\r\n                    )}\r\n                    به شما پیشنهاد دوستی داده است.\r\n                </p>\r\n                <p>اگر تمایل به دوستی ندارید میتواند درخواست را رد کنید.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"w-100 text-right\">\r\n                <Row className=\"w-100\">\r\n                    <Col>\r\n                        <Button\r\n                            variant=\"success\"\r\n                            block\r\n                            onClick={() => respondToFriendshipRequest(true)}>\r\n                            پذیرفتن\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            block\r\n                            variant=\"danger\"\r\n                            onClick={() => respondToFriendshipRequest(false)}>\r\n                            رد\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default GlobalSocketManager;\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport SignInSideBar from \"./../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadMe, SetDeviceType, SignOut, UpdateMyRecords } from \"../dashboard/actions\";\r\nimport { Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport gameServices from \"../services/http/gameServices\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport ProfilePanel from \"../profile/ProfilePanel\";\r\nimport { useEffect } from \"react\";\r\nimport GlobalSocketManager from \"../services/ws/GlobalSocketManager\";\r\nimport {Routes, Device} from '../services/configs';\r\n\r\nconst MainLayout = (props) => {\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const tools = useSelector((state) => state.tools); //redux useful tools: like trigger update\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const scoreboard = useSelector((state) => state.scoreboard);\r\n    const dispatch = useDispatch();\r\n\r\n    const deviceIsDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const deviceIsSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const deviceIsTablet =\r\n        !deviceIsDesktop && !deviceIsSmartPhone;\r\n    if(deviceIsDesktop) dispatch(SetDeviceType(Device.Desktop));\r\n    else if(deviceIsTablet) dispatch(SetDeviceType(Device.Tablet));\r\n    else if(deviceIsSmartPhone) dispatch(SetDeviceType(Device.SmartPhone));\r\n    \r\n    /*this method is for temporary use and for finding items that cause horizontal overflow causing horizontal scrollbar\r\n    const findHorizontalOverflow = () => {\r\n        let docWidth = document.documentElement.offsetWidth;\r\n        [].forEach.call(document.querySelectorAll(\"*\"), function (el) {\r\n            if (el.offsetWidth > docWidth) {\r\n                console.log(\"here is the sabotage: \", el);\r\n            }\r\n        });\r\n    };*/\r\n\r\n    //load player data after sign in\r\n    const userID = userServices.readUserID();\r\n    useEffect(() => {\r\n        dispatch(UpdateMyRecords());\r\n    }, [tools.updateTriggered, dispatch]);\r\n    if (userID && !player) {\r\n        console.log(\"auth called\");\r\n        gameServices\r\n            .loadPlayerData(userID)\r\n            .then((result) => {\r\n                dispatch(LoadMe(result ? result : null));\r\n            })\r\n            .catch((err) => {\r\n                dispatch(LoadMe(null));\r\n            });\r\n    } else if (player && !userID) {\r\n        //still doesnt log out completely automatic:\r\n        //how to sign out after token expires?\r\n        dispatch(SignOut());\r\n    }\r\n    let pageLeftSideBar = <NoticeSideBar />;\r\n    let pageRightSideBar = player ? (\r\n        <PlayerInfoSideBar person={player} inGame={scoreboard.me} />\r\n    ) : (\r\n        <SignInSideBar />\r\n    ); // in case login hassnt been made\r\n\r\n    const inProfilePages = pathname.includes(Routes.Client.Profile);\r\n\r\n    if (pathname === Routes.Client.SignUp) pageLeftSideBar = pageRightSideBar = null;\r\n    else if (inProfilePages) {\r\n        pageLeftSideBar = null;\r\n        pageRightSideBar = !deviceIsSmartPhone ? <ProfilePanel /> : null; //for now profile panel is hidden in phone\r\n    } else if (pathname === Routes.Client.GameDeck) {\r\n        // left sidebar must be opponents playerInfo\r\n        if (opponent) {\r\n            pageLeftSideBar = (\r\n                <PlayerInfoSideBar person={opponent} inGame={scoreboard.opp} />\r\n            );\r\n        }\r\n        if (deviceIsSmartPhone) {\r\n            //this is temprory\r\n            // find a way for showing result in smartphone, without causing vertical scroll\r\n            pageLeftSideBar = null; //،ٍء\\\r\n            pageRightSideBar = null; // change then\r\n        }\r\n    }\r\n\r\n    // *******create independent components for each device****????\r\n    // socket global only renders when client is signed in\r\n    return (\r\n        <Fragment>\r\n            {player && <GlobalSocketManager />}\r\n            <ToastContainer />\r\n            <NavigationBar />\r\n            {deviceIsDesktop && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {pageRightSideBar && <Col xs={3}>{pageRightSideBar}</Col>}\r\n                    <Col className=\"mx-auto\" xs={pathname !== Routes.Client.SignUp ? null : 7}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={3}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsTablet && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {pathname === Routes.Client.Profile && pageRightSideBar && (\r\n                        <Col xs={4}>{pageRightSideBar}</Col>\r\n                    )}\r\n                    <Col className=\"mx-auto\" xs={pathname !== Routes.Client.SignUp ? null : 7} >\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={4}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsSmartPhone && (\r\n                <Container>\r\n                    {/* what to do for control panelk sidebar in smartphone */}\r\n                    {player ? (\r\n                        <Row className=\"w-100 mx-auto\">{pageRightSideBar}</Row>\r\n                    ) : null}\r\n                    <Row className=\"w-100 mx-auto\">{pageLeftSideBar}</Row>\r\n                    <Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n                    \r\n                </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        \r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"5px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n                <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                    <thead className=\"bg-info\">\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">نام بازیکن</th>\r\n                            <th scope=\"col\">امتیاز</th>\r\n                            <th scope=\"col\">تعداد برد</th>\r\n                            <th scope=\"col\">تعداد باخت</th>\r\n                            <th scope=\"col\">تعداد تساوی</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {players.map((player) => (\r\n                            <SinglePlayerCard\r\n                                key={player.userID}\r\n                                rowNumber={players.findIndex(p => p.userID === player.userID) + 1}\r\n                                name={player.fullname}\r\n                                points={player.records.points}\r\n                                wins={player.records.wins}\r\n                                loses={player.records.loses}\r\n                                draws={player.records.draws}\r\n                            ></SinglePlayerCard>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport LoadingBar from \"../../common/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <div className=\"row mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <div className=\"col-12\">\r\n                    <AllPlayers players={players} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import {Routes} from '../configs';\r\n\r\nconst createSocketRequest = (request, roomName, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        roomName,\r\n        playerID,\r\n        msg,\r\n    });\r\n\r\nconst connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(`${Routes.Server.WebSocketRoot}/${Routes.Server.wsGamePlayRoute}`);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            // setTimeout( () => {\r\n            //     connect(roomName, playerID);\r\n            //     console.log('reconnecting from onClose');\r\n            // }, 1000)\r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n\r\nconst gamePlaySocketServices = {\r\n    createSocketRequest,\r\n    connect,\r\n};\r\n\r\nexport default gamePlaySocketServices;","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    UpdateMyRecords,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n    ResetRoom,\r\n    TriggerRecordUpdate,\r\n    // UpdateStatistics,\r\n    // TriggerOpponentSearch,\r\n    // SendFriendRequestTo,\r\n    // SendMessageTo,\r\n    // RecieveMessageFrom,\r\n    // ResetMessages,\r\n    // SetDeviceType,\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n        tools: state.tools,\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        UpdateMyRecords: () => dispatch(UpdateMyRecords()),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        ResetRoom: () => dispatch(ResetRoom()),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n        TriggerRecordUpdate: () => dispatch(TriggerRecordUpdate()),\r\n        //for memory managment these are commented because they arent used in Class Components yet\r\n        //UpdateStatistics: (stat) => dispatch(UpdateStatistics(stat)),\r\n        //TriggerOpponentSearch: () => dispatch(TriggerOpponentSearch()),\r\n        //SendFriendRequestTo: () => dispatch(SendFriendRequestTo()),\r\n        //SendMessageTo: (name, friendID, text) => dispatch(SendMessageTo(name, friendID, text)),\r\n        //RecieveMessageFrom: (name, friendID, text) => dispatch(RecieveMessageFrom(name, friendID, text)),\r\n        //ResetMessages: () => dispatch(ResetMessages())\r\n        //SetDeviceType: () => dispatch(SetDeviceType()),\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Card, Col, Row } from \"react-bootstrap\";\r\n\r\nconst BriefScoreboard = ({ players}) => {\r\n    return (\r\n        <Card.Header className=\"w-100 text-center\">\r\n            <Row>\r\n                <Col\r\n                    style={{\r\n                        fontSize: \"20px\",\r\n                        textAlign: \"right\",\r\n                        color: players[1].color,\r\n                    }}>\r\n                    {players[1].shape} : {players[1].score}\r\n                </Col>\r\n                <Col className=\"text-warning\" style={{\r\n                        fontSize: \"18px\"}}>\r\n                    <i className=\"fa fa-clock-o px-2\" aria-hidden=\"true\"></i>\r\n                </Col>\r\n                <Col\r\n                    style={{\r\n                        fontSize: \"20px\",\r\n                        textAlign: \"left\",\r\n                        color: players[0].color,\r\n                    }}>\r\n                    {players[0].score} : {players[0].shape}\r\n                </Col>\r\n            </Row>\r\n        </Card.Header>\r\n    );\r\n};\r\n\r\nexport default BriefScoreboard;\r\n","import { Fragment } from \"react\";\r\nimport { Button, Card, Row } from \"react-bootstrap\";\r\nimport { GameSetting } from \"../../services/configs\";\r\nimport BriefScoreboard from \"./BriefScoreboard\";\r\nimport \"../games.css\";\r\n\r\nconst TableDesign = ({ dimension, players, table, onEachCellClick }) => {\r\n    let dimens = [];\r\n    for (let i = 0; i < dimension; i++) dimens.push(i);\r\n\r\n    return (\r\n        <Card\r\n            id=\"divTableBlock\"\r\n            bg=\"transparent\"\r\n            border=\"dark\"\r\n            className=\"w-100 mx-auto\">\r\n            <BriefScoreboard players={players} />\r\n            <Card.Body className=\"gameBorderCard\">\r\n                {table ? (\r\n                    dimens.map((floor) => (\r\n                        <Fragment>\r\n                            {dimens.map((row) => (\r\n                                <Row\r\n                                    style={{\r\n                                        direction: \"ltr\",\r\n                                        marginLeft: `${GameSetting.TableRowMargings[row]}px`,\r\n                                    }}>\r\n                                    {dimens.map((column) => (\r\n                                        <Button\r\n                                            key={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            variant=\"btn btn-outline-dark\"\r\n                                            className=\"gameTableCells\"\r\n                                            style={\r\n                                                table[floor][row][column] !==\r\n                                                null\r\n                                                    ? {\r\n                                                          color: players[\r\n                                                              table[floor][row][\r\n                                                                  column\r\n                                                              ]\r\n                                                          ].color,\r\n                                                      }\r\n                                                    : null\r\n                                            }\r\n                                            id={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            onClick={(event) =>\r\n                                                onEachCellClick(event)\r\n                                            }>\r\n                                            {table[floor][row][column] !==\r\n                                                null &&\r\n                                                players[\r\n                                                    table[floor][row][column]\r\n                                                ].shape}\r\n                                        </Button>\r\n                                    ))}\r\n                                </Row>\r\n                            ))}\r\n                            <br />\r\n                        </Fragment>\r\n                    ))\r\n                ) : (\r\n                    <p> در حال اتصال... </p>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TableDesign;\r\n","import { Component } from \"react\";\r\nimport \"../games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport gamePlaySocketServices from \"../../services/ws/gamePlaySocketServices\";\r\nimport withReduxDashboard from \"../../dashboard/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\nimport TableDesign from \"./TableDesign\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n                color: \"blue\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketGamePlay: undefined,\r\n        playerOnline: true,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.connectionLost = false;\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                    toast.info(\"حریف شما هم به بازی متصل شد\");\r\n                    toast.warn(\r\n                        \"حرکت اول با: \" +\r\n                            (!this.state.myTurn ? \"شما\" : \"حریف شما\")\r\n                    );\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") {\r\n            this.setState({ myTurn: Number(msg) });\r\n        } else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const { IDs, gameType } = msg;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.setState({ dimension: gameType });\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const { players } = this.state;\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            // toast.warn('new-move-recieved');\r\n            //******** */ catch exceptions\r\n            // ****** UPDATE THIS PART **************************************//\r\n            const { newMove, cell, xScore, oScore } = msg; //is table needed to be sent every time to clients?\r\n\r\n            const cellID = Number(newMove);\r\n\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                players,\r\n            });\r\n\r\n            //force connect it?\r\n            this.state.socketGamePlay.send(\r\n                gamePlaySocketServices.createSocketRequest(\r\n                    \"moveRecieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            this.verifyAndApplyTheMove(cell, this.cellButtons[cellID]);\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"END\") {\r\n            this.endGame();\r\n        }\r\n    };\r\n\r\n    forceConnectToWebSocket = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await gamePlaySocketServices.connect(\r\n                room.name,\r\n                player.userID,\r\n                room.type\r\n            );\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketGamePlay: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n            // **********************\r\n            //time out must be set with rising time out time to prevent server getting fucked up\r\n            setTimeout(() => {\r\n                console.log(\"rconnecting from GamePlay\");\r\n                this.forceConnectToWebSocket(nextJob);\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n    initiateGameTimer = () => {\r\n        setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (!this.state.playerOnline) { //player JUST became online\r\n                    console.log(\"connected\");\r\n                    this.setState({ playerOnline: true });// toggle online status\r\n                    this.forceConnectToWebSocket(null);  // reconnect to gamePlayWebSocket\r\n                }\r\n            } else if (this.state.playerOnline) { //player JUST became offline\r\n                console.log(\"dissconnected\");\r\n                this.setState({ playerOnline: false });\r\n            }\r\n        }, 2500); //2.5 sec is it ok?\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"gameTableCells\"); // pay attension to searched className! may cause an error\r\n\r\n        const { player, room } = this.props;\r\n        console.log();\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectToWebSocket(() => {\r\n            this.state.socketGamePlay.send(\r\n                gamePlaySocketServices.createSocketRequest(\r\n                    \"load\",\r\n                    room.name,\r\n                    player.userID,\r\n                    null\r\n                )\r\n            );\r\n        });\r\n\r\n        console.log(\"TOO MANY UNNEEDED PROPS SENT: \", this.props);\r\n        this.initiateGameTimer();\r\n    }\r\n\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    this.forceConnectToWebSocket(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n                    this.forceConnectToWebSocket(() => {\r\n                        this.state.socketGamePlay.send(\r\n                            gamePlaySocketServices.createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        this.state.socketGamePlay.send(\r\n                            gamePlaySocketServices.createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.value = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({\r\n                turn: (turn + 1) % 2,\r\n                table: tempTable,\r\n            });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"gameTableCells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"gameTableCells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    endGame = async () => {\r\n        //*******************important:\r\n        //ADD TRY CATCHimport gamePlaySocketServices from './../services/gamePlaySocketServices';\r\n        //*************edit: this.context.gatherPlayerData();پ\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else toast.error(\"تکبیر!\");\r\n        //reset everything:\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.ResetRoom();\r\n            this.props.TriggerRecordUpdate();\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <TableDesign\r\n                dimension={this.state.dimension}\r\n                players={this.state.players}\r\n                table={this.state.table}\r\n                onEachCellClick={this.onEachCellClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectToWebSocket(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectToWebSocket(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom, TriggerOpponentSearch } from \"../dashboard/actions\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport LoadingBar from '../common/LoadingBar';\r\n\r\nconst RoomManager = ({ friendlyGame }) => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n        if (friendlyGame) dispatch(SetRoom({ name: roomName, type: gameType }));\r\n        // random game:\r\n        else {\r\n            dispatch(SetRoom({ name: null, type: gameType }));\r\n            dispatch(TriggerOpponentSearch());\r\n            setSearching(true);\r\n        }\r\n    };\r\n\r\n    //on destroy\r\n    useEffect(() => {\r\n        return () => {\r\n            setSearching(false); //make sure preloader turns off\r\n         }\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <LoadingBar loading={searching} />\r\n            <hr />\r\n            <Form onSubmit={(event) => onStartGameClick(event)}>\r\n                <Form.Group className=\"form-inline\">\r\n                    <Form.Label className=\"w-25\">ابعاد جدول</Form.Label>\r\n                    <InputGroup\r\n                        style={{\r\n                            border: \"1px solid orange\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"2px\",\r\n                        }}>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"3\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)}\r\n                            />\r\n                            <InputGroup.Text>3 * 3 * 3</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"4\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)}\r\n                            />\r\n                            <InputGroup.Text>4 * 4 * 4</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"5\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)}\r\n                            />\r\n                            <InputGroup.Text>5 * 5 * 5</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <hr />\r\n                {friendlyGame && (\r\n                    \r\n                    <Form.Group className=\"mt-3 form-inline\">\r\n                        \r\n                        <Form.Label className=\"w-25\">نام روم</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"w-75 text-left bg-transparent\"\r\n                            placeholder=\"Room Name\"\r\n                            value={roomName}\r\n                            required=\"required\"\r\n                            onChange={(event) =>\r\n                                setRoomName(event.target.value)\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                )}\r\n                <hr />\r\n                <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                    <i\r\n                        className={`fa ${\r\n                            friendlyGame ? \"fa-handshake-o\" : \"fa-search\"\r\n                        } px-2`}\r\n                        aria-hidden=\"true\"></i>\r\n                    {friendlyGame ? \"ارسال درخواست\" : \"جستجو\"}\r\n                </Button>\r\n            </Form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import { Alert, Badge, Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst CompetitionSummary = ({ title, summary }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" variant=\"info\">\r\n                    <Alert.Heading className=\"text-center\">\r\n                        <Badge variant=\"success p-2\" >\r\n                            {title}\r\n                        </Badge>\r\n                    </Alert.Heading>\r\n\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill=\"true\" variant=\"info\">\r\n                    <p>تعداد شرکت کنندگان : 00000000</p>\r\n                    <p>نکات دیگر</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col>\r\n                    <Button block variant=\"outline-success\">شرکت در مسابقه</Button>\r\n                </Col>\r\n                <Col>\r\n                <Button block variant=\"outline-secondary\">بازیکنان حاضر</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionSummary;\r\n","import { Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport \"./competitions.css\";\r\nimport CompetitionSummary from \"./CompetitionSummary\";\r\n\r\nconst CompetitionsMain = () => {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <hr />\r\n\r\n            <Row>\r\n                <Col className=\"competitionMenuBody\" sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"first\">\r\n                                جام حذفی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"second\">\r\n                                لیگ امتیازی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"third\">\r\n                                بازی شرطی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"forth\">\r\n                                جدول رندوم\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"fifth\">\r\n                                و غیره\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Col>\r\n                {/* <div style={{borderLeft: '1px solid gray', height:'500px'}}></div> */}\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <CompetitionSummary\r\n                                title=\"جام حذفی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <CompetitionSummary\r\n                                title=\"لیگ امتیازی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <CompetitionSummary\r\n                                title=\"بازی شرطی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"forth\">\r\n                            <CompetitionSummary\r\n                                title=\"جدول رندوم\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"fifth\">\r\n                            <CompetitionSummary\r\n                                title=\"و غیره\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionsMain;\r\n","import GamePlay from \"./gameplay/GamePlay\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SingleGame from \"./SingleGame\";\r\nimport { Tab, Tabs, Card, Fade } from \"react-bootstrap\";\r\nimport { Fragment } from \"react\";\r\nimport CompetitionsMain from \"./competitions/CompetitionsMain\";\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector((state) => state.room);\r\n\r\n    return (\r\n        <Fragment>\r\n            {room.name ? (\r\n                <GamePlay />\r\n            ) : (\r\n                <Card\r\n                    border=\"secondary\"\r\n                    bg=\"transparent\"\r\n                    className=\"gameDeckCard\">\r\n                    <Card.Body>\r\n                        <Tabs\r\n                            defaultActiveKey=\"randomGame\"\r\n                            transition={false}\r\n                            id=\"noanim-tab-example\"\r\n                            variant=\"pills\"\r\n                            // transition={Fade}\r\n                            className=\"mb-3\">\r\n                            \r\n                            <Tab eventKey=\"randomGame\" title=\"بازی تصادفی\">\r\n                                <SingleGame friendlyGame={false} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"competitions\" title=\"مسابقات\">\r\n                                <CompetitionsMain />\r\n                            </Tab>\r\n                            <Tab eventKey=\"friendlyGame\" title=\"بازی با دوستان\">\r\n                                <SingleGame friendlyGame={true} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Card.Body>\r\n                </Card>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport \"./profile.css\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nconst NoticeManager = () => {\r\n    //u can create another component for listing notices ?\r\n    const player = useSelector((state) => state.player);\r\n    const [isAllowed, setAllowed] = useState(undefined);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [notices, setNotices] = useState([]);\r\n    const [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n    const [updateTrigger, setUpdateTrigger] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const resetStates = () => {\r\n        setTitle(\"\");\r\n        setText(\"\");\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n        setSelectedNoticeID(null);\r\n        setUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n    };\r\n\r\n    useEffect(() => {\r\n        //use another simpler preloader\r\n        //load all notices in left side for selecting: load all and push them in notices state\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } =\r\n                    await noticeServices.getAdvancedNotics();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    else\r\n                        setNotices([\r\n                            { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                        ]);\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [updateTrigger]);\r\n\r\n    //***** in server implemented a middleware for this, is this needed? */\r\n    if (player && isAllowed === undefined) {\r\n        //in admin tools pages: admin status is checked directly dor completely making sure that user is admin and he/her is trusted directly from server\r\n        (async () => {\r\n            try {\r\n                const { data, status } = await userServices.isAdministrator(\r\n                    player.userID\r\n                );\r\n                if (status === Configs.Status.Successful) return data.answer;\r\n                return false;\r\n            } catch (err) {\r\n                //CHECK THIS PART\r\n                return false;\r\n            }\r\n        })()\r\n            .then((answer) => {\r\n                setAllowed(answer);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"مشکلی در تعیین سطح دسترسی شما بوجود آمد. لطفا مجددا تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n            });\r\n    }\r\n\r\n    // show proper message for simple users\r\n    if (!player || isAllowed === false) {\r\n        //in first render a wronge message will be shown! find a fix\r\n        //2nd condition must be exactly the same\r\n        toast.warn(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\", {\r\n            position: \"top-left\",\r\n            closeOnClick: true,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    //runs when create notice button clicks\r\n    const createNewNotice = async () => {\r\n        //add patern and stuff to states and inputs\r\n        try {\r\n            setLoading(true);\r\n            const { status } = await noticeServices.createNotice({\r\n                title,\r\n                text,\r\n                startDate: new Date(startDate),\r\n                endDate: new Date(endDate),\r\n            });\r\n            //*********** */\r\n            //COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n            if (status === Configs.Status.CreatedSuccessfully) {\r\n                toast.success(`اطلاعیه ی ${title} با موفقیت ساخته شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selecteNotice = (notice) => {\r\n        // console.log(notice);\r\n        setSelectedNoticeID(notice._id);\r\n        setTitle(notice.title);\r\n        setText(notice.text);\r\n        setStartDate(new Date(notice.startDate));\r\n        setEndDate(new Date(notice.endDate));\r\n    };\r\n\r\n    const cancelEditing = () => {\r\n        resetStates();\r\n    };\r\n\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        if (!selectedNoticeID) return;\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await noticeServices.editNotice(\r\n                selectedNoticeID,\r\n                { title, text, startDate, endDate }\r\n            );\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n    // if admin status is checked directly by server then start rendering the page\r\n    //consists two part\" right part => used for creating and editing notices\r\n    //left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n    //edit all heights in control panel\r\n    //add patern and stuff to states and inputs\r\n    return (\r\n        <Fragment>\r\n            {player && isAllowed && (\r\n                <Row style={{ height: \"100%\" }}>\r\n                    <LoadingBar loading={loading} />\r\n                    <Col xs={5}>\r\n                        <Card\r\n                            border=\"success\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه جدید\r\n                            </Card.Header>\r\n                            <Card.Body className=\"text-right\">\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    عنوان اطلاعیه\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    className=\"my-1 mx-auto\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"عنوان\"\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    توضیحات\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    className=\"my-1 mx-auto h-25\"\r\n                                    placeholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n                                    value={text}\r\n                                    required=\"requires\"\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ شروع نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto w-100\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={startDate}\r\n                                    onChange={setStartDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ پایان نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={endDate}\r\n                                    onChange={setEndDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                                {!selectedNoticeID ? (\r\n                                    <Button\r\n                                        block\r\n                                        variant=\"success\"\r\n                                        onClick={createNewNotice}>\r\n                                        <i\r\n                                            className=\"fa fa-floppy-o px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ایجاد اطلاعیه\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-primary\"\r\n                                                onClick={saveChanges}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                ذخیره تغییرات\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-warning text-secondary\"\r\n                                                onClick={cancelEditing}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                لغو ویرایش\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs={7}>\r\n                        <Card\r\n                            border=\"info\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه های قبلی\r\n                            </Card.Header>\r\n                            <Card.Body\r\n                                style={{ overflowY: \"scroll\" }}\r\n                                className=\"text-right\">\r\n                                {notices.map((notice) => {\r\n                                    return (\r\n                                        <Fragment>\r\n                                            <Alert variant=\"secondary\">\r\n                                                <i\r\n                                                    className=\"fa fa-info-circle px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"red\",\r\n                                                        fontSize: \"18px\",\r\n                                                    }}>\r\n                                                    {notice.title}\r\n                                                </span>\r\n                                                : {notice.text}\r\n                                                <i\r\n                                                    className=\"iconEditNotice fa fa-pencil-square-o px-3\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    onClick={() =>\r\n                                                        selecteNotice(notice)\r\n                                                    }></i>\r\n                                            </Alert>\r\n                                            <hr />\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport \"./profile.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerRecordUpdate } from \"../dashboard/actions\";\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    //on component mount download user credentials\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } = await userServices.getMyCredentials();\r\n                if (status === Configs.Status.Successful) {\r\n                    const { me } = data;\r\n                    setFullname(me.fullname);\r\n                    setStudentID(me.studentID);\r\n                    setEmail(me.email);\r\n                }\r\n            } catch (err) {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`تغییرات با موفقیت اعمال شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const changeMyPassword = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.changeMyPassword({\r\n                studentID,\r\n                password,\r\n                newPassword,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`رمز شما با موفقیت تغییر داده شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch (pageMode) {\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                changeMyPassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const checkConfirmPassword = (event) => {\r\n        setConfirmNewPassword(event.target.value);\r\n        if (newPassword !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور جدید باید با خود رمز عبور جدید مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n\r\n    // *************************** DESIGN NOTE *******/\r\n    // HOW ABOUT USING TABS ? <Tabs>\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"mx-auto bigSingleCard\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-50 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.READ_ONLY && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.EDIT && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.CHANGE_PASS && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={(e) => selectMode(e)}>\r\n                    <Card.Body className=\"w-50 mx-auto\">\r\n                        <LoadingBar loading={loading} />\r\n\r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"userInfoTextBox w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={newPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setNewPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        تایید رمز عبور جدید\r\n                                    </Form.Label>\r\n\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        value={confirmNewPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(event) =>\r\n                                            checkConfirmPassword(event)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={!pageMode}\r\n                            block\r\n                            variant=\"success\"\r\n                            className=\"w-50 mx-auto\">\r\n                            <i\r\n                                className=\"fa fa-wrench px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت تغییرات\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","import { useState, useEffect } from \"react\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport gameServices from \"../services/http/gameServices\";\r\nimport { Card, Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport AllScores from \"../tables/scores/AllScores\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport './profile.css';\r\n\r\nconst MyGamesAndFriends = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [myFriends, setMyFriends] = useState([]);\r\n    const [myGames, setMyGames] = useState([]);\r\n    const [filterID, setFilterID] = useState(\"me\");\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true); // use preloader here?\r\n                let serverResponse = await gameServices.getMyGames();\r\n                if (serverResponse.status === Configs.Status.Successful)\r\n                    setMyGames(serverResponse.data.myGames.reverse());\r\n                serverResponse = await userServices.getMyFriends();\r\n                if (serverResponse.status === Configs.Status.Successful)\r\n                    setMyFriends(serverResponse.data.friends);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card\r\n            border=\"secondary\"\r\n            bg=\"transparent\"\r\n            className=\"mx-auto bigSingleCard\">\r\n            <Card.Header className=\"text-center\">\r\n                لیست دوستان و آمار بازی ها\r\n            </Card.Header>\r\n            <LoadingBar loading={loading} />\r\n            <Card.Body >\r\n                <Tab.Container\r\n                    defaultActiveKey={filterID}\r\n                    onSelect={(key) => setFilterID(key)}>\r\n                    <Row>\r\n                        <Col xs={2}>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column text-right\">\r\n                                <Nav.Item>\r\n                                    <Nav.Link eventKey=\"me\">\r\n                                        همه بازی ها\r\n                                    </Nav.Link>\r\n                                </Nav.Item>\r\n                                {myFriends.map((friend) => (\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey={friend.userID}>\r\n                                            {friend.fullname}\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        <Col>\r\n                            <Tab.Content >\r\n                                <Tab.Pane eventKey=\"me\">\r\n                                    <AllScores scores={myGames} />\r\n                                </Tab.Pane>\r\n                                {myFriends.map((friend) => (\r\n                                    <Tab.Pane eventKey={friend.userID}>\r\n                                        <AllScores\r\n                                            scores={myGames.filter(\r\n                                                (game) =>\r\n                                                    friend.userID ===\r\n                                                        game.players[0].id ||\r\n                                                    friend.userID ===\r\n                                                        game.players[1].id\r\n                                            )}\r\n                                        />\r\n                                    </Tab.Pane>\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        {filterID !== \"me\" && myFriends.length && <Col xs={4}>\r\n                            <PlayerInfoSideBar person={myFriends.length ? myFriends[0] : null} />\r\n                        </Col>}\r\n                    </Row>\r\n                </Tab.Container>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default MyGamesAndFriends;\r\n","import {\r\n    Alert,\r\n    Button,\r\n    Card,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    InputGroup,\r\n    Row,\r\n    Tab,\r\n} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch} from \"react-redux\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport { SendMessageTo } from \"../dashboard/actions\";\r\nimport './chat.css';\r\nimport {Device} from '../services/configs';\r\n\r\nconst ChatMessageBox = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(\"\");\r\n    const message = useSelector((state) => state.message);\r\n    const device = useSelector((state) => state.device);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n\r\n    //...TEMP: just save msges in client side\r\n    const [allMsgs, setAllMsgs] = useState([{ me: null, friend: null }]);\r\n\r\n    const composeMessage = (event) => {\r\n        event.preventDefault();\r\n        let tempMsg = [...allMsgs];\r\n        tempMsg.push({ me: myMessage, friend: null });\r\n        setAllMsgs(tempMsg);\r\n        dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n        setMyMessage(null);\r\n    };\r\n\r\n    const recieveMessage = useCallback(\r\n        (msg) => {\r\n            let tempMsg = [...allMsgs];\r\n            tempMsg.push({ me: null, friend: msg.text });\r\n            return tempMsg;\r\n        },\r\n        [allMsgs]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const { recieved } = message;\r\n        if (!message.sent && recieved && recieved.friendID === friendID) {\r\n            setAllMsgs(recieveMessage(message.recieved));\r\n        }\r\n    }, [message, friendID]);\r\n\r\n    return (\r\n        <Tab.Pane eventKey={friendID}>\r\n            <Container>\r\n                <Row>\r\n                    <Card\r\n                        border=\"dark\"\r\n                        bg=\"transparent\"\r\n                        className={`mx-auto bigSingleCard ${device !== Device.SmartPhone ? \"chatBoxScrollable\" : \"smartphoneChatBoxScrollable\"}`}>\r\n                        <Card.Body>\r\n                            {allMsgs.map((msg) => (\r\n                                <Row>\r\n                                    <Col>\r\n                                        {msg.me && (\r\n                                            <Alert\r\n                                                className=\"w-100 text-right\"\r\n                                                variant=\"dark\">\r\n                                                {msg.me}\r\n                                            </Alert>\r\n                                        )}\r\n                                    </Col>\r\n                                    <Col>\r\n                                        {msg.friend && (\r\n                                            <Alert\r\n                                                className=\"w-100 text-right\"\r\n                                                variant=\"primary\">\r\n                                                {msg.friend}\r\n                                            </Alert>\r\n                                        )}\r\n                                    </Col>\r\n                                </Row>\r\n                            ))}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Form\r\n                        onSubmit={(event) => composeMessage(event)}\r\n                        className=\"w-100 mt-3\">\r\n                        <InputGroup className=\"w-100\">\r\n                            <InputGroup.Prepend\r\n                                style={{\r\n                                    width: \"8%\",\r\n                                }}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    style={{\r\n                                        border: \"none\",\r\n                                    }}\r\n                                    className=\"w-100 mx-auto\"\r\n                                    variant=\"outline-info\">\r\n                                    <i\r\n                                        className=\"fa fa-paper-plane\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n\r\n                            <InputGroup.Prepend\r\n                                style={{\r\n                                    margin: \"auto\",\r\n                                    width: \"92%\",\r\n                                }}\r\n                                value={myMessage}\r\n                                onChange={(e) => setMyMessage(e.target.value)}>\r\n                                <Form.Control\r\n                                    placeholder=\"پیام...\"\r\n                                    className=\"bg-transparent chatRoomMessageBox mx-auto text-right\"></Form.Control>\r\n                            </InputGroup.Prepend>\r\n                        </InputGroup>\r\n                    </Form>\r\n                </Row>\r\n            </Container>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default ChatMessageBox;\r\n","import { Card, Row, Col, Nav, Tab } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Configs from \"../services/configs\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport SingleChatCard from \"./ChatMessageBox\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./chat.css\";\r\n\r\nconst ChatRoom = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const device = useSelector((state) => state.device);\r\n    const [myFriends, setMyFriends] = useState([]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true); // use preloader here?\r\n                const { status, data } = await userServices.getMyFriends();\r\n                if (status === Configs.Status.Successful)\r\n                    setMyFriends(data.friends);\r\n            } catch (err) {\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card\r\n            border=\"secondary\"\r\n            bg=\"transparent\"\r\n            className=\"mx-auto bigSingleCard\">\r\n            <Card.Header className=\"text-center\">چت روم شما</Card.Header>\r\n            <Card.Body>\r\n                <Tab.Container\r\n                // id=\"left-tabs-example\"\r\n                // defaultActiveKey={filterID}\r\n                // onSelect={(key) => setFilterID(key)}\r\n                >\r\n                    <Row>\r\n                        <Col\r\n                            className={\r\n                                device !== Configs.Device.SmartPhone\r\n                                    ? \"chatRoomDevider chatScrollableFriends\"\r\n                                    : \"smartphoneChatScrollableFriends\"\r\n                            }\r\n                            sm={3}>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column text-right\">\r\n                                {myFriends.map((friend) => (\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey={friend.userID}>\r\n                                            {friend.fullname}\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        <Col>\r\n                            <Tab.Content>\r\n                                {myFriends.map((friend) => (\r\n                                    <SingleChatCard friendID={friend.userID} />\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n                    </Row>\r\n                </Tab.Container>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import { Component } from \"react\";\r\nimport ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport GameGuide from \"./informations/GameGuide\";\r\nimport ContactUs from \"./informations/ContactUs\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./common/MainLayout\";\r\nimport Rankings from \"./tables/rankings/Rankings\";\r\nimport GameDeck from \"./games/GameDeck\";\r\nimport NoticeManager from \"./profile/NoticeManager\";\r\nimport AccountCredentials from \"./profile/AcountCredentials\";\r\nimport MyGamesAndFriends from \"./profile/MyGamesAndFriends\";\r\nimport { Routes } from \"./services/configs\";\r\nimport ChatRoom from \"./chat/ChatRoom\";\r\n\r\nclass App extends Component {\r\n    // 1. use uuid to produce ids\r\n    // state = {  }\r\n\r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path={Routes.Client.SignUp} component={SignUp} />\r\n                    <Route path={Routes.Client.GameDeck} component={GameDeck} />\r\n                    <Route path={Routes.Client.Rankings} component={Rankings} />\r\n                    <Route\r\n                        path={Routes.Client.GameGuide}\r\n                        component={GameGuide}\r\n                    />\r\n                    <Route\r\n                        path={Routes.Client.ContactUs}\r\n                        component={ContactUs}\r\n                    />\r\n\r\n                    <Route\r\n                        path={Routes.Client.MyGamesAndFriends}\r\n                        component={MyGamesAndFriends}\r\n                    />\r\n                    <Route\r\n                        path={Routes.Client.Notices}\r\n                        component={NoticeManager}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path={Routes.Client.Profile}\r\n                        component={AccountCredentials}\r\n                    />\r\n                    <Route\r\n                        path={Routes.Client.ChatRoom}\r\n                        component={ChatRoom}\r\n                    />\r\n                    \r\n                    <Route\r\n                        path={Routes.Client.Root}\r\n                        exact\r\n                        component={ScoresTable}\r\n                    />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\nimport { statisticsReducer } from \"./statistics\";\r\nimport { messageReducer } from './message';\r\nimport { deviceReducer } from './device';\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer,\r\n    statistics: statisticsReducer,\r\n    message: messageReducer,\r\n    device: deviceReducer\r\n});","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n\r\n        case \"UPDATE_ME\":\r\n            return null; //sets state.player => null, forces Mainlayout to reload and update state.player data\r\n\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = {name: null, type: null}, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {name, type} = action.payload;            \r\n            return {name, type};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        case \"RESET_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (\r\n    state = {\r\n        updateTriggered: false,\r\n        opponentSearchTriggered: false,\r\n        friendRequest: false,\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"TRIGGER_UPDATE\":\r\n            return {\r\n                updateTriggered: !state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger update\r\n        case \"TRIGGER_OPPONENT_SEARCH\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: !state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger search\r\n        case \"SEND_FRIEND_REQUEST\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","\r\nexport const statisticsReducer = (state = {players: 0, games: 0}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_STATISTICS\":\r\n            const {players, games} = action.payload;\r\n            return {players, games};\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","export const messageReducer = (\r\n    state = { sent: null, recieved: null },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"RECIEVE_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log(action.payload);\r\n                return { recieved: { name, friendID, text }, sent: state.sent };\r\n            }\r\n        case \"SEND_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log('payload', action.payload);\r\n                return { sent: { name, friendID, text }, recieved: state.recieved };\r\n            }\r\n        case \"RESET_MESSAGES\":\r\n            {\r\n                return { sent: null, recieved: null };\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","export const deviceReducer = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case \"SET_DEVICE\":\r\n            return action.payload;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n","const ClientRoutes = require('./client');\r\nconst ServerRoutes = require('./server');\r\nconst Status = require('./status');\r\nconst BrowserStorage = require('./browser');\r\nconst GameSetting = require('./gamesetting');\r\n\r\n//all configs\r\nmodule.exports = {\r\n    BrowserStorage,\r\n    Routes: { Server: ServerRoutes, Client: ClientRoutes },\r\n    Status,\r\n    GameSetting,\r\n    Device: { Desktop: 0, Tablet: 1, SmartPhone: 2 }\r\n}","//client routes\r\n\r\n// Partial Routes\r\nconst Profile = \"/Profile\",\r\n    ChatRoom = \"ChatRoom\",\r\n    MyGamesAndFriends = \"GamesFriends\",\r\n    Notices = \"Notices\";\r\n\r\nmodule.exports = {\r\n    Root: \"/\",\r\n    SignUp: \"/SignUp\",\r\n    SignIn: \"/SignIn\",\r\n    GameDeck: \"/GameDeck\",\r\n    Rankings: \"/Rankings\",\r\n    GameGuide: \"/GameGuide\",\r\n    ContactUs: \"/ContacUs\",\r\n    Profile,\r\n    ChatRoom: `${Profile}/${ChatRoom}`,\r\n    MyGamesAndFriends: `${Profile}/${MyGamesAndFriends}`,\r\n    Notices: `${Profile}/${Notices}`,\r\n};\r\n"],"sourceRoot":""}