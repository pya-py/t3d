{"version":3,"sources":["services/configs/gamesetting.js","tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","services/http/httpService.js","services/http/userServices.js","services/http/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameRules.jsx","informations/ContactInfo.jsx","common/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","common/NavigationBar.jsx","sidebars/SignInSideBar.jsx","services/http/noticeServices.js","sidebars/NoticeSideBar.jsx","sidebars/no-avatar.png","sidebars/PlayerInfoSideBar.jsx","dashboard/actions/index.js","controlpanel/PanelMenu.jsx","services/ws/GlobalSocketManager.jsx","common/MainLayout.jsx","tables/ranking/SinglePlayerCard.jsx","tables/ranking/AllPlayers.jsx","tables/ranking/Ranking.jsx","controlpanel/ControlPanel.jsx","services/ws/gamePlaySocketServices.js","dashboard/withReduxDashboard.js","games/BriefScoreboard.jsx","games/GamePlay.jsx","games/SignleGame.jsx","games/competitions/CompetitionSummary.jsx","games/competitions/CompetitionsMain.jsx","games/GameDeck.jsx","controlpanel/NoticeManager.jsx","controlpanel/AcountCredentials.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/reducers/tools.js","dashboard/reducers/statistics.js","dashboard/store/index.js","index.js","services/configs/index.js","services/configs/server.js","services/configs/status.js","services/configs/browser.js"],"names":["module","exports","TableRowMargings","SingleScoreCard","gameType","playerXName","playerOName","xScore","oScore","xBadgeColor","oBadgeColor","className","id","AllScores","scores","map","score","xName","oName","gameID","axios","defaults","headers","post","put","interceptors","request","use","config","token","sessionStorage","getItem","BrowserStorage","Token","Authorization","error","Promise","reject","response","expectedErrors","status","Status","BadRequest","InternalServerError","toast","position","closeOnClick","Unauthorized","Forbidden","NotAcceptable","Conflict","UnprocessableEntity","http","get","delete","userServices","signUp","user","Routes","Root","Users","SignUp","JSON","stringify","signIn","SignIn","getPlayer","userID","Public","getMyCredentials","Credentials","editMyCredentials","newMe","changeMyPassword","passwords","PasswordChange","getAllPlayers","saveUser","setItem","ID","isAdministrator","Administrators","readUserID","gameServices","getAllResults","Games","loadPlayerData","a","data","resolve","Successful","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","Configs","gameResults","then","result","filter","game","isLive","catch","err","this","onClick","Component","GameRules","Card","border","Header","Body","Text","href","ContactInfo","LoadingBar","useState","whichOne","setWhichOne","useLayoutEffect","document","body","style","overflowY","height","Math","floor","random","selectedLoader","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","Number","props","history","replace","isErrorExpected","onForgotPasswordClick","Button","variant","Modal","show","onHide","closeButton","Form","onSubmit","Group","Label","Control","type","placeholder","value","onChange","e","target","controlId","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","length","newUser","fullname","CreatedSuccessfully","success","warn","pattern","onInput","onInvalid","required","Footer","NavigationBar","useSelector","Navbar","bg","expand","Container","Toggle","activeClassName","to","Collapse","Nav","exact","SignInSideBar","Row","Col","noticeServices","createNotice","notice","Notices","NoticeManagement","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","notices","setNotices","useEffect","all","reverse","title","text","Alert","color","fontSize","PlayerInfoSideBar","inGame","statistics","Image","src","noAvatar","alt","ListGroup","Item","index","Heading","shape","Badge","pill","records","points","wins","LoadMe","payload","SetRoom","room","UpdateStatistics","dispatch","useDispatch","width","isAdmin","GlobalSocketManager","socketGlobal","setSocketGlobal","tools","createSocketRequest","clientID","msg","connect","socket","WebSocket","WebSocketRoot","wsGlobalRoute","onopen","send","onmessage","parse","command","playing","console","log","setTimeout","onerror","close","onclose","name","opponentSearchTriggered","pathname","location","opponent","scoreboard","deviceIsDesktop","useMediaQuery","query","deviceIsSmartPhone","deviceIsTablet","updateTriggered","pageLeftSideBar","pageRightSideBar","me","inControlPanelPages","includes","opp","xs","children","SinglePlayerCard","rowNumber","loses","draws","scope","AllPlayers","players","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","ControlPanel","roomName","playerID","gamePlaySocketServices","server","wsGamePlayRoute","withReduxDashboard","component","LoadOpponent","UpdateMyRecords","ResetOpponent","ResetRoom","SetGameID","UpdateScoreboard","details","CleanScoreboard","TriggerRecordUpdate","stat","TriggerOpponentSearch","BriefScoreboard","textAlign","GamePlay","lineColor","turn","dimension","table","myTurn","undefined","socketGamePlay","LoadOpponentData","opponentID","info","updateGameScorebaord","oppTurn","socketOnMessage","IDs","opponentIndex","newMove","cell","cellID","verifyAndApplyTheMove","cellButtons","focus","endGame","forceConnectToWebSocket","nextJob","initiateGameTimer","setInterval","window","navigator","onLine","connectionLost","getCellCoordinates","dimen","onFloorId","row","column","onEachCellClick","selectedCellButton","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","i","connectTheScoreLines","count","firstCell","step","drawGameTable","dimens","push","direction","marginLeft","GameSetting","getElementsByClassName","RoomManager","friendlyGame","setRoomName","setGameType","searching","setSearching","onStartGameClick","InputGroup","padding","Prepend","Radio","checked","block","CompetitionSummary","summary","CompetitionsMain","Tab","defaultActiveKey","sm","Link","eventKey","Content","Pane","GameDeck","Tabs","transition","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","answer","createNewNotice","Date","saveChanges","as","calendar","persian","locale","persian_fa","calendarPosition","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","reloadPage","selectMode","disabled","App","path","reducers","combineReducers","action","clear","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","getElementById","require","NotFound"],"mappings":"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","file":"static/js/main.ad6f54d4.chunk.js","sourcesContent":["module.exports = {\r\n    TableRowMargings: [0, 40, 80, 120, 160],\r\n};\r\n","import \"../tables.css\";\r\n\r\nconst SingleScoreCard = ({gameType, playerXName, playerOName, xScore, oScore }) => {\r\n    // format score text:\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        oBadgeColor = \"badge-danger\";\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        xBadgeColor = \"badge-danger\";\r\n    }\r\n\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <div className=\"card border-info mb-3 scoreCard\">\r\n            <div className=\"card-header text-center border-info\">{`T3D ${gameType}x${gameType}x${gameType}`}</div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} scoreBadge col-1`}>\r\n                        {xScore < 10 ? `0${xScore}` : `${xScore}`}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} scoreBadge col-1`}>\r\n                        {oScore < 10 ? `0${oScore}` : `${oScore}`}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </div>\r\n            </div>\r\n            <button\r\n                id=\"btnReplayGame\"\r\n                className=\"btn btn-outline-info btn-lg btn-block\">\r\n                بازپخش بازی\r\n            </button>\r\n            {/*1st method: pass key to the score.jsx and find the specific game to replay\r\n            2nd method: pass replay function from AllScore.jsx to Score.jsx ? */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    return ( \r\n        <Fragment>\r\n            { scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    gameType={score.gameType}\r\n                    playerXName={score.xName}\r\n                    playerOName={score.oName}\r\n                    xScore={score.xScore}\r\n                    oScore={score.oScore}\r\n                ></SingleScoreCard>\r\n            )) }\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Status, BrowserStorage } from \"../configs\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = sessionStorage.getItem(BrowserStorage.Token);\r\n        if (token) config.headers.Authorization = `Bearer ${token}`;\r\n        else config.headers.Authorization = \"\";\r\n        // console.log(config.headers.Authorization);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // what to do?\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= Status.BadRequest && // >= 400\r\n        error.response.status < Status.InternalServerError; // < 500\r\n\r\n        //*****notice: */\r\n        //remove some oftheese errors... because they need to be costomized in every use in each components\r\n    if (error.response.status === Status.BadRequest) {\r\n        toast.error(\r\n            \"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Unauthorized) {\r\n        toast.error(\r\n            \"احراز هویت موفقیت آمیز نیست. لطفا دوباره وارد اکانت خود شوید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Forbidden) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.NotAcceptable) {\r\n        toast.error(\"این قسمت فقط مختص کاربران ادمین می باشد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.Conflict) {\r\n        toast.error(\r\n            \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n    else if (error.response.status === Status.UnprocessableEntity) {\r\n        toast.error(\"ورودی شما با استانداردهای سایت مطابقت ندارد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\r\n            \"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport { BrowserStorage, Routes } from \"../configs\";\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.SignUp}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.SignIn}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Public}/${userID}`\r\n        );\r\n    },\r\n    getMyCredentials: () => {\r\n        //token will be sent automatically, o.w. method doesnt return anything\r\n        return http.get(`${Routes.Root}/${Routes.Users}/${Routes.Credentials}`);\r\n    },\r\n    editMyCredentials: (newMe) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Credentials}`,\r\n            JSON.stringify(newMe)\r\n        );\r\n    },\r\n    changeMyPassword: (passwords) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Credentials}/${Routes.PasswordChange}`,\r\n            JSON.stringify(passwords)\r\n        );\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Users}/${Routes.Public}`);\r\n    },\r\n    saveUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(BrowserStorage.ID, id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(BrowserStorage.Token, token);\r\n    },\r\n    isAdministrator: (userID) => {\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Administrators}/${userID}`\r\n        );\r\n    }, // check is admin via token? or this?:|\r\n    readUserID: () => {\r\n        //from browser\r\n        // consider local storage\r\n        return sessionStorage.getItem(BrowserStorage.ID);\r\n    },\r\n};\r\n\r\nexport default userServices;\r\n","import {Routes, Status} from '../configs';\r\n\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst gameServices = {\r\n    \r\n    getAllResults: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Games}`);\r\n    },\r\n    loadPlayerData: async (userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (userID === null) reject(null);\r\n            if (status === Status.Successful) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;\r\n","import \"../tables.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllResults();\r\n            if (status === Configs.Status.Successful) return data.gameResults;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        // DESIGN : USE <Tabs> ???\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-success`\r\n                                    : `btn-outline-primary`\r\n                            }`}\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-primary`\r\n                                    : `btn-outline-success`\r\n                            }`}\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-stop-circle-o px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst GameRules = () => {\r\n    return ( \r\n        <Card border=\"warning\" className=\"mb-3 singleCard\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default GameRules;","import { Card } from 'react-bootstrap';\r\nimport './info.css'\r\n\r\nconst ContactInfo = () => {\r\n    return ( \r\n        <Card border=\"dark\" className=\"mb-3 singleCard\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default ContactInfo;","import { Fragment, useLayoutEffect, useState } from \"react\";\r\nimport { Planets, Circle2 } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    const [whichOne, setWhichOne] = useState(0);\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n        if(loading)\r\n            setWhichOne(Math.floor(Math.random() * 100));\r\n    }, [loading]);\r\n    const selectedLoader = whichOne % 2 ? <Planets time={0} customLoading={loading} /> : <Circle2 time={0} customLoading={loading} />\r\n    return <Fragment>{loading ? selectedLoader : null}</Fragment>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-2\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal show={showModal} onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-info\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from '../services/configs';\r\nimport { Card, Form , Button} from \"react-bootstrap\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    userServices.saveUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n                    // toast.error(\r\n                    //     \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                    //     {\r\n                    //         position: \"top-right\",\r\n                    //         closeOnClick: true,\r\n                    //     }\r\n                    // );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else if(!Configs.Status.isErrorExpected(err)){\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Card border=\"success\" className=\"mb-3 signUpCard\">\r\n                <LoadingBar loading={loading} />\r\n                <Card.Header className=\"bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام خانوادگی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">شماره دانشجویی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">ایمیل</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">تایید رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer className=\"border-primary bg-transparent\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {  NavLink } from \"react-router-dom\";\r\n\r\nconst NavigationBar = () => {\r\n    const player = useSelector((state) => state.player);\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\" className=\"nav-pills text-right\">\r\n            <Container className=\"text-right\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <NavLink\r\n                    border=\"secandary\"\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"btn-success text-dark\"\r\n                    to={player ? \"/controlPanel\" : \"/signUp\"}>\r\n                    <i\r\n                        className=\"fa fa-address-card px-2\"\r\n                        aria-hidden=\"true\"></i>\r\n                    {player ? player.fullname : \"ثبت نام\"}\r\n                </NavLink>\r\n\r\n                <Navbar.Collapse>\r\n                    <Nav className=\"me-auto\">\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/\"\r\n                            exact\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-home px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            صفحه اصلی\r\n                        </NavLink>\r\n\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/gameDeck\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی ها\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/ranking\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-list-ol px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            رنکینگ\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/gameRules\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-eye px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            قوانین\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/contactInfo\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-phone-square px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            تماس با ما\r\n                        </NavLink>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card, Form, Button, Col, Row } from \"react-bootstrap\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            // console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <Card border=\"primary\" className=\"signInSidebar\">\r\n                <Card.Header\r\n                    border=\"primary\"\r\n                    className=\"text-center text-primary\">\r\n                    ورود کاربران\r\n                </Card.Header>\r\n                <LoadingBar loading={loading} />\r\n                <Card.Body className=\"text-primary\">\r\n                    <Form onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"signInSidebarTextBox\"\r\n                            placeholder=\"شماره دانشجویی\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            className=\"signInSidebarTextBox\"\r\n                            placeholder=\"رمز عبور\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Card.Footer className=\"bg-transparent border-primary\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button\r\n                                        id=\"btnSideBarSignIn\"\r\n                                        type=\"submit\"\r\n                                        variant=\"success\"\r\n                                        className=\"h-100\">\r\n                                        <i\r\n                                            className=\"fa fa-sign-in px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ورود\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button\r\n                                        id=\"btnSideBarPasswordRecovery\"\r\n                                        className=\"h-100\"\r\n                                        variant=\"warning\">\r\n                                        <i\r\n                                            className=\"fa fa-recycle px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        بازیابی پسورد\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\n\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n    \r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { status, data } = await noticeServices.getShortNotices();\r\n            if (status === Configs.Status.Successful) return data.notices;\r\n            return [];\r\n        })()\r\n            .then((all) => {\r\n                if (all.length) setNotices(all.reverse());\r\n                else //if all is empty\r\n                    setNotices([\r\n                        { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                    ]);\r\n            })\r\n            .catch((err) => {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"noticeSidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.map((notice) => {\r\n                    return (\r\n                        <Fragment>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-info-circle px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Fragment } from \"react\";\r\nimport noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Badge,\r\n    Image,\r\n    ListGroup,\r\n} from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { player, inGame } = props;\r\n    const statistics = useSelector((state) => state.statistics);\r\n\r\n    return (\r\n        <Fragment>\r\n            <Card border=\"info\" className=\"playerInfoSideBar\">\r\n                <Card.Header className=\"text-center text-info\">\r\n                    {player.fullname}\r\n                </Card.Header>\r\n                <Image\r\n                    className=\"card-img-top playerAvatar\"\r\n                    src={noAvatar}\r\n                    alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n                />\r\n                <hr />\r\n                <Card.Body className=\"card-body\">\r\n                    <ListGroup className=\"list-group list-group-flush\">\r\n                        {inGame && (\r\n                            <ListGroup.Item>\r\n                                <Alert\r\n                                    variant={\r\n                                        inGame.index ? \"danger\" : \"primary\"\r\n                                    }>\r\n                                    <Alert.Heading>\r\n                                        {inGame.shape} : {inGame.score}\r\n                                    </Alert.Heading>\r\n                                </Alert>\r\n                            </ListGroup.Item>\r\n                        )}\r\n                        <ListGroup.Item>\r\n                            <Row className=\"py-2\">\r\n                                <Col className=\"text-right\">\r\n                                    <Card.Text>امتیاز بازیکن</Card.Text>\r\n                                </Col>\r\n                                <Col className=\"text-left\">\r\n                                    <Badge\r\n                                        className=\"badgeFontSize\"\r\n                                        pill\r\n                                        variant=\"primary\">\r\n                                        {player.records.points}\r\n                                    </Badge>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Row className=\"py-2\">\r\n                                <Col className=\"text-right\">\r\n                                    <Card.Text>تعداد بردها</Card.Text>\r\n                                </Col>\r\n                                <Col className=\"text-left\">\r\n                                    <Badge\r\n                                        className=\"badgeFontSize\"\r\n                                        pill\r\n                                        variant=\"primary\">\r\n                                        {player.records.wins}\r\n                                    </Badge>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Row className=\"py-2\">\r\n                                <Col className=\"text-right\">تعداد تساوی ها</Col>\r\n                                <Col className=\"text-left\">\r\n                                    <Badge\r\n                                        className=\"badgeFontSize\"\r\n                                        pill\r\n                                        variant=\"primary\">\r\n                                        {player.records.points}\r\n                                    </Badge>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item>\r\n                            <Row className=\"py-2\">\r\n                                <Col className=\"text-right\">تعداد باخت ها</Col>\r\n                                <Col className=\"text-left\">\r\n                                    <Badge\r\n                                        className=\"badgeFontSize\"\r\n                                        pill\r\n                                        variant=\"primary\">\r\n                                        {player.records.points}\r\n                                    </Badge>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <ListGroup className=\"list-group list-group-flush\">\r\n                        <ListGroup.Item className=\"bg-transparent\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Card.Text className=\"text-center\">\r\n                                        <i\r\n                                            className=\"fa fa-wifi px-2\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        تعداد کاربران آنلاین\r\n                                    </Card.Text>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Badge\r\n                                        className=\"badgeFontSize\"\r\n                                        variant=\"success\"\r\n                                        pill>\r\n                                        {statistics.all}\r\n                                    </Badge>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item className=\"bg-transparent\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Card.Text className=\"text-center\">\r\n                                        <i\r\n                                            className=\"fa fa-gamepad px-2\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        کاربران در حال بازی\r\n                                    </Card.Text>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Badge\r\n                                        className=\"badgeFontSize\"\r\n                                        variant=\"success\"\r\n                                        pill>\r\n                                        {statistics.all}\r\n                                    </Badge>\r\n                                </Col>\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Card.Footer>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const UpdateMyRecords = () => ({\r\n    type: \"UPDATE_ME\",\r\n});\r\n\r\nexport const TriggerRecordUpdate = () => ({\r\n    type: \"TRIGGER_UPDATE\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\nexport const ResetRoom = () => ({\r\n    type: \"RESET_ROOM\",\r\n});\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n\r\nexport const UpdateStatistics = (statistics) => ({\r\n    type: \"UPDATE_STATISTICS\",\r\n    payload: statistics,\r\n});\r\n\r\nexport const TriggerOpponentSearch = () => ({\r\n    type: \"TRIGGER_OPPONENT_SEARCH\"\r\n})","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"./controlpanel.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../dashboard/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nconst PanelMenu = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n        <Row //bg-transparent\r\n            className=\"panelSideBar mt-2 bg-dark text-right d-flex flex-column mx-auto flex-shrink-0 p-3\">\r\n            <NavLink\r\n                to=\"/controlPanel\"\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <svg className=\"bi me-2\" width=\"40\" height=\"32\"></svg>\r\n                <span className=\"fs-4\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </span>\r\n            </NavLink>\r\n            <hr />\r\n            <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink\r\n                        to=\"/controlPanel/info\"\r\n                        className=\"nav-link\"\r\n                        aria-current=\"page\">\r\n                        <i className=\"fa fa-user-o px-3\" aria-hidden=\"true\"></i>\r\n                        مشخصات\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/friends\">\r\n                        <i className=\"fa fa-users px-3\" aria-hidden=\"true\"></i>\r\n                        دوستان\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/games\">\r\n                        \r\n                        <i\r\n                                    className=\"fa fa-trophy px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                        بازی ها\r\n                    </NavLink>\r\n                </li>\r\n                <hr />\r\n                {player && player.isAdmin && (\r\n                    <Fragment>\r\n                        {/* admin tools */}\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/notices\">\r\n                                <i\r\n                                    className=\"fa fa-newspaper-o px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                اطلاعیه ها\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/whatever\">\r\n                                <svg\r\n                                    className=\"bi me-2\"\r\n                                    width=\"16\"\r\n                                    height=\"16\"></svg>\r\n                                امکانات ادمین\r\n                            </NavLink>\r\n                        </li>{\" \"}\r\n                    </Fragment>\r\n                )}\r\n            </ul>\r\n            <hr />\r\n            <Button variant=\"outline-danger\" onClick={signMeOut}>\r\n                <i className=\"fa fa-sign-out px-3\" aria-hidden=\"true\"></i>\r\n                خروج از حساب کاربری\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(PanelMenu);\r\n","import { Routes } from \"../configs\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerOpponentSearch, UpdateStatistics } from \"../../dashboard/actions\";\r\nimport { SetRoom } from \"./../../dashboard/actions/index\";\r\n\r\nconst GlobalSocketManager = () => {\r\n    // I actually used .jsx format to make this Component EventBased\r\n    // On Each event called socket will do some specific operation\r\n    // events are actually useEffects bound to special state changes\r\n    const [socketGlobal, setSocketGlobal] = useState(null);\r\n\r\n    const player = useSelector((state) => state.player);\r\n    const tools = useSelector((state) => state.tools);\r\n    const room = useSelector((state) => state.room);\r\n    const dispatch = useDispatch();\r\n\r\n    const createSocketRequest = (request, clientID, msg) =>\r\n        JSON.stringify({\r\n            request,\r\n            clientID,\r\n            msg,\r\n        });\r\n\r\n    // EVENT NAME: PlayerUpdateEvent\r\n    // happens when player sign in status changes => set ups global socket connection and then if signed in=> reads number of online users in page\r\n    useEffect(() => {\r\n        const connect = (clientID) => {\r\n            return new Promise((resolve, reject) => {\r\n                var socket = new WebSocket(\r\n                    `${Routes.WebSocketRoot}/${Routes.wsGlobalRoute}`\r\n                );\r\n                socket.onopen = () => {\r\n                    socket.send(createSocketRequest(\"online\", clientID, null)); //temp\r\n                    resolve(socket);\r\n                };\r\n\r\n                socket.onmessage = (response) => {\r\n                    const { data } = response;\r\n                    const { command, msg } = JSON.parse(data);\r\n                    switch (command) {\r\n                        case \"ONLINE\": {\r\n                            dispatch(\r\n                                UpdateStatistics({\r\n                                    all: Number(msg),\r\n                                    playing: 0,\r\n                                })\r\n                            ); //playing temp\r\n                            break;\r\n                        }\r\n                        case \"ENTER_ROOM\": {\r\n                            if (msg) {\r\n                                console.log(\"your room\", msg);\r\n                                dispatch(SetRoom(msg));\r\n                            } else {\r\n                                //search again 5s later\r\n                                setTimeout(() => {\r\n                                    dispatch(TriggerOpponentSearch());\r\n                                }, 5000);\r\n                            }\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            //... whatever\r\n                            break;\r\n                        }\r\n                    }\r\n                    resolve(socket);\r\n                };\r\n\r\n                socket.onerror = (error) => {\r\n                    // console.log(`WebSocket error: ${error}`);\r\n                    socket.close();\r\n                    reject(error);\r\n                };\r\n\r\n                socket.onclose = () => {\r\n                    // reconnectr or what?\r\n\r\n                    resolve(null);\r\n                    // this part needs editing ? maybe not\r\n                };\r\n            });\r\n        };\r\n        (async () => {\r\n            try {\r\n                console.log(\"read onlines\");\r\n                let socket = player ? await connect(player.userID) : null;\r\n                setSocketGlobal(socket);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        })();\r\n    }, [player, dispatch]);\r\n\r\n    // EVENT NAME: RandomGameInitiated Event\r\n    // happens when user clicks on 'Random Game\" Tab search button => sends opponent search request to server\r\n    useEffect(() => {\r\n        if (room.type && !room.name && socketGlobal && player) { //completely making sure we're on right stage\r\n            console.log(room.type);\r\n            socketGlobal.send(\r\n                createSocketRequest(\"find\", player.userID, room.type)\r\n            );\r\n        }\r\n    }, [player, room, tools.opponentSearchTriggered, socketGlobal]);\r\n    return null;\r\n};\r\n\r\nexport default GlobalSocketManager;\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport SignInSideBar from \"./../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadMe, SignOut, UpdateMyRecords } from \"../dashboard/actions\";\r\nimport { Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport gameServices from \"../services/http/gameServices\";\r\n\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport PanelMenu from \"../controlpanel/PanelMenu\";\r\nimport \"../services/configs/server\";\r\nimport { useEffect } from \"react\";\r\nimport GlobalSocketManager from \"../services/ws/GlobalSocketManager\";\r\nconst MainLayout = (props) => {\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const tools = useSelector((state) => state.tools); //redux useful tools: like trigger update\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const scoreboard = useSelector((state) => state.scoreboard);\r\n    const dispatch = useDispatch();\r\n\r\n    const deviceIsDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const deviceIsSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const deviceIsTablet =\r\n        !deviceIsDesktop && !deviceIsSmartPhone ? true : false;\r\n    /*this method is for temporary use and for finding items that cause horizontal overflow causing horizontal scrollbar\r\n    const findHorizontalOverflow = () => {\r\n        let docWidth = document.documentElement.offsetWidth;\r\n        [].forEach.call(document.querySelectorAll(\"*\"), function (el) {\r\n            if (el.offsetWidth > docWidth) {\r\n                console.log(\"here is the sabotage: \", el);\r\n            }\r\n        });\r\n    };*/\r\n\r\n    //load player data after sign in\r\n    const userID = userServices.readUserID();\r\n    useEffect(() => {\r\n        dispatch(UpdateMyRecords());\r\n    }, [tools.updateTriggered, dispatch]);\r\n    if (userID && !player) {\r\n        console.log(\"auth called\");\r\n        gameServices\r\n            .loadPlayerData(userID)\r\n            .then((result) => {\r\n                dispatch(LoadMe(result ? result : null));\r\n            })\r\n            .catch((err) => {\r\n                dispatch(LoadMe(null));\r\n            });\r\n    } else if (player && !userID) {\r\n        //still doesnt log out completely automatic:\r\n        //how to sign out after token expires?\r\n        dispatch(SignOut());\r\n    }\r\n    let pageLeftSideBar = <NoticeSideBar />;\r\n    let pageRightSideBar = player ? (\r\n        <PlayerInfoSideBar player={player} inGame={scoreboard.me} />\r\n    ) : (\r\n        <SignInSideBar />\r\n    ); // in case login hassnt been made\r\n\r\n    const inControlPanelPages = pathname.includes(\"/controlPanel\");\r\n    if (pathname === \"/signUp\") pageLeftSideBar = pageRightSideBar = null;\r\n    else if (inControlPanelPages) {\r\n        pageLeftSideBar = null;\r\n        pageRightSideBar = <PanelMenu />;\r\n    } else if (pathname === \"/gameDeck\") {\r\n        // left sidebar must be opponents playerInfo\r\n        if (opponent) {\r\n            pageLeftSideBar = (\r\n                <PlayerInfoSideBar player={opponent} inGame={scoreboard.opp} />\r\n            );\r\n        }\r\n        if (deviceIsSmartPhone) {\r\n            //this is temprory\r\n            // find a way for showing result in smartphone, without causing vertical scroll\r\n            pageLeftSideBar = null; //change later\r\n            pageRightSideBar = null; // change then\r\n        }\r\n    }\r\n\r\n    // *******create independent components for each device****\r\n    return (\r\n        <Fragment>\r\n            <GlobalSocketManager />\r\n            <ToastContainer />\r\n            <NavigationBar />\r\n\r\n            {/* wrap up this shit in\r\nmultiple components for each device design\r\nthis looks like shit khodayi */}\r\n            {deviceIsDesktop && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={3}>{pageRightSideBar}</Col>\r\n                    <Col xs={!inControlPanelPages ? 6 : 9}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={3}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsTablet && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {pathname === \"/controlPanel\" && (\r\n                        <Col xs={4}>{pageRightSideBar}</Col>\r\n                    )}\r\n                    <Col className=\"mx-auto\" xs={8}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={4}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsSmartPhone && (\r\n                <Container>\r\n                    {/* what to do for control panelk sidebar in smartphone */}\r\n                    {player ? (\r\n                        <Row className=\"w-100 mx-auto\">{pageRightSideBar}</Row>\r\n                    ) : null}\r\n                    <Row className=\"w-100 mx-auto\">{pageLeftSideBar}</Row>\r\n                    <Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n                </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        \r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"5px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n                <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                    <thead className=\"bg-info\">\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">نام بازیکن</th>\r\n                            <th scope=\"col\">امتیاز</th>\r\n                            <th scope=\"col\">تعداد برد</th>\r\n                            <th scope=\"col\">تعداد باخت</th>\r\n                            <th scope=\"col\">تعداد تساوی</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {players.map((player) => (\r\n                            <SinglePlayerCard\r\n                                key={player.userID}\r\n                                rowNumber={players.findIndex(p => p.userID === player.userID) + 1}\r\n                                name={player.fullname}\r\n                                points={player.records.points}\r\n                                wins={player.records.wins}\r\n                                loses={player.records.loses}\r\n                                draws={player.records.draws}\r\n                            ></SinglePlayerCard>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport LoadingBar from \"../../common/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <div className=\"row mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <div className=\"col-12\">\r\n                    <AllPlayers players={players} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import { Component, Fragment } from \"react\";\r\nimport './controlpanel.css';\r\n\r\nclass ControlPanel extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import {Routes} from '../configs';\r\n\r\nconst createSocketRequest = (request, roomName, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        roomName,\r\n        playerID,\r\n        msg,\r\n    });\r\n\r\nconst connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(`${Routes.WebSocketRoot}/${Routes.wsGamePlayRoute}`);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            // setTimeout( () => {\r\n            //     connect(roomName, playerID);\r\n            //     console.log('reconnecting from onClose');\r\n            // }, 1000)\r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n\r\nconst gamePlaySocketServices = {\r\n    createSocketRequest,\r\n    connect,\r\n};\r\n\r\nexport default gamePlaySocketServices;","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    UpdateMyRecords,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n    ResetRoom,\r\n    TriggerRecordUpdate,\r\n    UpdateStatistics,\r\n    TriggerOpponentSearch\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n        tools: state.tools\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        UpdateMyRecords: () => dispatch(UpdateMyRecords()),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        ResetRoom: () => dispatch(ResetRoom()),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n        TriggerRecordUpdate: () => dispatch(TriggerRecordUpdate()),\r\n        UpdateStatistics: (stat) => dispatch(UpdateStatistics(stat)),\r\n        TriggerOpponentSearch: () => dispatch(TriggerOpponentSearch())\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Card, Col, Row } from \"react-bootstrap\";\r\n\r\nconst BriefScoreboard = ({ players }) => {\r\n    return (\r\n        <Card.Header className=\"w-100 text-center\">\r\n            <Row>\r\n                <Col\r\n                    style={{\r\n                        fontSize: \"20px\",\r\n                        textAlign: \"right\",\r\n                        color: players[1].color,\r\n                    }}>\r\n                    {players[1].shape} : {players[1].score}\r\n                </Col>\r\n                <Col className=\"text-warning\" style={{\r\n                        fontSize: \"18px\"}}>\r\n                    <i className=\"fa fa-clock-o px-2\" aria-hidden=\"true\"></i>\r\n                    Timer: Edit:\r\n                </Col>\r\n                <Col\r\n                    style={{\r\n                        fontSize: \"20px\",\r\n                        textAlign: \"left\",\r\n                        color: players[0].color,\r\n                    }}>\r\n                    {players[0].score} : {players[0].shape}\r\n                </Col>\r\n            </Row>\r\n        </Card.Header>\r\n    );\r\n};\r\n\r\nexport default BriefScoreboard;\r\n","import { Component, Fragment } from \"react\";\r\nimport \"./games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport gameServices from \"./../services/http/gameServices\";\r\nimport gamePlaySocketServices from \"../services/ws/gamePlaySocketServices\";\r\nimport withReduxDashboard from \"../dashboard/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Button, Card, Row } from \"react-bootstrap\";\r\nimport BriefScoreboard from \"./BriefScoreboard\";\r\nimport { GameSetting } from \"../services/configs\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n                color: \"blue\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketGamePlay: undefined,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.connectionLost = false;\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    render() {\r\n        const { players } = this.state;\r\n        return (\r\n            <Card\r\n                id=\"divTableBlock\"\r\n                bg=\"transparent\"\r\n                border=\"dark\"\r\n                className=\"w-100 mx-auto\">\r\n                <BriefScoreboard players={players} />\r\n                <Card.Body className=\"gameBorderCard\">\r\n                    {this.drawGameTable()}\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                    toast.info(\"حریف شما هم به بازی متصل شد\");\r\n                    toast.warn(\r\n                        \"حرکت اول با: \" +\r\n                            (!this.state.myTurn ? \"شما\" : \"حریف شما\")\r\n                    );\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") {\r\n            this.setState({ myTurn: Number(msg) });\r\n        } else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const { IDs, gameType } = msg;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.setState({ dimension: gameType });\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const { players } = this.state;\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            // toast.warn('new-move-recieved');\r\n            //******** */ catch exceptions\r\n            // ****** UPDATE THIS PART **************************************//\r\n            const { newMove, cell, xScore, oScore } = msg; //is table needed to be sent every time to clients?\r\n\r\n            const cellID = Number(newMove);\r\n\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                players,\r\n            });\r\n\r\n            this.state.socketGamePlay.send(\r\n                gamePlaySocketServices.createSocketRequest(\r\n                    \"moveRecieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            this.verifyAndApplyTheMove(cell, this.cellButtons[cellID]);\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"END\") {\r\n            this.endGame();\r\n        }\r\n    };\r\n\r\n    forceConnectToWebSocket = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await gamePlaySocketServices.connect(\r\n                room.name,\r\n                player.userID,\r\n                room.type\r\n            );\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketGamePlay: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n\r\n            setTimeout(() => {\r\n                console.log(\"rconnecting from GamePlay\");\r\n                this.forceConnectToWebSocket(nextJob);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    initiateGameTimer = () => {\r\n        setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (this.connectionLost) {\r\n                    console.log(\"connected\");\r\n                    this.connectionLost = false;\r\n                    this.forceConnectToWebSocket(null);\r\n                }\r\n            } else {\r\n                console.log(\"dissconnected\");\r\n                this.connectionLost = true;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"gameTableCells\"); // pay attension to searched className! may cause an error\r\n\r\n        const { player, room } = this.props;\r\n        console.log()\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectToWebSocket(() => {\r\n            this.state.socketGamePlay.send(\r\n                gamePlaySocketServices.createSocketRequest(\r\n                    \"load\",\r\n                    room.name,\r\n                    player.userID,\r\n                    null\r\n                )\r\n            );\r\n        });\r\n        this.initiateGameTimer();\r\n    }\r\n\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    this.forceConnectToWebSocket(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n                    this.forceConnectToWebSocket(() => {\r\n                        this.state.socketGamePlay.send(\r\n                            gamePlaySocketServices.createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        this.state.socketGamePlay.send(\r\n                            gamePlaySocketServices.createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.value = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({\r\n                turn: (turn + 1) % 2,\r\n                table: tempTable,\r\n            });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"gameTableCells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"gameTableCells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    endGame = async () => {\r\n        //*******************important:\r\n        //ADD TRY CATCHimport gamePlaySocketServices from './../services/gamePlaySocketServices';\r\n        //*************edit: this.context.gatherPlayerData();پ\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else toast.error(\"تکبیر!\");\r\n        //reset everything:\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.ResetRoom();\r\n            this.props.TriggerRecordUpdate();\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n\r\n    drawGameTable = () => {\r\n        // *****************note: when window size changes: table's selected cells are cleared\r\n        // use this.state.table to load again*****************\r\n        const { dimension, table, players } = this.state;\r\n        // initialize rows columns floors\r\n\r\n        try {\r\n            if (!table) {\r\n                return \"...در حال اتصال\";\r\n            } else {\r\n                let dimens = [];\r\n                for (let i = 0; i < dimension; i++) dimens.push(i);\r\n                // drawing the table and setting id s and click events\r\n                return dimens.map((floor) => (\r\n                    <Fragment>\r\n                        {dimens.map((row) => (\r\n                            <Row\r\n                                style={{\r\n                                    direction: \"ltr\",\r\n                                    marginLeft: `${GameSetting.TableRowMargings[row]}px`,\r\n                                }}>\r\n                                {dimens.map((column) => (\r\n                                    <Button\r\n                                        key={\r\n                                            floor * dimension * dimension +\r\n                                            row * dimension +\r\n                                            column\r\n                                        }\r\n                                        variant=\"btn btn-outline-dark\"\r\n                                        className=\"gameTableCells\"\r\n                                        style={\r\n                                            table[floor][row][column] !== null\r\n                                                ? {\r\n                                                      color: players[\r\n                                                          table[floor][row][\r\n                                                              column\r\n                                                          ]\r\n                                                      ].color,\r\n                                                  }\r\n                                                : null\r\n                                        }\r\n                                        id={\r\n                                            floor * dimension * dimension +\r\n                                            row * dimension +\r\n                                            column\r\n                                        }\r\n                                        onClick={(event) =>\r\n                                            this.onEachCellClick(event)\r\n                                        }>\r\n                                        {table[floor][row][column] !== null &&\r\n                                            players[table[floor][row][column]]\r\n                                                .shape}\r\n                                    </Button>\r\n                                ))}\r\n                            </Row>\r\n                        ))}\r\n                        <br />\r\n                    </Fragment>\r\n                ));\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectToWebSocket(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectToWebSocket(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom, TriggerOpponentSearch } from \"../dashboard/actions\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport LoadingBar from './../common/LoadingBar';\r\n\r\nconst RoomManager = ({ friendlyGame }) => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n        if (friendlyGame) dispatch(SetRoom({ name: roomName, type: gameType }));\r\n        // random game:\r\n        else {\r\n            dispatch(SetRoom({ name: null, type: gameType }));\r\n            dispatch(TriggerOpponentSearch());\r\n            setSearching(true);\r\n        }\r\n    };\r\n\r\n    //on destroy\r\n    useEffect(() => {\r\n        return () => {\r\n            setSearching(false); //make sure preloader turns off\r\n         }\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <LoadingBar loading={searching} />\r\n            <hr />\r\n            <Form onSubmit={(event) => onStartGameClick(event)}>\r\n                <Form.Group className=\"form-inline\">\r\n                    <Form.Label className=\"w-25\">ابعاد جدول</Form.Label>\r\n                    <InputGroup\r\n                        style={{\r\n                            border: \"1px solid orange\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"2px\",\r\n                        }}>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"3\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)}\r\n                            />\r\n                            <InputGroup.Text>3 * 3 * 3</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"4\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)}\r\n                            />\r\n                            <InputGroup.Text>4 * 4 * 4</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"5\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)}\r\n                            />\r\n                            <InputGroup.Text>5 * 5 * 5</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <hr />\r\n                {friendlyGame && (\r\n                    \r\n                    <Form.Group className=\"mt-3 form-inline\">\r\n                        \r\n                        <Form.Label className=\"w-25\">نام روم</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"w-75 text-left bg-transparent\"\r\n                            placeholder=\"Room Name\"\r\n                            value={roomName}\r\n                            required=\"required\"\r\n                            onChange={(event) =>\r\n                                setRoomName(event.target.value)\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                )}\r\n                <hr />\r\n                <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                    <i\r\n                        className={`fa ${\r\n                            friendlyGame ? \"fa-handshake-o\" : \"fa-search\"\r\n                        } px-2`}\r\n                        aria-hidden=\"true\"></i>\r\n                    {friendlyGame ? \"ارسال درخواست\" : \"جستجو\"}\r\n                </Button>\r\n            </Form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import { Alert, Badge, Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst CompetitionSummary = ({ title, summary }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill variant=\"info\">\r\n                    <Alert.Heading className=\"text-center\">\r\n                        <Badge variant=\"success p-2\" >\r\n                            {title}\r\n                        </Badge>\r\n                    </Alert.Heading>\r\n\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill variant=\"info\">\r\n                    <p>تعداد شرکت کنندگان : 00000000</p>\r\n                    <p>نکات دیگر</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col>\r\n                    <Button block variant=\"outline-success\">شرکت در مسابقه</Button>\r\n                </Col>\r\n                <Col>\r\n                <Button block variant=\"outline-secondary\">بازیکنان حاضر</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionSummary;\r\n","import { Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport \"./competitions.css\";\r\nimport CompetitionSummary from \"./CompetitionSummary\";\r\n\r\nconst CompetitionsMain = () => {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <hr />\r\n\r\n            <Row>\r\n                <Col className=\"competitionMenuBody\" sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"first\">\r\n                                جام حذفی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"second\">\r\n                                لیگ امتیازی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"third\">\r\n                                بازی شرطی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"forth\">\r\n                                جدول رندوم\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"fifth\">\r\n                                و غیره\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Col>\r\n                {/* <div style={{borderLeft: '1px solid gray', height:'500px'}}></div> */}\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <CompetitionSummary\r\n                                title=\"جام حذفی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <CompetitionSummary\r\n                                title=\"لیگ امتیازی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <CompetitionSummary\r\n                                title=\"بازی شرطی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"forth\">\r\n                            <CompetitionSummary\r\n                                title=\"جدول رندوم\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"fifth\">\r\n                            <CompetitionSummary\r\n                                title=\"و غیره\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionsMain;\r\n","import GamePlay from \"./GamePlay\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SingleGame from \"./SignleGame\";\r\nimport { Tab, Tabs, Card, Fade } from \"react-bootstrap\";\r\nimport { Fragment } from \"react\";\r\nimport CompetitionsMain from \"./competitions/CompetitionsMain\";\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector((state) => state.room);\r\n\r\n    return (\r\n        <Fragment>\r\n            {room.name ? (\r\n                <GamePlay />\r\n            ) : (\r\n                <Card\r\n                    border=\"secondary\"\r\n                    bg=\"transparent\"\r\n                    className=\"gameDeckCard\">\r\n                    <Card.Body>\r\n                        <Tabs\r\n                            defaultActiveKey=\"randomGame\"\r\n                            transition={false}\r\n                            id=\"noanim-tab-example\"\r\n                            variant=\"pills\"\r\n                            // transition={Fade}\r\n                            className=\"mb-3\">\r\n                            \r\n                            <Tab eventKey=\"randomGame\" title=\"بازی تصادفی\">\r\n                                <SingleGame friendlyGame={false} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"competitions\" title=\"مسابقات\">\r\n                                <CompetitionsMain />\r\n                            </Tab>\r\n                            <Tab eventKey=\"friendlyGame\" title=\"بازی با دوستان\">\r\n                                <SingleGame friendlyGame={true} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Card.Body>\r\n                </Card>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport \"./controlpanel.css\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nconst NoticeManager = () => {\r\n    const player = useSelector((state) => state.player);\r\n    const [isAllowed, setAllowed] = useState(undefined);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [notices, setNotices] = useState([]);\r\n    const [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n    const [updateTrigger, setUpdateTrigger] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    \r\n    const resetStates = () => {\r\n        setTitle(\"\");\r\n        setText(\"\");\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n        setSelectedNoticeID(null);\r\n        setUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n    };\r\n    useEffect(() => {\r\n        console.log(\"notice loaded\");\r\n        //use another simpler preloader\r\n        //load all notices in left side for selecting: load all and push them in notices state\r\n        (async () => {\r\n            setLoading(true);\r\n            const { status, data } = await noticeServices.getAdvancedNotics();\r\n            if (status === Configs.Status.Successful) return data.notices;\r\n            return [];\r\n        })()\r\n            .then((all) => {\r\n                if (all.length) setNotices(all.reverse());\r\n                else //if all is empty\r\n                    setNotices([\r\n                        { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                    ]);\r\n                setLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n                setLoading(false);\r\n            });\r\n    }, [updateTrigger]);\r\n    //***** in server implemented a middleware for this, is this needed? */\r\n    if (player && isAllowed === undefined) {\r\n        //in admin tools pages: admin status is checked directly dor completely making sure that user is admin and he/her is trusted directly from server\r\n        (async () => {\r\n            try {\r\n                const { data, status } = await userServices.isAdministrator(\r\n                    player.userID\r\n                );\r\n                if (status === Configs.Status.Successful) return data.answer;\r\n                return false;\r\n            } catch (err) {\r\n                //CHECK THIS PART\r\n                return false;\r\n            }\r\n        })()\r\n            .then((answer) => {\r\n                setAllowed(answer);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"مشکلی در تعیین سطح دسترسی شما بوجود آمد. لطفا مجددا تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n            });\r\n    }\r\n\r\n    // show proper message for simple users\r\n    if (!player || isAllowed === false) {\r\n        //in first render a wronge message will be shown! find a fix\r\n        //2nd condition must be exactly the same\r\n        toast.warn(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\", {\r\n            position: \"top-left\",\r\n            closeOnClick: true,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    //runs when create notice button clicks\r\n    const createNewNotice = async () => {\r\n        //add patern and stuff to states and inputs\r\n        try {\r\n            setLoading(true);\r\n            const { status } = await noticeServices.createNotice({\r\n                title,\r\n                text,\r\n                startDate: new Date(startDate),\r\n                endDate: new Date(endDate),\r\n            });\r\n            //*********** */\r\n            //COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n            if (status === Configs.Status.CreatedSuccessfully) {\r\n                toast.success(`اطلاعیه ی ${title} با موفقیت ساخته شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selecteNotice = (notice) => {\r\n        // console.log(notice);\r\n        setSelectedNoticeID(notice._id);\r\n        setTitle(notice.title);\r\n        setText(notice.text);\r\n        setStartDate(new Date(notice.startDate));\r\n        setEndDate(new Date(notice.endDate));\r\n    };\r\n\r\n    const cancelEditing = () => {\r\n        resetStates();\r\n    };\r\n\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        if (!selectedNoticeID) return;\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await noticeServices.editNotice(\r\n                selectedNoticeID,\r\n                { title, text, startDate, endDate }\r\n            );\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n    // if admin status is checked directly by server then start rendering the page\r\n    //consists two part\" right part => used for creating and editing notices\r\n    //left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n    //edit all heights in control panel\r\n    //add patern and stuff to states and inputs\r\n    return (\r\n        <Fragment style={{width:'100%'}}>\r\n            {player && isAllowed && (\r\n                <Row style={{ height: \"100%\" }}>\r\n                    <LoadingBar loading={loading} />\r\n                    <Col xs={5}>\r\n                        <Card\r\n                            style={{ height: \"850px\" }}\r\n                            border=\"success\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه جدید\r\n                            </Card.Header>\r\n                            <Card.Body className=\"text-right\">\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    عنوان اطلاعیه\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    className=\"my-1 mx-auto\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"عنوان\"\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    توضیحات\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    className=\"my-1 mx-auto h-25\"\r\n                                    placeholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n                                    value={text}\r\n                                    required=\"requires\"\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ شروع نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto w-100\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={startDate}\r\n                                    onChange={setStartDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ پایان نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={endDate}\r\n                                    onChange={setEndDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                                {!selectedNoticeID ? (\r\n                                    <Button\r\n                                        block\r\n                                        variant=\"success\"\r\n                                        onClick={createNewNotice}>\r\n                                        <i\r\n                                            className=\"fa fa-floppy-o px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ایجاد اطلاعیه\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-primary\"\r\n                                                onClick={saveChanges}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                ذخیره تغییرات\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-warning text-secondary\"\r\n                                                onClick={cancelEditing}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                لغو ویرایش\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs={7}>\r\n                        <Card   \r\n                            border=\"info\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه های قبلی\r\n                            </Card.Header>\r\n                            <Card.Body style={{overflowY: 'scroll'}} className=\"text-right\">\r\n                                {notices.map((notice) => {\r\n                                    return (\r\n                                        <Fragment>\r\n                                            <Alert variant=\"secondary\">\r\n                                                <i\r\n                                                    className=\"fa fa-info-circle px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"red\",\r\n                                                        fontSize: \"18px\",\r\n                                                    }}>\r\n                                                    {notice.title}\r\n                                                </span>\r\n                                                : {notice.text}\r\n                                                <i\r\n                                                    className=\"iconEditNotice fa fa-pencil-square-o px-3\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    onClick={() =>\r\n                                                        selecteNotice(notice)\r\n                                                    }></i>\r\n                                            </Alert>\r\n                                            <hr />\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport \"./controlpanel.css\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerRecordUpdate } from \"../dashboard/actions\";\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    //on component mount download user credentials\r\n    useEffect(() => {\r\n        (async () => {\r\n            setLoading(true);\r\n            const { status, data } = await userServices.getMyCredentials();\r\n            if (status === Configs.Status.Successful) return data.me;\r\n\r\n            return null;\r\n        })()\r\n            .then((me) => {\r\n                setFullname(me.fullname);\r\n                setStudentID(me.studentID);\r\n                setEmail(me.email);\r\n                setLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n                setLoading(false);\r\n            });\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`تغییرات با موفقیت اعمال شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n                \r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const changeMyPassword = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.changeMyPassword({\r\n                studentID,\r\n                password,\r\n                newPassword\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`رمز شما با موفقیت تغییر داده شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch (pageMode) {\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                changeMyPassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const checkConfirmPassword = (event) => {\r\n        setConfirmNewPassword(event.target.value);\r\n        if (newPassword !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور جدید باید با خود رمز عبور جدید مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n\r\n\r\n    // *************************** DESIGN NOTE *******/\r\n    // HOW ABOUT USING TABS ? <Tabs>\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"mx-auto userInfoCard\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-50 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.READ_ONLY && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.EDIT && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.CHANGE_PASS && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={(e) => selectMode(e)}>\r\n                    <Card.Body className=\"w-50 mx-auto\">\r\n                        <LoadingBar loading={loading} />\r\n\r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"userInfoTextBox w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={newPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setNewPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        تایید رمز عبور جدید\r\n                                    </Form.Label>\r\n\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        value={confirmNewPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(event) =>\r\n                                            checkConfirmPassword(event)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={!pageMode}\r\n                            block\r\n                            variant=\"success\"\r\n                            className=\"w-50 mx-auto\">\r\n                            <i\r\n                                className=\"fa fa-wrench px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت تغییرات\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","import { Component } from \"react\";\r\nimport ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport GameRules from \"./informations/GameRules\";\r\nimport ContactInfo from \"./informations/ContactInfo\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./common/MainLayout\";\r\nimport Ranking from \"./tables/ranking/Ranking\";\r\nimport ControlPanel from './controlpanel/ControlPanel';\r\nimport GameDeck from './games/GameDeck';\r\nimport NoticeManager from './controlpanel/NoticeManager';\r\nimport AccountCredentials from './controlpanel/AcountCredentials';\r\n\r\nclass App extends Component {\r\n    // 1. use uuid to produce ids\r\n    // state = {  }\r\n    \r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path=\"/signUp\" component={SignUp} />\r\n                    <Route path=\"/gameDeck\" component={GameDeck} />\r\n                    <Route path=\"/ranking\" component={Ranking} />\r\n                    <Route path=\"/gameRules\" component={GameRules} />\r\n                    <Route path=\"/contactInfo\" component={ContactInfo} />\r\n                    <Route path=\"/controlPanel/info\" component={AccountCredentials} />\r\n                    <Route path=\"/controlPanel/admin/notices\" component={NoticeManager} />\r\n                    <Route path=\"/controlPanel\" exact component={ControlPanel} />\r\n                    <Route path=\"/\" exact component={ScoresTable} />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\nimport { statisticsReducer } from \"./statistics\";\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer,\r\n    statistics: statisticsReducer\r\n});\r\n","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n\r\n        case \"UPDATE_ME\":\r\n            return null; //sets state.player => null, forces Mainlayout to reload and update state.player data\r\n\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = {name: null, type: null}, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {name, type} = action.payload;            \r\n            return {name, type};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        case \"RESET_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (state = {updateTriggered: false, opponentSearchTriggered: false}, action) => {\r\n    switch (action.type) {\r\n        case \"TRIGGER_UPDATE\":\r\n            return {updateTriggered: !state.updateTriggered, opponentSearchTriggered: state.opponentSearchTriggered}; //trigger update\r\n        case \"TRIGGER_OPPONENT_SEARCH\":\r\n            return {updateTriggered: state.updateTriggered, opponentSearchTriggered: !state.opponentSearchTriggered}; //trigger search\r\n        default:\r\n            return state;\r\n    }\r\n};","\r\nexport const statisticsReducer = (state = {all: 0, playing: 0}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_STATISTICS\":\r\n            const {all, playing} = action.payload;\r\n            return {all, playing};\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n","const Routes = require ('./server');\r\nconst Status = require('./status');\r\nconst BrowserStorage = require('./browser');\r\nconst GameSetting = require('./gamesetting');\r\n\r\n//all configs\r\nmodule.exports = {\r\n    BrowserStorage,\r\n    Routes,\r\n    Status,\r\n    GameSetting\r\n}\r\n","//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com\",\r\n    wsGamePlayRoute: \"gameplay\",\r\n    wsGlobalRoute: \"global\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Credentials: \"credentials\",\r\n    PasswordChange: \"password\",\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    Notices: \"notices\",\r\n    NoticeManagement: \"manage\"\r\n};\r\n","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\n\r\nmodule.exports = {\r\n    Token: \"ptk\",\r\n    ID: \"pid\"\r\n}"],"sourceRoot":""}