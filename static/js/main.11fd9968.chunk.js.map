{"version":3,"sources":["tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","services/httpService.js","services/userServices.js","services/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameRules.jsx","informations/ContactInfo.jsx","common/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","common/NavigationBar.jsx","sidebars/SignInSideBar.jsx","services/noticeServices.js","sidebars/NoticeSideBar.jsx","common/SmartPhoneNavigationBar.jsx","sidebars/no-avatar.png","sidebars/PlayerInfoSideBar.jsx","dashboard/actions/index.js","controlpanel/PanelMenu.jsx","common/MainLayout.jsx","tables/ranking/SinglePlayerCard.jsx","tables/ranking/AllPlayers.jsx","tables/ranking/Ranking.jsx","controlpanel/ControlPanel.jsx","services/socketServices.js","dashboard/withReduxDashboard.js","games/GamePlay.jsx","games/RoomManager.jsx","games/GameDeck.jsx","controlpanel/NoticeManager.jsx","controlpanel/AcountCredentials.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/reducers/tools.js","dashboard/store/index.js","index.js","services/configs/index.js","services/configs/server.js","services/configs/status.js","services/configs/browser.js"],"names":["SingleScoreCard","gameType","playerXName","playerOName","xScore","oScore","xBadgeColor","oBadgeColor","className","id","AllScores","scores","map","score","xName","oName","gameID","axios","defaults","headers","post","put","interceptors","request","use","config","token","sessionStorage","getItem","BrowserStorage","Token","Authorization","error","Promise","reject","response","expectedErrors","status","Status","BadRequest","InternalServerError","toast","position","closeOnClick","Unauthorized","Forbidden","NotAcceptable","Conflict","UnprocessableEntity","http","get","delete","userServices","signUp","user","Routes","Root","Users","SignUp","JSON","stringify","signIn","SignIn","getPlayer","userID","Public","getMyCredentials","Credentials","editMyCredentials","newMe","getAllPlayers","saveUser","setItem","ID","isAdministrator","Administrators","readUserID","gameServices","getAllResults","Games","loadPlayerData","a","data","resolve","Successful","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","Configs","gameResults","then","result","filter","game","isLive","catch","err","this","onClick","Component","GameRules","ContactInfo","href","LoadingBar","useLayoutEffect","document","body","style","overflowY","height","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","Number","props","history","replace","isErrorExpected","onForgotPasswordClick","Button","variant","Modal","show","onHide","Header","closeButton","Body","Form","onSubmit","Group","Label","Control","type","placeholder","value","onChange","e","target","controlId","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","length","newUser","fullname","CreatedSuccessfully","success","warn","pattern","onInput","onInvalid","required","NavigationBar","useSelector","to","exact","activeClassName","float","SignInSideBar","noticeServices","createNotice","notice","Notices","NoticeManagement","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","useState","notices","setNotices","useEffect","all","reverse","title","text","Card","border","Alert","color","fontSize","SmartPhoneNavigationBar","PlayerInfoSideBar","inGame","src","noAvatar","alt","index","Heading","shape","records","points","wins","loses","draws","LoadMe","payload","SetRoom","room","dispatch","useDispatch","Row","width","isAdmin","pathname","location","tools","opponent","scoreboard","deviceIsDesktop","useMediaQuery","query","deviceIsSmartPhone","deviceIsTablet","trigger","console","log","pageLeftSideBar","pageRightSideBar","me","inControlPanelPages","includes","opp","Col","xs","children","Container","SinglePlayerCard","rowNumber","name","scope","AllPlayers","players","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","ControlPanel","createSocketRequest","roomName","playerID","msg","socketServices","connect","server","WebSocket","WebSocketRoot","onopen","send","onerror","close","onclose","withReduxDashboard","component","LoadOpponent","UpdateMyRecords","ResetOpponent","ResetRoom","SetGameID","UpdateScoreboard","details","CleanScoreboard","TriggerRecordUpdate","GamePlay","rowMarginRatio","lineColor","turn","dimension","table","myTurn","undefined","socketConnection","LoadOpponentData","opponentID","info","updateGameScorebaord","oppTurn","socketOnMessage","parse","command","IDs","opponentIndex","newMove","cell","cellID","verifyAndApplyTheMove","cellButtons","focus","endGame","forceConnectToWebSocket","nextJob","socket","onmessage","setTimeout","updateMarginParameters","divTableBlock","offsetWidth","onTableBlockResize","initiateGameTimer","setInterval","window","navigator","onLine","connectionLost","getCellCoordinates","dimen","onFloorId","floor","Math","row","column","onEachCellClick","selectedCellButton","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","i","connectTheScoreLines","count","firstCell","step","drawGameTable","dimens","push","marginLeft","getElementsByClassName","getElementById","addEventListener","RoomManager","setRoomName","setGameType","onStartGameClick","padding","checked","block","GameDeck","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","answer","createNewNotice","saveChanges","bg","as","calendar","persian","locale","persian_fa","calendarPosition","Footer","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","selectMode","disabled","App","path","reducers","combineReducers","action","clear","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","require","module","exports","NotFound"],"mappings":"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","file":"static/js/main.11fd9968.chunk.js","sourcesContent":["import \"../tables.css\";\r\n\r\nconst SingleScoreCard = ({gameType, playerXName, playerOName, xScore, oScore }) => {\r\n    // format score text:\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        oBadgeColor = \"badge-danger\";\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        xBadgeColor = \"badge-danger\";\r\n    }\r\n\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <div className=\"card border-info mb-3 scoreCard\">\r\n            <div className=\"card-header text-center border-info\">{`T3D ${gameType}x${gameType}x${gameType}`}</div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} scoreBadge col-1`}>\r\n                        {xScore < 10 ? `0${xScore}` : `${xScore}`}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} scoreBadge col-1`}>\r\n                        {oScore < 10 ? `0${oScore}` : `${oScore}`}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </div>\r\n            </div>\r\n            <button\r\n                id=\"btnReplayGame\"\r\n                className=\"btn btn-outline-info btn-lg btn-block\">\r\n                بازپخش بازی\r\n            </button>\r\n            {/*1st method: pass key to the score.jsx and find the specific game to replay\r\n            2nd method: pass replay function from AllScore.jsx to Score.jsx ? */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    return ( \r\n        <Fragment>\r\n            { scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    gameType={score.gameType}\r\n                    playerXName={score.xName}\r\n                    playerOName={score.oName}\r\n                    xScore={score.xScore}\r\n                    oScore={score.oScore}\r\n                ></SingleScoreCard>\r\n            )) }\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Status, BrowserStorage } from \"./configs\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = sessionStorage.getItem(BrowserStorage.Token);\r\n        if (token) config.headers.Authorization = `Bearer ${token}`;\r\n        else config.headers.Authorization = \"\";\r\n        // console.log(config.headers.Authorization);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // what to do?\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= Status.BadRequest && // >= 400\r\n        error.response.status < Status.InternalServerError; // < 500\r\n\r\n        //*****notice: */\r\n        //remove some oftheese errors... because they need to be costomized in every use in each components\r\n    if (error.response.status === Status.BadRequest) {\r\n        toast.error(\r\n            \"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Unauthorized) {\r\n        toast.error(\r\n            \"احراز هویت موفقیت آمیز نیست. لطفا دوباره وارد اکانت خود شوید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Forbidden) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.NotAcceptable) {\r\n        toast.error(\"این قسمت فقط مختص کاربران ادمین می باشد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.Conflict) {\r\n        toast.error(\r\n            \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n    else if (error.response.status === Status.UnprocessableEntity) {\r\n        toast.error(\"ورودی شما با استانداردهای سایت مطابقت ندارد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\r\n            \"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport { BrowserStorage, Routes } from \"./configs\";\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.SignUp}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.SignIn}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Public}/${userID}`\r\n        );\r\n    },\r\n    getMyCredentials: () => {\r\n        //token will be sent automatically, o.w. method doesnt return anything\r\n        return http.get(`${Routes.Root}/${Routes.Users}/${Routes.Credentials}`);\r\n    },\r\n    editMyCredentials: (newMe) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Credentials}`,\r\n            JSON.stringify(newMe)\r\n        );\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Users}/${Routes.Public}`);\r\n    },\r\n    saveUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(BrowserStorage.ID, id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(BrowserStorage.Token, token);\r\n    },\r\n    isAdministrator: (userID) => {\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Administrators}/${userID}`\r\n        );\r\n    }, // check is admin via token? or this?:|\r\n    readUserID: () => {\r\n        //from browser\r\n        // consider local storage\r\n        return sessionStorage.getItem(BrowserStorage.ID);\r\n    },\r\n};\r\n\r\nexport default userServices;\r\n","import {Routes, Status} from './configs';\r\n\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst gameServices = {\r\n    \r\n    getAllResults: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Games}`);\r\n    },\r\n    loadPlayerData: async (userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (userID === null) reject(null);\r\n            if (status === Status.Successful) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;\r\n","import \"../tables.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/gameServices\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllResults();\r\n            if (status === Configs.Status.Successful) return data.gameResults;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-success`\r\n                                    : `btn-outline-primary`\r\n                            }`}\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-primary`\r\n                                    : `btn-outline-success`\r\n                            }`}\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-stop-circle-o px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\n\r\nconst GameRules = () => {\r\n    return ( \r\n        <div className=\"card border-warning mb-3 singleCard\" >\r\n            <div className=\"card-header text-center border-warning\">قوانین بازی</div>\r\n            <div className=\"card-body text-right\">\r\n                <p>سطر اول</p>\r\n                <p>سطر دوم</p>\r\n                <p>سطر سوم</p>\r\n                <p>سطر چهارم</p>\r\n                <p>سطر پنجم</p>\r\n                <p>سطر ششم</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GameRules;","import './info.css'\r\n\r\nconst ContactInfo = () => {\r\n    return ( \r\n        <div className=\"card border-dark mb-3 singleCard\" >\r\n            <div className=\"card-header text-center border-dark\">اطلاعات تماس</div>\r\n            <div className=\"card-body text-center\">\r\n                <p>دانشگاه علم و صنعت ایران</p>\r\n                <p>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></p>\r\n                <p>Phone Number: 0000000000000</p>\r\n                <p>اطلاعات تماس استاد</p>\r\n                <p>instagram: ......</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ContactInfo;","import { useLayoutEffect } from \"react\";\r\nimport { Planets } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading]);\r\n\r\n    return <>{loading ? <Planets time={0} customLoading={loading} /> : null}</>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-3\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal show={showModal} onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-3\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-info\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-3\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from '../services/configs';\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    userServices.saveUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n                    // toast.error(\r\n                    //     \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                    //     {\r\n                    //         position: \"top-right\",\r\n                    //         closeOnClick: true,\r\n                    //     }\r\n                    // );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else if(!Configs.Status.isErrorExpected(err)){\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"card border-success mb-3 signUpCard\">\r\n                <LoadingBar loading={loading} />\r\n                <div className=\"card-header bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">نام</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">نام خانوادگی</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">شماره دانشجویی</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">ایمیل</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">رمز عبور</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">تایید رمز عبور</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </button>\r\n                    </form>\r\n                    <p className=\"forgot-password text-right mt-5\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst NavigationBar = () => {\r\n  const player = useSelector(state => state.player);\r\n\r\n  return (\r\n    // 2. link items theme: make theme better\r\n\r\n    <nav className=\"navbar navbar-expand-lg nav-pills navbar-light bg-light text-right\">\r\n      <div className=\"container text-right\">\r\n        {/* <NavLink className=\"navbar-brand\" to=\"#\">نام بازیکن</NavLink>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"expand\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button> */}\r\n        <div className=\"navbar-expand\" id=\"navbarResponsive\">\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/\"\r\n                exact\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                صفحه اصلی\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/gameDeck\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                بازی ها\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/ranking\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                رنکینگ\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/gameRules\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                قوانین\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/contactInfo\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                تماس با ما\r\n              </NavLink>\r\n            </li>\r\n            \r\n          </ul>\r\n          {/* how to float search bar to right? */}\r\n        </div>\r\n      </div>\r\n      {player ? (\r\n        <NavLink\r\n          style={{ float: \"left\" }}\r\n          className=\"navItems nav-link btn btn-outline-success btn-sm\"\r\n          to=\"/controlPanel\"\r\n        >\r\n          کنترل پنل\r\n        </NavLink>\r\n      ) : (\r\n        <NavLink\r\n          style={{ float: \"left\" }}\r\n          className=\"navItems nav-link btn btn-outline-success btn-sm\"\r\n          to=\"/signUp\"\r\n        >\r\n          ثبت نام\r\n        </NavLink>\r\n      )}\r\n\r\n      {/* <form class=\"searchForm form-inline\">\r\n                    <input class=\" form-control mr-sm-2 bg-dark\" type=\"search\" placeholder=\"دنبال چی می گردی؟\" aria-label=\"Search\" />\r\n                    <button class=\" btn btn-outline-warning fa fa-search\" type=\"submit\"></button>\r\n            </form> */}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            // console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <div className=\"card signInSidebar border-primary\">\r\n                <div className=\"card-header text-center text-primary border-primary\">\r\n                    ورود کاربران\r\n                </div>\r\n                <LoadingBar loading={loading} />\r\n                <div className=\"card-body text-primary\">\r\n                    <form onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"signInSidebarTextBox form-control text-primary\"\r\n                            placeholder=\"Student ID\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <input\r\n                            type=\"password\"\r\n                            className=\"signInSidebarTextBox form-control text-primary\"\r\n                            placeholder=\"Password\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <div className=\"card-footer bg-transparent border-primary\">\r\n                            <button\r\n                                id=\"btnSideBarSignIn\"\r\n                                type=\"submit\"\r\n                                className=\"btn btn-outline-success btn-lg\">\r\n                                <i\r\n                                    className=\"fa fa-sign-in px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                ورود\r\n                            </button>\r\n                            <button\r\n                                id=\"btnSideBarPasswordRecovery\"\r\n                                className=\"btn btn-outline-info btn-lg\">\r\n                                <i\r\n                                    className=\"fa fa-recycle px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                بازیابی پسورد\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"./configs\";\r\n\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"./../services/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\n\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n    \r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            const { status, data } = await noticeServices.getShortNotices();\r\n            if (status === Configs.Status.Successful) return data.notices;\r\n            return [];\r\n        })()\r\n            .then((all) => {\r\n                if (all) setNotices(all.reverse());\r\n                else\r\n                    setNotices([\r\n                        { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                    ]);\r\n            })\r\n            .catch((err) => {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"noticeSidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.map((notice) => {\r\n                    return (\r\n                        <Fragment>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-info-circle px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","import { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst SmartPhoneNavigationBar = () => {\r\n\r\n  const player = useSelector(state => state.player);\r\n  return (\r\n    // 2. link items theme: make theme better\r\n\r\n    <nav className=\"navbar navbar-expand-lg nav-pills navbar-light bg-light text-right\">\r\n      <div className=\"container text-right\">\r\n        <div className=\"navbar-expand w-100\" id=\"navbarResponsive\">\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <div className=\"row\">\r\n              <li className=\"nav-item\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/\"\r\n                  exact\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  صفحه اصلی\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/gameDeck\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  بازی ها\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/ranking\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  رنکینگ\r\n                </NavLink>\r\n              </li>\r\n            </div>\r\n          </ul>\r\n          <hr />\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <div className=\"row\">\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/gameRules\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  قوانین\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/contactInfo\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  تماس با ما\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                {player ? (\r\n                  <NavLink\r\n                    className=\"navItems nav-link btn btn-outline-success btn-block mt-1 mr-lg-5\"\r\n                    to=\"/controlPanel\"\r\n                  >\r\n                    کنترل پنل\r\n                  </NavLink>\r\n                ) : (\r\n                  <NavLink\r\n                    className=\"navItems nav-link btn btn-outline-success btn-block mt-1 mr-lg-5\"\r\n                    to=\"/signUp\"\r\n                  >\r\n                    ثبت نام\r\n                  </NavLink>\r\n                )}\r\n              </li>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SmartPhoneNavigationBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Alert } from \"react-bootstrap\";\r\nimport noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { player, inGame } = props;\r\n    return (\r\n        <div className=\"card playerInfoSideBar border-info\">\r\n            <div className=\"card-header text-center text-info border-info\">\r\n                {player.fullname}\r\n            </div>\r\n            <img\r\n                className=\"card-img-top playerAvatar\"\r\n                src={noAvatar}\r\n                alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n            />\r\n            <hr />\r\n            <div className=\"card-body\">\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <li className=\"text-center list-group-item\">\r\n                            <Alert variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading>\r\n                                    {inGame.shape} : {inGame.score}\r\n                                </Alert.Heading>\r\n                                \r\n                            </Alert>\r\n                        </li>\r\n                    )}\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">امتیاز بازیکن</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.points}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد برد</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.wins}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد باخت</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.loses}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد تساوی</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.draws}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const UpdateMyRecords = () => ({\r\n    type: \"UPDATE_ME\",\r\n});\r\n\r\nexport const TriggerRecordUpdate = () => ({\r\n    type: \"TRIGGER_UPDATE\",\r\n});\r\n\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\nexport const ResetRoom = () => ({\r\n    type: \"RESET_ROOM\"\r\n});\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details ,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"./controlpanel.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../dashboard/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nconst PanelMenu = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n        <Row //bg-transparent\r\n            className=\"panelSideBar mt-2 bg-dark text-right d-flex flex-column flex-shrink-0 p-3\">\r\n            <NavLink\r\n                to=\"/controlPanel\"\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <svg className=\"bi me-2\" width=\"40\" height=\"32\"></svg>\r\n                <span className=\"fs-4\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </span>\r\n            </NavLink>\r\n            <hr />\r\n            <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink\r\n                        to=\"/controlPanel/info\"\r\n                        className=\"nav-link\"\r\n                        aria-current=\"page\">\r\n                        <i className=\"fa fa-user-o px-3\" aria-hidden=\"true\"></i>\r\n                        مشخصات\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/friends\">\r\n                        <i className=\"fa fa-users px-3\" aria-hidden=\"true\"></i>\r\n                        دوستان\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/games\">\r\n                        <i className=\"fa fa-gamepad px-3\" aria-hidden=\"true\"></i>\r\n                        بازی ها\r\n                    </NavLink>\r\n                </li>\r\n                <hr />\r\n                {player && player.isAdmin && (\r\n                    <Fragment>\r\n                        {/* admin tools */}\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/notices\">\r\n                                <i\r\n                                    className=\"fa fa-newspaper-o px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                اطلاعیه ها\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/whatever\">\r\n                                <svg\r\n                                    className=\"bi me-2\"\r\n                                    width=\"16\"\r\n                                    height=\"16\"></svg>\r\n                                امکانات ادمین\r\n                            </NavLink>\r\n                        </li>{\" \"}\r\n                    </Fragment>\r\n                )}\r\n            </ul>\r\n            <hr />\r\n            <Button variant=\"outline-danger\" onClick={signMeOut}>\r\n                <i className=\"fa fa-sign-out px-3\" aria-hidden=\"true\"></i>\r\n                خروج از حساب کاربری\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(PanelMenu);\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport SignInSideBar from \"./../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport SmartPhoneNavigationBar from \"./SmartPhoneNavigationBar\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadMe, SignOut, UpdateMyRecords } from \"../dashboard/actions\";\r\nimport { Fragment } from \"react\";\r\nimport userServices from \"./../services/userServices\";\r\nimport gameServices from \"../services/gameServices\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport PanelMenu from \"../controlpanel/PanelMenu\";\r\nimport \"../services/configs/server\";\r\nimport { useEffect } from \"react\";\r\nconst MainLayout = (props) => {\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const tools = useSelector((state) => state.tools); //redux useful tools: like trigger update\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const scoreboard = useSelector((state) => state.scoreboard);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const deviceIsDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const deviceIsSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const deviceIsTablet =\r\n        !deviceIsDesktop && !deviceIsSmartPhone ? true : false;\r\n    // this method is for temporary use and for finding items that cause horizontal overflow causing horizontal scrollbar\r\n    // const findHorizontalOverflow = () => {\r\n    //     let docWidth = document.documentElement.offsetWidth;\r\n    //     [].forEach.call(document.querySelectorAll(\"*\"), function (el) {\r\n    //         if (el.offsetWidth > docWidth) {\r\n    //             console.log(\"here is the sabotage: \", el);\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    //load player data after sign in\r\n    const userID = userServices.readUserID();\r\n    useEffect(() => {\r\n        dispatch(UpdateMyRecords());\r\n    }, [tools.trigger, dispatch]);\r\n    if (userID && !player) {\r\n        console.log(\"auth called\");\r\n        gameServices\r\n            .loadPlayerData(userID)\r\n            .then((result) => {\r\n                dispatch(LoadMe(result ? result : null));\r\n            })\r\n            .catch((err) => {\r\n                dispatch(LoadMe(null));\r\n            });\r\n    } else if (player && !userID) {\r\n        //still doesnt log out completely automatic:\r\n        //how to sign out after token expires?\r\n        dispatch(SignOut());\r\n    }\r\n    let pageLeftSideBar = <NoticeSideBar />;\r\n    let pageRightSideBar = player ? (\r\n        <PlayerInfoSideBar player={player} inGame={scoreboard.me} />\r\n    ) : (\r\n        <SignInSideBar />\r\n    ); // in case login hassnt been made\r\n\r\n    const inControlPanelPages = pathname.includes(\"/controlPanel\");\r\n    if (pathname === \"/signUp\") pageLeftSideBar = pageRightSideBar = null;\r\n    else if (inControlPanelPages) {\r\n        pageLeftSideBar = null;\r\n        pageRightSideBar = <PanelMenu />;\r\n    } else if (pathname === \"/gameDeck\") {\r\n        // left sidebar must be opponents playerInfo\r\n        if (opponent) {\r\n            pageLeftSideBar = (\r\n                <PlayerInfoSideBar player={opponent} inGame={scoreboard.opp} />\r\n            );\r\n        }\r\n        if (deviceIsSmartPhone) {\r\n            //this is temprory\r\n            // find a way for showing result in smartphone, without causing vertical scroll\r\n            pageLeftSideBar = null; //change later\r\n            pageRightSideBar = null; // change then\r\n        }\r\n    }\r\n\r\n    // *******create independent components for each device****\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n            {deviceIsDesktop || deviceIsTablet ? (\r\n                <NavigationBar />\r\n            ) : (\r\n                <SmartPhoneNavigationBar />\r\n            )}\r\n\r\n            {/* wrap up this shit in\r\nmultiple components for each device design\r\nthis looks like shit khodayi */}\r\n            {deviceIsDesktop && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={3}>{pageRightSideBar}</Col>\r\n                    <Col xs={!inControlPanelPages ? 6 : 9}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={3}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsTablet && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {pathname === \"/controlPanel\" && (\r\n                        <Col xs={4}>{pageRightSideBar}</Col>\r\n                    )}\r\n                    <Col className=\"mx-auto\" xs={8}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={4}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsSmartPhone && (\r\n                <Container>\r\n                    {/* what to do for control panelk sidebar in smartphone */}\r\n                    {player ? (\r\n                        <Row className=\"w-100 mx-auto\">{pageRightSideBar}</Row>\r\n                    ) : null}\r\n                    <Row className=\"w-100 mx-auto\">{pageLeftSideBar}</Row>\r\n                    <Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n                </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        \r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"15px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n                <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                    <thead className=\"bg-info\">\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">نام بازیکن</th>\r\n                            <th scope=\"col\">امتیاز</th>\r\n                            <th scope=\"col\">تعداد برد</th>\r\n                            <th scope=\"col\">تعداد باخت</th>\r\n                            <th scope=\"col\">تعداد تساوی</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {players.map((player) => (\r\n                            <SinglePlayerCard\r\n                                key={player.userID}\r\n                                rowNumber={players.findIndex(p => p.userID === player.userID) + 1}\r\n                                name={player.fullname}\r\n                                points={player.records.points}\r\n                                wins={player.records.wins}\r\n                                loses={player.records.loses}\r\n                                draws={player.records.draws}\r\n                            ></SinglePlayerCard>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/userServices\";\r\nimport LoadingBar from \"../../common/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <div className=\"row mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <div className=\"col-12\">\r\n                    <AllPlayers players={players} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import { Component, Fragment } from \"react\";\r\nimport './controlpanel.css';\r\n\r\nclass ControlPanel extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import {Routes} from './configs';\r\n\r\nconst createSocketRequest = (request, roomName, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        roomName,\r\n        playerID,\r\n        msg,\r\n    });\r\n\r\nconst connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(Routes.WebSocketRoot);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            // change\r\n            // setTimeout( () => {\r\n            //     connect(roomName, playerID);\r\n            //     console.log('reconnecting from onClose');\r\n            // }, 1000)\r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n\r\nconst socketServices = {\r\n    createSocketRequest,\r\n    connect,\r\n};\r\n\r\nexport default socketServices;","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    UpdateMyRecords,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n    ResetRoom,\r\n    TriggerRecordUpdate\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n        tools: state.tools\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        UpdateMyRecords: () => dispatch(UpdateMyRecords()),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        ResetRoom: () => dispatch(ResetRoom()),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n        TriggerRecordUpdate: () => dispatch(TriggerRecordUpdate())\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Component, Fragment } from \"react\";\r\nimport \"./games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport gameServices from \"./../services/gameServices\";\r\nimport socketServices from \"../services/socketServices\";\r\nimport withReduxDashboard from \"../dashboard/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        rowMarginRatio: 0,\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n                color: \"cyan\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketConnection: undefined,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.connectionLost = false;\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"divTableBlock\" className=\"card border-dark gameBorderCard\">\r\n                <div className=\"form-inline w-100\">\r\n                    <p\r\n                        style={{ color: this.state.players[1].color }}\r\n                        className=\"w-50 text-center\">{`O: ${this.state.players[1].score}`}</p>\r\n                    <p\r\n                        style={{ color: this.state.players[0].color }}\r\n                        className=\"w-50 text-center\">{`X: ${this.state.players[0].score}`}</p>\r\n                </div>\r\n                {this.drawGameTable()}\r\n            </div>\r\n        );\r\n    }\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                    toast.info(\"حریف شما هم به بازی متصل شد\");\r\n                    toast.warn( 'حرکت اول با: ' + (!this.state.myTurn ? 'شما' : 'حریف شما') );\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") {\r\n            this.setState({ myTurn: Number(msg) });\r\n        } else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const { IDs, gameType } = msg;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.setState({ dimension: gameType });\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            // toast.warn('new-move-recieved');\r\n            //******** */ catch exceptions\r\n            // ****** UPDATE THIS PART **************************************//\r\n            const { newMove, cell, xScore, oScore } = msg; //is table needed to be sent every time to clients?\r\n\r\n            const cellID = Number(newMove);\r\n\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                players,\r\n            });\r\n\r\n            this.state.socketConnection.send(\r\n                socketServices.createSocketRequest(\r\n                    \"moveRecieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            this.verifyAndApplyTheMove(cell, this.cellButtons[cellID]);\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"END\") {\r\n            this.endGame();\r\n        }\r\n    };\r\n\r\n    forceConnectToWebSocket = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await socketServices.connect(\r\n                room.name,\r\n                player.userID,\r\n                room.type\r\n            );\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketConnection: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n\r\n            setTimeout(() => {\r\n                console.log(\"rconnecting from GamePlay\");\r\n                this.forceConnectToWebSocket(nextJob);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    updateMarginParameters = (divTableBlock) => {\r\n        //const {deviceIsDesktop, deviceIsTablet, deviceIsSmartPhone} = this.context;\r\n        const rowMarginDevideOn = 12.4; // deviceIsDesktop ? 22 : (deviceIsTablet ? 14 : 6);\r\n        this.setState({\r\n            rowMarginRatio: divTableBlock.offsetWidth / rowMarginDevideOn,\r\n        });\r\n        //*** for now this method remain still but if the main container is in fixed pixels width, the hell is this needed? */\r\n    };\r\n\r\n    onTableBlockResize = (event) => {\r\n        this.updateMarginParameters(event.target);\r\n    };\r\n\r\n    initiateGameTimer = () => {\r\n        setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (this.connectionLost) {\r\n                    console.log(\"connected\");\r\n                    this.connectionLost = false;\r\n                    this.forceConnectToWebSocket(null);\r\n                }\r\n            } else {\r\n                console.log(\"dissconnected\");\r\n                this.connectionLost = true;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"gameTableCells\"); // pay attension to searched className! may cause an error\r\n\r\n        let divTableBlock = document.getElementById(\"divTableBlock\");\r\n        this.updateMarginParameters(divTableBlock);\r\n        divTableBlock.addEventListener(\"resize\", (event) =>\r\n            this.onTableBlockResize(event)\r\n        );\r\n\r\n        const { player, room } = this.props;\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectToWebSocket(() => {\r\n            this.state.socketConnection.send(\r\n                socketServices.createSocketRequest(\r\n                    \"load\",\r\n                    room.name,\r\n                    player.userID,\r\n                    null\r\n                )\r\n            );\r\n        });\r\n        this.initiateGameTimer();\r\n    }\r\n\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    this.forceConnectToWebSocket(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n                    this.forceConnectToWebSocket(() => {\r\n                        this.state.socketConnection.send(\r\n                            socketServices.createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        this.state.socketConnection.send(\r\n                            socketServices.createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.value = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({\r\n                turn: (turn + 1) % 2,\r\n                table: tempTable,\r\n            });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"gameTableCells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"gameTableCells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    endGame = async () => {\r\n        //*******************important:\r\n        //ADD TRY CATCHimport socketServices from './../services/socketServices';\r\n        //*************edit: this.context.gatherPlayerData();\r\n        this.props.UpdateMyRecords(); //resets redux.state.player => forces MainLayout to reload player data and records\r\n\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else toast.error(\"تکبیر!\");\r\n        //reset everything:\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.ResetRoom();\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n    drawGameTable = () => {\r\n        // *****************note: when window size changes: table's selected cells are cleared\r\n        // use this.state.table to load again*****************\r\n        const { rowMarginRatio, dimension } = this.state;\r\n        // initialize rows columns floors\r\n\r\n        try {\r\n            if (!this.state.table) {\r\n                return \"...در حال اتصال\";\r\n            } else {\r\n                let dimens = [];\r\n                for (let i = 0; i < dimension; i++) dimens.push(i);\r\n                const { table, players } = this.state;\r\n                // drawing the table and setting id s and click events\r\n                return dimens.map((floor) => (\r\n                    <Fragment>\r\n                        {dimens.map((row) => (\r\n                            <div\r\n                                style={{\r\n                                    marginLeft: `${row * rowMarginRatio}px`,\r\n                                }}>\r\n                                {dimens.map((column) => (\r\n                                    <button\r\n                                        key={\r\n                                            floor * dimension * dimension +\r\n                                            row * dimension +\r\n                                            column\r\n                                        }\r\n                                        type=\"button\"\r\n                                        className=\"gameTableCells btn btn-outline-dark\"\r\n                                        style={\r\n                                            table[floor][row][column] !== null\r\n                                                ? {\r\n                                                      color: players[\r\n                                                          table[floor][row][\r\n                                                              column\r\n                                                          ]\r\n                                                      ].color,\r\n                                                  }\r\n                                                : null\r\n                                        }\r\n                                        id={\r\n                                            floor * dimension * dimension +\r\n                                            row * dimension +\r\n                                            column\r\n                                        }\r\n                                        onClick={(event) =>\r\n                                            this.onEachCellClick(event)\r\n                                        }>\r\n                                        {table[floor][row][column] !== null &&\r\n                                            players[table[floor][row][column]]\r\n                                                .shape}\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </Fragment>\r\n                ));\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectToWebSocket(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectToWebSocket(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom } from \"../dashboard/actions\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst RoomManager = () => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n\r\n        dispatch(SetRoom({ roomName, gameType })); //set redux state room => roomname\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"card border-warning mb-3 singleCard\">\r\n                <div className=\"card-header text-center border-warning\">\r\n                    اتصال بازیکنان\r\n                </div>\r\n                <div className=\"card-body text-right\">\r\n                    <form onSubmit={(event) => onStartGameClick(event)}>\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">ابعاد جدول بازی</label>\r\n                            <label\r\n                                style={{\r\n                                    border: \"1px solid grey\",\r\n                                    borderRadius: \"15px\",\r\n                                    padding: \"5px\",\r\n                                }}\r\n                                className=\"w-25\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    className=\"mx-auto form-control\"\r\n                                    value=\"3\"\r\n                                    checked={gameType === 3}\r\n                                    onChange={() => setGameType(3)}\r\n                                />\r\n                                3x3x3\r\n                            </label>\r\n                            <label\r\n                                style={{\r\n                                    border: \"1px solid grey\",\r\n                                    borderRadius: \"15px\",\r\n                                    padding: \"5px\",\r\n                                }}\r\n                                className=\"w-25 \">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    className=\"mx-auto form-control\"\r\n                                    value=\"4\"\r\n                                    checked={gameType === 4}\r\n                                    onChange={() => setGameType(4)}\r\n                                />\r\n                                4x4x4\r\n                            </label>\r\n                            <label\r\n                                style={{\r\n                                    border: \"1px solid grey\",\r\n                                    borderRadius: \"15px\",\r\n                                    padding: \"5px\",\r\n                                }}\r\n                                className=\"w-25\">\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    className=\"mx-auto form-control\"\r\n                                    value=\"5\"\r\n                                    checked={gameType === 5}\r\n                                    onChange={() => setGameType(5)}\r\n                                />\r\n                                5x5x5\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-inline mt-3\">\r\n                            <label className=\"w-25\">نام روم</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control w-75\"\r\n                                placeholder=\"Room Name\"\r\n                                value={roomName}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    setRoomName(event.target.value)\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                            <i className=\"fa fa-cube px-3\" aria-hidden=\"true\"></i>\r\n                            شروع بازی\r\n                        </Button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import GamePlay from './GamePlay';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment } from 'react';\r\nimport RoomManager from './RoomManager';\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector(state => state.room);\r\n\r\n    return ( \r\n        <Fragment>\r\n            {room ? <GamePlay /> : <RoomManager />}\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/userServices\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport \"./controlpanel.css\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nconst NoticeManager = () => {\r\n    const player = useSelector((state) => state.player);\r\n    const [isAllowed, setAllowed] = useState(undefined);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [notices, setNotices] = useState([]);\r\n    const [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n    const [updateTrigger, setUpdateTrigger] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const resetStates = () => {\r\n        setTitle(\"\");\r\n        setText(\"\");\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n        setSelectedNoticeID(null);\r\n        setUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n    };\r\n    useEffect(() => {\r\n        console.log(\"notice loaded\");\r\n        //use another simpler preloader\r\n        //load all notices in left side for selecting: load all and push them in notices state\r\n        (async () => {\r\n            setLoading(true);\r\n            const { status, data } = await noticeServices.getAdvancedNotics();\r\n            if (status === Configs.Status.Successful) return data.notices;\r\n            return [];\r\n        })()\r\n            .then((all) => {\r\n                if (all) setNotices(all.reverse());\r\n                else\r\n                    setNotices([\r\n                        { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                    ]);\r\n                setLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n                setLoading(false);\r\n            });\r\n    }, [updateTrigger]);\r\n    //***** in server implemented a middleware for this, is this needed? */\r\n    if (player && isAllowed === undefined) {\r\n        //in admin tools pages: admin status is checked directly dor completely making sure that user is admin and he/her is trusted directly from server\r\n        (async () => {\r\n            try {\r\n                const { data, status } = await userServices.isAdministrator(\r\n                    player.userID\r\n                );\r\n                if (status === Configs.Status.Successful) return data.answer;\r\n                return false;\r\n            } catch (err) {\r\n                //CHECK THIS PART\r\n                return false;\r\n            }\r\n        })()\r\n            .then((answer) => {\r\n                setAllowed(answer);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"مشکلی در تعیین سطح دسترسی شما بوجود آمد. لطفا مجددا تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n            });\r\n    }\r\n\r\n    // show proper message for simple users\r\n    if (!player || isAllowed === false) {\r\n        //in first render a wronge message will be shown! find a fix\r\n        //2nd condition must be exactly the same\r\n        toast.warn(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\", {\r\n            position: \"top-left\",\r\n            closeOnClick: true,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    //runs when create notice button clicks\r\n    const createNewNotice = async () => {\r\n        //add patern and stuff to states and inputs\r\n        try {\r\n            setLoading(true);\r\n            const { status } = await noticeServices.createNotice({\r\n                title,\r\n                text,\r\n                startDate,\r\n                endDate,\r\n            });\r\n            //*********** */\r\n            //COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n            if (status === Configs.Status.CreatedSuccessfully) {\r\n                toast.success(`اطلاعیه ی ${title} با مورفقیت ساخته شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selecteNotice = (notice) => {\r\n        // console.log(notice);\r\n        setSelectedNoticeID(notice._id);\r\n        setTitle(notice.title);\r\n        setText(notice.text);\r\n        setStartDate(notice.startDate);\r\n        setEndDate(notice.endDate);\r\n    };\r\n\r\n    const cancelEditing = () => {\r\n        resetStates();\r\n    };\r\n\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        if (!selectedNoticeID) return;\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await noticeServices.editNotice(\r\n                selectedNoticeID,\r\n                { title, text, startDate, endDate }\r\n            );\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n    // if admin status is checked directly by server then start rendering the page\r\n    //consists two part\" right part => used for creating and editing notices\r\n    //left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n    //edit all heights in control panel\r\n    //add patern and stuff to states and inputs\r\n    return (\r\n        <Fragment>\r\n            {player && isAllowed && (\r\n                <Row style={{ height: \"100%\" }}>\r\n                    <LoadingBar loading={loading} />\r\n                    <Col xs={5}>\r\n                        <Card\r\n                            style={{ height: \"850px\" }}\r\n                            border=\"success\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه جدید\r\n                            </Card.Header>\r\n                            <Card.Body className=\"text-right\">\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    عنوان اطلاعیه\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    className=\"my-1 mx-auto\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"عنوان\"\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    توضیحات\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    className=\"my-1 mx-auto h-25\"\r\n                                    placeholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n                                    value={text}\r\n                                    required=\"requires\"\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ شروع نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto w-100\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={startDate}\r\n                                    onChange={setStartDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ پایان نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={endDate}\r\n                                    onChange={setEndDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                                {!selectedNoticeID ? (\r\n                                    <Button\r\n                                        block\r\n                                        variant=\"success\"\r\n                                        onClick={createNewNotice}>\r\n                                        <i\r\n                                            className=\"fa fa-floppy-o px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ایجاد اطلاعیه\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-primary\"\r\n                                                onClick={saveChanges}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                ذخیره تغییرات\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-warning text-secondary\"\r\n                                                onClick={cancelEditing}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                لغو ویرایش\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs={7}>\r\n                        <Card\r\n                            border=\"info\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه های قبلی\r\n                            </Card.Header>\r\n                            <Card.Body className=\"text-right\">\r\n                                {notices.map((notice) => {\r\n                                    return (\r\n                                        <Fragment>\r\n                                            <Alert variant=\"secondary\">\r\n                                                <i\r\n                                                    className=\"fa fa-info-circle px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"red\",\r\n                                                        fontSize: \"18px\",\r\n                                                    }}>\r\n                                                    {notice.title}\r\n                                                </span>\r\n                                                : {notice.text}\r\n                                                <i\r\n                                                    className=\"iconEditNotice fa fa-pencil-square-o px-3\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    onClick={() =>\r\n                                                        selecteNotice(notice)\r\n                                                    }></i>\r\n                                            </Alert>\r\n                                            <hr />\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport \"./controlpanel.css\";\r\nimport userServices from \"./../services/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerRecordUpdate } from \"../dashboard/actions\";\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n\r\n    const dispatch = useDispatch();\r\n    //on component mount download user credentials\r\n    useEffect(() => {\r\n        (async () => {\r\n            setLoading(true);\r\n            const { status, data } = await userServices.getMyCredentials();\r\n            if (status === Configs.Status.Successful) return data.me;\r\n\r\n            return null;\r\n        })()\r\n            .then((me) => {\r\n                setFullname(me.fullname);\r\n                setStudentID(me.studentID);\r\n                setEmail(me.email);\r\n                setLoading(false);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n                setLoading(false);\r\n            });\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`تغییرات با موفقیت اعمال شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const updatePassword = () => {};\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch(pageMode){\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                updatePassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"mx-auto userInfoCard\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-50 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={e => selectMode(e)}>\r\n                <Card.Body className=\"w-50 mx-auto\">\r\n                    <LoadingBar loading={loading} />\r\n\r\n                    \r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"userInfoTextBox form-control w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"userInfoTextBox form-control w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox form-control w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"userInfoTextBox form-control w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox form-control w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={password}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox form-control w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={password}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    \r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        disabled={!pageMode}\r\n                        block\r\n                        variant=\"success\"\r\n                        className=\"w-50 mx-auto\">\r\n                        <i\r\n                            className=\"fa fa-user-plus px-3\"\r\n                            aria-hidden=\"true\"></i>\r\n                        ذخیره تغییرات\r\n                    </Button>\r\n                </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","import { Component } from \"react\";\r\nimport ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport GameRules from \"./informations/GameRules\";\r\nimport ContactInfo from \"./informations/ContactInfo\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./common/MainLayout\";\r\nimport Ranking from \"./tables/ranking/Ranking\";\r\nimport ControlPanel from './controlpanel/ControlPanel';\r\nimport GameDeck from './games/GameDeck';\r\nimport NoticeManager from './controlpanel/NoticeManager';\r\nimport AccountCredentials from './controlpanel/AcountCredentials';\r\n\r\nclass App extends Component {\r\n    // 1. use uuid to produce ids\r\n    // state = {  }\r\n    \r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path=\"/signUp\" component={SignUp} />\r\n                    <Route path=\"/gameDeck\" component={GameDeck} />\r\n                    <Route path=\"/ranking\" component={Ranking} />\r\n                    <Route path=\"/gameRules\" component={GameRules} />\r\n                    <Route path=\"/contactInfo\" component={ContactInfo} />\r\n                    <Route path=\"/controlPanel/info\" component={AccountCredentials} />\r\n                    <Route path=\"/controlPanel/admin/notices\" component={NoticeManager} />\r\n                    <Route path=\"/controlPanel\" exact component={ControlPanel} />\r\n                    <Route path=\"/\" exact component={ScoresTable} />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer\r\n});\r\n","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n\r\n        case \"UPDATE_ME\":\r\n            return null; //sets state.player => null, forces Mainlayout to reload and update state.player data\r\n\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {roomName, gameType} = action.payload;\r\n            return {name: roomName, type: gameType};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        case \"RESET_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (state = {trigger: false}, action) => {\r\n    switch (action.type) {\r\n        case \"TRIGGER_UPDATE\":\r\n            return {trigger: !state.trigger}; //trigger update\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n","const Routes = require ('./server');\r\nconst Status = require('./status');\r\nconst BrowserStorage = require('./browser');\r\n//all configs\r\nmodule.exports = {\r\n    BrowserStorage,\r\n    Routes,\r\n    Status\r\n}\r\n","//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Credentials: \"credentials\",\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    NoticeManagement: \"manage\"\r\n};\r\n","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\n\r\nmodule.exports = {\r\n    Token: \"ptk\",\r\n    ID: \"pid\"\r\n}"],"sourceRoot":""}