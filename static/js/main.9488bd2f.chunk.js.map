{"version":3,"sources":["services/configs/client.js","services/configs/server.js","services/configs/status.js","services/configs/browser.js","services/configs/gamesetting.js","tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","services/http/httpService.js","services/http/userServices.js","services/http/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameGuide.jsx","informations/ContactUs.jsx","common/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","common/NavigationBar.jsx","sidebars/SignInSideBar.jsx","services/http/noticeServices.js","sidebars/NoticeSideBar.jsx","sidebars/no-avatar.png","sidebars/OnlineStatistics.jsx","dashboard/actions/index.js","chat/GameChatRoom.jsx","sidebars/PlayerInfoSideBar.jsx","profile/ProfilePanel.jsx","services/ws/GlobalSocketManager.jsx","common/MainLayout.jsx","tables/rankings/SinglePlayerCard.jsx","tables/rankings/AllPlayers.jsx","tables/rankings/Rankings.jsx","services/ws/gamePlaySocketServices.js","dashboard/withReduxDashboard.js","games/gameplay/BriefScoreboard.jsx","games/gameplay/TableDesign.jsx","games/gameplay/GamePlay.jsx","games/SingleGame.jsx","games/competitions/CompetitionSummary.jsx","games/competitions/CompetitionsMain.jsx","games/GameDeck.jsx","profile/NoticeManager.jsx","profile/AcountCredentials.jsx","profile/no-avatar.png","profile/FriendRecords.jsx","profile/MyGamesAndFriends.jsx","services/http/chatServices.js","chat/Message.jsx","chat/ChatBox.jsx","chat/ChatRoom.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/reducers/tools.js","dashboard/reducers/statistics.js","dashboard/reducers/message.js","dashboard/reducers/device.js","dashboard/store/index.js","index.js","services/configs/index.js"],"names":["Profile","module","exports","Root","SignUp","SignIn","GameDeck","Rankings","GameGuide","ContactUs","ChatRoom","MyGamesAndFriends","Notices","WebSocketRoot","wsGamePlayRoute","wsGlobalRoute","Users","Credentials","PasswordChange","Friends","Public","Administrators","Games","Mine","Chats","NoticeManagement","Successful","CreatedSuccessfully","BadRequest","Unauthorized","Forbidden","NotFound","NotAcceptable","Conflict","SessionExpired","UnprocessableEntity","InternalServerError","isErrorExpected","error","response","status","Token","ID","T3D","TableRowMargings","TurnTimeOut","SingleScoreCard","Type","playerXName","playerOName","xScore","oScore","xBadgeColor","oBadgeColor","Card","border","className","Body","Row","Footer","Button","variant","block","size","AllScores","scores","console","log","length","map","score","players","name","gameID","Text","axios","defaults","headers","post","put","interceptors","request","use","config","token","sessionStorage","getItem","BrowserStorage","Authorization","Promise","reject","expectedErrors","Status","toast","position","closeOnClick","http","get","delete","Server","Routes","userServices","signUp","user","JSON","stringify","signIn","getPlayer","userID","getAllPlayers","getMyCredentials","editMyCredentials","newMe","changeMyPassword","passwords","getMyFriends","isMyFriend","targetID","isAdministrator","saveUser","id","setItem","readUserID","gameServices","getAllGames","getMyGames","loadPlayerData","a","data","resolve","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","Configs","allGames","then","result","reverse","filter","game","isLive","catch","err","this","Container","Col","onClick","Component","Header","href","LoadingBar","useState","whichOne","setWhichOne","useEffect","Math","floor","random","useLayoutEffect","document","body","style","overflowY","height","selectedLoader","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","Number","props","history","replace","onForgotPasswordClick","Modal","backdrop","show","onHide","closeButton","Form","onSubmit","Group","Label","Control","type","placeholder","autoComplete","value","onChange","e","target","controlId","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","newUser","fullname","success","warn","pattern","onInput","onInvalid","required","NavigationBar","useSelector","device","Navbar","bg","expand","Toggle","activeClassName","to","Client","Collapse","Nav","exact","Device","SmartPhone","SignInSideBar","noticeServices","createNotice","notice","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","notices","setNotices","title","text","Alert","color","fontSize","OnlineStatistics","statistics","games","ListGroup","Item","Badge","pill","LoadMe","payload","SetRoom","room","SendFriendRequestTo","SendMessageTo","friendID","SetDeviceType","GameChatRoom","myMessage","setMyMessage","message","dispatch","useDispatch","me","composeMessage","recieved","InputGroup","Prepend","width","PlayerInfoSideBar","inGame","personIsFriend","setPersonIsFriend","person","isFriend","Image","src","noAvatar","alt","index","Heading","shape","records","points","wins","draws","loses","innerHTML","disabled","onFriendRequestClick","isAdmin","GlobalSocketManager","socketGlobal","setSocketGlobal","incommingFriendRequest","setIncommingFriendRequest","showFriendshipModal","setShowFriendshipModal","opponent","tools","clientOnline","toggleClientOnline","enableGlobalTimer","useCallback","setInterval","send","clientID","msg","timerID","clearInterval","connect","socket","WebSocket","onopen","onmessage","parse","command","setTimeout","askerID","answer","targetName","warning","onerror","close","onclose","opponentSearchTriggered","friendRequest","askerName","respondToFriendshipRequest","sent","window","navigator","onLine","margin","pathname","location","scoreboard","deviceIsDesktop","useMediaQuery","query","deviceIsSmartPhone","deviceIsTablet","leftSideBar","setLeftSideBar","rightSideBar","setRightSideBar","Desktop","Tablet","updateTriggered","setPrimaryRightSideBar","opp","includes","children","xs","SinglePlayerCard","rowNumber","scope","AllPlayers","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","createSocketRequest","rname","playerID","roomName","gameType","server","withReduxDashboard","component","LoadOpponent","UpdateMyRecords","ResetOpponent","ResetRoom","SetGameID","UpdateScoreboard","details","CleanScoreboard","TriggerRecordUpdate","BriefScoreboard","timeRemaining","textAlign","TableDesign","dimension","table","onEachCellClick","dimens","i","push","row","direction","marginLeft","GameSetting","column","GamePlay","lineColor","turn","myTurn","undefined","socketGamePlay","playerOnline","connectionCheckTimerID","LoadOpponentData","opponentID","updateGameScorebaord","oppTurn","enableTimerForMyMove","timeout","updatePlayerStates","disableAllTimers","clearTimeout","socketOnMessage","IDs","opponentIndex","cellID","nextMove","verifyAndApplyTheMove","getCellCoordinates","cellButtons","focus","endThisGame","closeThisGame","forceConnectWS","nextJob","enableConnectionCheckTimer","dimen","onFloorId","selectedCellButton","cell","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","connectTheScoreLines","count","firstCell","step","info","getElementsByClassName","RoomManager","friendlyGame","setRoomName","setGameType","searching","setSearching","onStartGameClick","padding","Radio","checked","CompetitionSummary","summary","CompetitionsMain","Tab","defaultActiveKey","sm","Link","eventKey","Content","Pane","Tabs","transition","SingleGame","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","createNewNotice","Date","saveChanges","as","calendar","persian","locale","persian_fa","calendarPosition","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","reloadPage","selectMode","FriendRecords","friend","myFriends","setMyFriends","myGames","setMyGames","filterID","setFilterID","selectedFriendIndex","setSelectedFriendIndex","serverResponse","friends","onSelect","key","chatServices","getOurChat","Message","previousDay","inDesktop","date","showDate","setShowDate","setTime","persianDate","setPersianDate","persianDateObject","DateObject","format","getDate","ChatBox","mostRecentMessageRef","useRef","allMsgs","setAllMsgs","loadPreviousMessages","myIndex","chat","previousMsgs","owner","recieveMessage","tempMsg","ref","current","scrollIntoView","behavior","top","offsetTop","App","path","reducers","combineReducers","action","clear","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","getElementById","ClientRoutes","require","ServerRoutes"],"mappings":"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","file":"static/js/main.9488bd2f.chunk.js","sourcesContent":["//client routes\r\n\r\n// Partial Routes\r\nconst Profile = \"/Profile\",\r\n    ChatRoom = \"ChatRoom\",\r\n    MyGamesAndFriends = \"GamesFriends\",\r\n    Notices = \"Notices\";\r\n\r\nmodule.exports = {\r\n    Root: \"/\",\r\n    SignUp: \"/SignUp\",\r\n    SignIn: \"/SignIn\",\r\n    GameDeck: \"/GameDeck\",\r\n    Rankings: \"/Rankings\",\r\n    GameGuide: \"/GameGuide\",\r\n    ContactUs: \"/ContacUs\",\r\n    Profile,\r\n    ChatRoom: `${Profile}/${ChatRoom}`,\r\n    MyGamesAndFriends: `${Profile}/${MyGamesAndFriends}`,\r\n    Notices: `${Profile}/${Notices}`,\r\n};\r\n","//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com/ws\",\r\n    wsGamePlayRoute: \"gameplay\",\r\n    wsGlobalRoute: \"global\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Credentials: \"credentials\",\r\n    PasswordChange: \"password\",\r\n    Friends: 'friends',\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    Mine: \"mine\",\r\n    Chats: \"chats\",\r\n    Notices: \"notices\",\r\n    NoticeManagement: \"manage\"\r\n};","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    SessionExpired: 420,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\n\r\nmodule.exports = {\r\n    Token: \"ptk\",\r\n    ID: \"pid\"\r\n}","module.exports = {\r\n    T3D: {\r\n        TableRowMargings: [0, 40, 80, 120, 160],\r\n        TurnTimeOut: 30, //secs\r\n    },\r\n};\r\n","import { Button, Card, Row } from \"react-bootstrap\";\r\nimport \"./scores.css\";\r\n\r\nconst SingleScoreCard = ({\r\n    Type,\r\n    playerXName,\r\n    playerOName,\r\n    xScore,\r\n    oScore,\r\n}) => {\r\n    // format score text:\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        oBadgeColor = \"badge-danger\";\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        xBadgeColor = \"badge-danger\";\r\n    }\r\n\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <Card border=\"dark\" className=\"single-score-card\">\r\n            {/* <Card.Header className=\"text-center border-dark\">{`T3D ${Type}x${Type}x${Type}`}</Card.Header> */}\r\n            <Card.Body>\r\n                <Row className=\"text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} single-score-badge col-1`}>\r\n                        {xScore}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} single-score-badge col-1`}>\r\n                        {oScore}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </Row>\r\n            </Card.Body>\r\n            <Card.Footer className=\"p-0\">\r\n                <Button\r\n                    variant=\"outline-dark\"\r\n                    block\r\n                    size=\"lg\"\r\n                    className=\"replay-game-button\">\r\n                    {`دوز ${Type}x${Type}x${Type} (بازپخش؟)`}\r\n                </Button>\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    console.log(scores);\r\n    return ( \r\n        <Fragment>\r\n            { scores.length ? scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    Type={score.Type}\r\n                    playerXName={score.players[0].name}\r\n                    playerOName={score.players[1].name}\r\n                    xScore={score.players[0].score}\r\n                    oScore={score.players[1].score}\r\n                ></SingleScoreCard>\r\n            )) :\r\n            <Card className=\"bg-transparent mx-auto mt-3\" border=\"danger\">\r\n                <Card.Body className=\"text-center\">\r\n                    <Card.Text>\r\n                        هیچ بازی ای انجام نگرفته اس\r\n                    </Card.Text>\r\n                </Card.Body>\r\n                </Card>}\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Status, BrowserStorage } from \"../configs\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = sessionStorage.getItem(BrowserStorage.Token);\r\n        if (token) config.headers.Authorization = `Bearer ${token}`;\r\n        else config.headers.Authorization = \"\";\r\n        // console.log(config.headers.Authorization);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // what to do?\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= Status.BadRequest && // >= 400\r\n        error.response.status < Status.InternalServerError; // < 500\r\n\r\n        //*****notice: */\r\n        //remove some oftheese errors... because they need to be costomized in every use in each components\r\n    // change to switch\r\n    if (error.response.status === Status.BadRequest) {\r\n        toast.error(\r\n            \"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Unauthorized) {\r\n        toast.error(\r\n            \"احراز هویت موفقیت آمیز نبود. لطفا وارد حساب کاربری خود شوید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Forbidden) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.NotAcceptable) {//or used Locked: 423\r\n        toast.error(\"این قسمت فقط مختص کاربران ادمین می باشد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.Conflict) {\r\n        toast.error(\r\n            \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n    else if(error.response.status === Status.SessionExpired){\r\n        toast.error(\"نشست شما منقضی شده است، لطفا دوباره وارد حساب خود شوید.\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n        //redirect to sign in page !\r\n    }\r\n    else if (error.response.status === Status.UnprocessableEntity) {\r\n        toast.error(\"ورودی شما با استانداردهای سایت مطابقت ندارد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\r\n            \"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport { BrowserStorage, Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignUp}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Users}/${Server.SignIn}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Public}/${userID}`\r\n        );\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Public}`);\r\n    },\r\n    getMyCredentials: () => {\r\n        //token will be sent automatically, o.w. method doesnt return anything\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}`);\r\n    },\r\n    editMyCredentials: (newMe) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}`,\r\n            JSON.stringify(newMe)\r\n        );\r\n    },\r\n    changeMyPassword: (passwords) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.PasswordChange}`,\r\n            JSON.stringify(passwords)\r\n        );\r\n    },\r\n    getMyFriends: () => {\r\n        return http.get(`${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}`);\r\n    },\r\n    isMyFriend: (targetID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Credentials}/${Server.Friends}/${targetID}`\r\n        );\r\n    },\r\n    isAdministrator: (userID) => {\r\n        return http.get(\r\n            `${Server.Root}/${Server.Users}/${Server.Administrators}/${userID}`\r\n        );\r\n    }, // check is admin via token? or this?:|\r\n    saveUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(BrowserStorage.ID, id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(BrowserStorage.Token, token);\r\n    },\r\n    readUserID: () => {\r\n        //from browser\r\n        // consider local storage\r\n        return sessionStorage.getItem(BrowserStorage.ID);\r\n    },\r\n};\r\n\r\nexport default userServices;","import { Routes, Status } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst gameServices = {\r\n    \r\n    getAllGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}`);\r\n    },\r\n    getMyGames: () => {\r\n        return http.get(`${Server.Root}/${Server.Games}/${Server.Mine}`);\r\n    },\r\n    loadPlayerData: async(userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (userID === null) reject(null);\r\n            if (status === Status.Successful) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;","import \"./scores.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport Configs from \"../../services/configs\";\r\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllGames();\r\n            if (status === Configs.Status.Successful) return data.allGames;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                result = result.reverse();\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        // DESIGN : USE <Tabs> ???\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            variant={\r\n                                !showLiveOnes\r\n                                    ? \"outline-success\"\r\n                                    : \"outline-primary\"\r\n                            }\r\n                            className=\"scores-mode-select-button\"\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {/* this single column is to make mode select buttons and Allscores same width */}\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst GameGuide = () => {\r\n    return ( \r\n        <Card border=\"warning\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">راهنمای بازی</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default GameGuide;","import { Card } from 'react-bootstrap';\r\nimport './info.css'\r\n\r\nconst ContactUs = () => {\r\n    return ( \r\n        <Card border=\"dark\" className=\"simple-single-card\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default ContactUs;","import { Fragment, useLayoutEffect, useState, useEffect } from \"react\";\r\nimport { Planets, Circle2, Sugar } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    const [whichOne, setWhichOne] = useState(0);\r\n    useEffect(() => {\r\n        setWhichOne(Math.floor(Math.random() * 100)); //randomize animation\r\n    }, []);\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading, whichOne]); //may have bug yet!!\r\n    //random animation\r\n    const selectedLoader =\r\n        whichOne % 3 === 0 ? (\r\n            <Circle2 time={0} customLoading={loading} />\r\n        ) : whichOne % 3 === 1 ? (\r\n            <Planets time={0} customLoading={loading} />\r\n        ) : (\r\n            <Sugar time={0} customLoading={loading} />\r\n        );\r\n\r\n    return <Fragment>{loading ? selectedLoader : null}</Fragment>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-2\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal\r\n                    backdrop=\"static\"\r\n                    show={showModal}\r\n                    onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    autoComplete=\"username\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    autoComplete=\"current-password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <hr />\r\n                            <Row>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-warning\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from '../services/configs';\r\nimport { Card, Form , Button} from \"react-bootstrap\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    userServices.saveUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n                    // toast.error(\r\n                    //     \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                    //     {\r\n                    //         position: \"top-right\",\r\n                    //         closeOnClick: true,\r\n                    //     }\r\n                    // );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else if(!Configs.Status.isErrorExpected(err)){\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Card border=\"success\" className=\"sign-up-card\">\r\n                <LoadingBar loading={loading} />\r\n                <Card.Header className=\"bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام خانوادگی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">شماره دانشجویی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                autoComplete=\"username\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">ایمیل</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                autoComplete=\"new-password\"\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">تایید رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                className=\"sign-up-textbox w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer className=\"border-primary bg-transparent\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {  NavLink } from \"react-router-dom\";\r\nimport {Routes, Device} from '../services/configs';\r\n\r\nconst NavigationBar = () => {\r\n    const player = useSelector((state) => state.player);\r\n    const device = useSelector(state => state.device);\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\" className=\"nav-pills text-right\">\r\n            <Container className=\"text-right\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <NavLink\r\n                    border=\"secandary\"\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"btn-success text-dark\"\r\n                    to={player ? Routes.Client.Profile : Routes.Client.SignUp}>\r\n                    <i\r\n                        className=\"fa fa-address-card px-2\"\r\n                        aria-hidden=\"true\"></i>\r\n                    {player ? player.fullname : \"ثبت نام\"}\r\n                </NavLink>\r\n\r\n                <Navbar.Collapse>\r\n                    <Nav className=\"me-auto\">\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.Root}\r\n                            exact\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-home px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            صفحه اصلی\r\n                        </NavLink>\r\n\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.GameDeck}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی ها\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.Rankings}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-list-ol px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            رنکینگ\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.GameGuide}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-eye px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            راهنما\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.ContactUs}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-phone-square px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            تماس با ما\r\n                        </NavLink>\r\n                        {player && device === Device.SmartPhone && <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to={Routes.Client.ChatRoom}\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-phone-square px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            چت روم\r\n                        </NavLink>}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card, Form, Button, Col, Row } from \"react-bootstrap\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            // console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <Card border=\"primary\" className=\"sign-in-sidebar\">\r\n                <Card.Header\r\n                    border=\"primary\"\r\n                    className=\"text-center text-primary\">\r\n                    ورود کاربران\r\n                </Card.Header>\r\n                <LoadingBar loading={loading} />\r\n                <Card.Body className=\"text-primary\">\r\n                    <Form onSubmit={(event) => this.onSignInSubmitted(event)} >\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            autoComplete=\"username\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"شماره دانشجویی\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            className=\"sign-in-sidebar-textBox\"\r\n                            placeholder=\"رمز عبور\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Card.Footer className=\"bg-transparent border-primary\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"success\"\r\n                                        className=\"sign-in-sidebar-buttons\">\r\n                                        <i\r\n                                            className=\"fa fa-sign-in px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ورود\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button\r\n                                        className=\"sign-in-sidebar-buttons\"\r\n                                        variant=\"warning\">\r\n                                        <i\r\n                                            className=\"fa fa-recycle px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        بازیابی پسورد\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst {Server} = Routes;\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Server.Root}/${Server.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Server.Root}/${Server.Notices}/${Server.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\n\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n\r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const { status, data } =\r\n                    await noticeServices.getShortNotices();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    else\r\n                        setNotices([\r\n                            { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                        ]);\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"notice-sidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.map((notice) => {\r\n                    return (\r\n                        <Fragment>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-info-circle px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Badge, Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst OnlineStatistics = () => {\r\n    const {players, games} = useSelector((state) => state.statistics);\r\n    return (\r\n        <ListGroup className=\"list-group list-group-flush\">\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-wifi px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            کاربران آنلاین\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {players}\r\n                        </Badge>\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی های فعال\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"player-badge-font-size\" variant=\"success\" pill>\r\n                            {games}\r\n                        </Badge>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default OnlineStatistics;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const UpdateMyRecords = () => ({\r\n    type: \"UPDATE_ME\",\r\n});\r\n\r\nexport const TriggerRecordUpdate = () => ({\r\n    type: \"TRIGGER_UPDATE\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\nexport const ResetRoom = () => ({\r\n    type: \"RESET_ROOM\",\r\n});\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n\r\nexport const UpdateStatistics = (statistics) => ({\r\n    type: \"UPDATE_STATISTICS\",\r\n    payload: statistics,\r\n});\r\n\r\nexport const TriggerOpponentSearch = () => ({\r\n    type: \"TRIGGER_OPPONENT_SEARCH\"\r\n})\r\n\r\nexport const SendFriendRequestTo = (targetID) => ({\r\n    type: \"SEND_FRIEND_REQUEST\",\r\n    payload: targetID\r\n})\r\n\r\nexport const SendMessageTo = (name, friendID, text) => ({\r\n    type: \"SEND_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const RecieveMessageFrom = (name, friendID, text) => ({\r\n    type: \"RECIEVE_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const ResetMessages = () => ({\r\n    type: \"RESET_MESSAGES\"\r\n});\r\n\r\nexport const SetDeviceType = (Type) => ({\r\n    type: \"SET_DEVICE\",\r\n    payload: Type\r\n});","import { Alert, Button, Form, Row, InputGroup } from \"react-bootstrap\";\r\nimport {  useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { SendMessageTo } from \"../dashboard/actions\";\r\n\r\nconst GameChatRoom = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(null);\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n\r\n    const composeMessage = (event) => {\r\n        event.preventDefault();\r\n        dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n    };\r\n\r\n    return (\r\n        <Form onSubmit={(event) => composeMessage(event)}>\r\n            <Row className=\"w-100 mt-3 mx-auto\">\r\n                <Alert className=\"w-100 text-right\" variant=\"info\">\r\n                    {message.recieved ? message.recieved.text : null}\r\n                </Alert>\r\n            </Row>\r\n            <Row className=\"w-100 mx-auto mb-3\">\r\n                <InputGroup className=\"w-100\">\r\n                    <InputGroup.Prepend style={{ width: \"10%\" }}>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"mx-auto\"\r\n                            variant=\"outline-info\">\r\n                            <i\r\n                                className=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </InputGroup.Prepend>\r\n\r\n                    <InputGroup.Prepend style={{ width: \"90%\" }}>\r\n                        <Form.Control\r\n                            placeholder=\"پیام...\"\r\n                            value={myMessage}\r\n                            onChange={(e) => setMyMessage(e.target.value)}\r\n                            className=\"text-right\"></Form.Control>\r\n                    </InputGroup.Prepend>\r\n                </InputGroup>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default GameChatRoom;\r\n","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Badge,\r\n    Image,\r\n    ListGroup,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport OnlineStatistics from \"./OnlineStatistics\";\r\nimport { SendFriendRequestTo } from \"../dashboard/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport GameChatRoom from \"../chat/GameChatRoom\";\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { inGame } = props;\r\n    const me = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const [personIsFriend, setPersonIsFriend] = useState(false);\r\n\r\n    const person = props.person ? props.person : me;\r\n    \r\n    const onFriendRequestClick = (event) => {\r\n        event.target.innerHTML = \"ارسال شد...\";\r\n        event.target.disabled = true;\r\n        dispatch(SendFriendRequestTo(person.userID));\r\n    };\r\n    \r\n    useEffect(() => {\r\n        if (me && person.userID !== me.userID) {\r\n            (async () => {\r\n                try {\r\n                    const { status, data } = await userServices.isMyFriend(\r\n                        person.userID\r\n                    );\r\n                    if (status === Configs.Status.Successful) {\r\n                        setPersonIsFriend(data.isFriend);\r\n                    }\r\n                } catch (err) {\r\n                    // handle error.\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [person, me]);\r\n    if(!person) return null;\r\n    return (\r\n        <Card border=\"info\" className=\"player-info-sideBar\">\r\n            <Card.Header className=\"text-center text-info form-inline\">\r\n                <Col>\r\n                    <Card.Text className=\"text-left\">{person.fullname}</Card.Text>\r\n                </Col>\r\n                <Col>\r\n                    <Image\r\n                        className=\"card-img-top player-avatar\"\r\n                        src={noAvatar}\r\n                        alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n                    />\r\n                </Col>\r\n            </Card.Header>\r\n\r\n            <Card.Body>\r\n                <ListGroup className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <ListGroup.Item>\r\n                            <Alert\r\n                                variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading className=\"text-center\">\r\n                                    {inGame.score} : {inGame.shape}\r\n                                </Alert.Heading>\r\n                            </Alert>\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>امتیاز بازیکن</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>تعداد بردها</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.wins}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">تعداد تساوی ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.draws}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row>\r\n                            <Col className=\"text-right\">تعداد باخت ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"player-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.loses}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {me === person ? (\r\n                    <OnlineStatistics />\r\n                ) : personIsFriend ? (\r\n                    <GameChatRoom friendID={person.userID} />\r\n                ) : (\r\n                    <Button\r\n                        variant={\"outline-info\"}\r\n                        block\r\n                        onClick={(event) => onFriendRequestClick(event)}>\r\n                        <i\r\n                            className=\"fa fa-handshake-o px-2\"\r\n                            aria-hidden=\"true\"></i>\r\n                        درخواست دوستی\r\n                    </Button>\r\n                )}\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"./profile.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../dashboard/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nimport Configs from \"../services/configs\";\r\n\r\nconst ProfilePanel = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n        <Row //bg-transparent\r\n            className=\"panel-sidebar mt-2 bg-dark text-right d-flex flex-column mx-auto flex-shrink-0 p-3\">\r\n            <NavLink\r\n                to={Configs.Routes.Client.Profile}\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <svg className=\"bi me-2\" width=\"40\" height=\"32\"></svg>\r\n                <span className=\"fs-4\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </span>\r\n            </NavLink>\r\n            <hr />\r\n            <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink\r\n                        exact\r\n                        to={Configs.Routes.Client.Profile}\r\n                        className=\"nav-link\"\r\n                        aria-current=\"page\">\r\n                        <i className=\"fa fa-user-o px-3\" aria-hidden=\"true\"></i>\r\n                        مشخصات\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to={Configs.Routes.Client.MyGamesAndFriends}>\r\n                        <i className=\"fa fa-users px-3\" aria-hidden=\"true\"></i>\r\n                        دوستان و بازی ها\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to={Configs.Routes.Client.ChatRoom}>\r\n                        <i className=\"fa fa-users px-3\" aria-hidden=\"true\"></i>\r\n                        چت روم\r\n                    </NavLink>\r\n                </li>\r\n                <hr />\r\n                {player && player.isAdmin && (\r\n                    <Fragment>\r\n                        {/* admin tools */}\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to={Configs.Routes.Client.Notices}>\r\n                                <i\r\n                                    className=\"fa fa-newspaper-o px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                اطلاعیه ها\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/whatever\">\r\n                                <svg\r\n                                    className=\"bi me-2\"\r\n                                    width=\"16\"\r\n                                    height=\"16\"></svg>\r\n                                امکانات ادمین\r\n                            </NavLink>\r\n                        </li>\r\n                    </Fragment>\r\n                )}\r\n            </ul>\r\n            <hr />\r\n            <Button variant=\"outline-danger\" onClick={signMeOut}>\r\n                <i className=\"fa fa-sign-out px-3\" aria-hidden=\"true\"></i>\r\n                خروج از حساب کاربری\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(ProfilePanel);\r\n","import { Routes } from \"../configs\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    TriggerOpponentSearch,\r\n    UpdateStatistics,\r\n    SetRoom,\r\n    SendFriendRequestTo,\r\n    RecieveMessageFrom,\r\n    ResetMessages,\r\n} from \"../../dashboard/actions\";\r\nimport { Modal, Button, Row, Col, Badge } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst GlobalSocketManager = () => {\r\n    // I actually used .jsx format to make this Component EventBased\r\n    // On Each event called socket will do some specific operation\r\n    // events are actually useEffects bound to special state changes\r\n    const [socketGlobal, setSocketGlobal] = useState(null);\r\n    const [incommingFriendRequest, setIncommingFriendRequest] = useState(null);\r\n    const [showFriendshipModal, setShowFriendshipModal] = useState(false);\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const tools = useSelector((state) => state.tools);\r\n    const room = useSelector((state) => state.room);\r\n    const message = useSelector((state) => state.message);\r\n    const [clientOnline, toggleClientOnline] = useState(true);\r\n    const dispatch = useDispatch();\r\n\r\n    const enableGlobalTimer = useCallback(() => {\r\n        return setInterval(() => {\r\n            \r\n            if (socketGlobal){\r\n                console.log(\"updating statistics...\");\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        request: \"online\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                );}\r\n        }, 300000); // every 5 MINUTES request number of online members to update the site\r\n    }, [socketGlobal, player]);\r\n    \r\n    useEffect(() => {\r\n        console.log(\"global timer enabled\");\r\n        const timerID = enableGlobalTimer();\r\n\r\n        return () => {\r\n            console.log(\"global timer disabled\");\r\n            clearInterval(timerID);\r\n        }\r\n    }, [enableGlobalTimer]);\r\n\r\n    const connect = useCallback(() => {\r\n        return new Promise((resolve, reject) => {\r\n            var socket = new WebSocket(\r\n                `${Routes.Server.WebSocketRoot}/${Routes.Server.wsGlobalRoute}`\r\n            );\r\n            socket.onopen = () => {\r\n                socket.send(\r\n                    JSON.stringify({\r\n                        request: \"online\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                ); //temp\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onmessage = (response) => {\r\n                const { data } = response;\r\n                const { command, msg } = JSON.parse(data);\r\n                switch (command) {\r\n                    case \"ONLINE\": {\r\n                        const { players, games } = msg;\r\n                        dispatch(\r\n                            UpdateStatistics({\r\n                                players,\r\n                                games,\r\n                            })\r\n                        ); //playing temp\r\n                        break;\r\n                    }\r\n                    case \"ENTER_ROOM\": {\r\n                        if (msg) {\r\n                            console.log(\"your room\", msg);\r\n                            dispatch(SetRoom(msg));\r\n                            socket.send(\r\n                                JSON.stringify({\r\n                                    request: \"online\",\r\n                                    clientID: player.userID,\r\n                                    msg: null,\r\n                                })\r\n                            );\r\n                        } else {\r\n                            //search again 5s later\r\n                            // **********************\r\n                            //time out must be set with rising time out time to prevent server getting fucked up\r\n                            setTimeout(() => {\r\n                                dispatch(TriggerOpponentSearch());\r\n                            }, 5000);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_REQUEST\": {\r\n                        if (msg.askerID === opponent.userID) {\r\n                            //if both players are in game then ask immidiately\r\n                            setIncommingFriendRequest(msg);\r\n                            setShowFriendshipModal(true);\r\n                        } else {\r\n                            //if the friend request is comming from some one else then manage it differently\r\n                            //...\r\n                        }\r\n                        break;\r\n                    }\r\n                    case \"FRIENDSHIP_RESPONSE\": {\r\n                        const { answer, targetName } = msg;\r\n                        //if(answer) dispatch(TriggerRecordUpdate());\r\n                        toast.warning(\r\n                            `کاربر ${targetName} درخواست دوستی شما را ${\r\n                                answer ? \"پذیرفت\" : \"رد کرد\"\r\n                            }`\r\n                        );\r\n                        dispatch(SendFriendRequestTo(null));\r\n                        break;\r\n                    }\r\n                    case \"CHAT\": {\r\n                        dispatch(\r\n                            RecieveMessageFrom(msg.name, msg.friendID, msg.text)\r\n                        );\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        //... whatever\r\n                        break;\r\n                    }\r\n                }\r\n                resolve(socket);\r\n            };\r\n\r\n            socket.onerror = (error) => {\r\n                // console.log(`WebSocket error: ${error}`);\r\n                socket.close();\r\n                reject(error);\r\n            };\r\n\r\n            socket.onclose = () => {\r\n                // reconnectr or what?\r\n                console.log(\"Reconnecting in  5 seconds\");\r\n                setTimeout(() => {\r\n                    (async () => {\r\n                        try {\r\n                            console.log(\"global socket online request\");\r\n                            let socket = player ? await connect() : null;\r\n                            setSocketGlobal(socket);\r\n                        } catch (err) {\r\n                            console.log(err);\r\n                        }\r\n                    })();\r\n                }, 5000);\r\n                resolve(null);\r\n                // this part needs editing ? maybe not\r\n            };\r\n        });\r\n    }, [dispatch, opponent, player]);\r\n\r\n    // EVENT NAME: PlayerUpdateEvent\r\n    // happens when player sign in status changes => set ups global socket connection and then if signed in=> reads number of online users in page\r\n    useEffect(() => {\r\n        if (clientOnline && player) {\r\n            (async () => {\r\n                try {\r\n                    console.log(\"global socket online request\");\r\n                    let socket = player ? await connect() : null;\r\n                    setSocketGlobal(socket);\r\n                } catch (err) {\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [clientOnline, player, connect]);\r\n\r\n    // EVENT NAME: RandomGameInitiated Event\r\n    // happens when user clicks on 'Random Game\" Tab search button => sends opponent search request to server\r\n    useEffect(() => {\r\n        if (room.type) {\r\n            //is it necessary?\r\n            //completely making sure we're on right stage\r\n            if (!room.name && socketGlobal && player)\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        request: \"find\",\r\n                        clientID: player.userID,\r\n                        msg: room.type,\r\n                    })\r\n                );\r\n        } else if (!room.name) {\r\n            //room --> {null,null} --> means room has been reset hand u need to remove\r\n            if (socketGlobal)\r\n                socketGlobal.send(\r\n                    JSON.stringify({\r\n                        request: \"close_game\",\r\n                        clientID: player.userID,\r\n                        msg: null,\r\n                    })\r\n                );\r\n        }\r\n    }, [player, room, tools.opponentSearchTriggered, socketGlobal]);\r\n\r\n    useEffect(() => {\r\n        if (tools.friendRequest) {\r\n            //tools.friendRequest either contains null => no request, or contains target ID for friendship\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"ask_friendship\",\r\n                    clientID: player.userID,\r\n                    msg: {\r\n                        targetID: tools.friendRequest,\r\n                        askerName: player.fullname,\r\n                    },\r\n                })\r\n            );\r\n        }\r\n    }, [tools.friendRequest, socketGlobal, player]);\r\n\r\n    const respondToFriendshipRequest = (answer) => {\r\n        // handle multiple requests *************\r\n        socketGlobal.send(\r\n            JSON.stringify({\r\n                request: \"respond_friendship\",\r\n                clientID: player.userID,\r\n                msg: {\r\n                    answer,\r\n                    targetName: player.fullname,\r\n                    askerID: incommingFriendRequest.askerID,\r\n                },\r\n            })\r\n        );\r\n        // if(answer) dispatch(TriggerRecordUpdate());\r\n        setShowFriendshipModal(false);\r\n        setIncommingFriendRequest(null);\r\n        dispatch(SendFriendRequestTo(null)); //reset friend request targetID to prevent any future problm\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (message.sent) {\r\n            //if destination is determined, otherwise => means no message has been sent\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"chat\",\r\n                    clientID: player.userID,\r\n                    msg: message.sent,\r\n                })\r\n            );\r\n            console.log(\"sent: \" + message.sent.text);\r\n            dispatch(ResetMessages());\r\n        }\r\n    }, [player, message, socketGlobal, dispatch]);\r\n\r\n    // if online status changes\r\n    setInterval(() => {\r\n        if (window.navigator.onLine) {\r\n            //client online\r\n            if (!clientOnline)\r\n                //this means -> client JUST became online\r\n                toggleClientOnline(true); //change connection status\r\n        } else {\r\n            // clients offline\r\n            if (clientOnline)\r\n                //this means -> client JUST became offline now\r\n                toggleClientOnline(false); //change connection status\r\n        }\r\n    }, 5000);\r\n\r\n    \r\n    // is it really necessary though ?????\r\n\r\n    return (\r\n        //this is just for firendship request in games\r\n        <Modal\r\n            show={showFriendshipModal}\r\n            onHide={() => respondToFriendshipRequest(false)}>\r\n            <Modal.Header closeButton />\r\n            <Modal.Body className=\"text-right\">\r\n                <p>\r\n                    {!incommingFriendRequest ? null : (\r\n                        <Badge\r\n                            style={{ fontSize: \"18px\", margin: \"2%\" }}\r\n                            pill\r\n                            variant=\"warning\">\r\n                            {incommingFriendRequest.askerName}\r\n                        </Badge>\r\n                    )}\r\n                    به شما پیشنهاد دوستی داده است.\r\n                </p>\r\n                <p>اگر تمایل به دوستی ندارید میتواند درخواست را رد کنید.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"w-100 text-right\">\r\n                <Row className=\"w-100\">\r\n                    <Col>\r\n                        <Button\r\n                            variant=\"success\"\r\n                            block\r\n                            onClick={() => respondToFriendshipRequest(true)}>\r\n                            پذیرفتن\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            block\r\n                            variant=\"danger\"\r\n                            onClick={() => respondToFriendshipRequest(false)}>\r\n                            رد\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default GlobalSocketManager;\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport SignInSideBar from \"./../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    SetDeviceType,\r\n    SignOut,\r\n    UpdateMyRecords,\r\n} from \"../dashboard/actions\";\r\nimport { Fragment, useState, useEffect } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport gameServices from \"../services/http/gameServices\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport ProfilePanel from \"../profile/ProfilePanel\";\r\nimport GlobalSocketManager from \"../services/ws/GlobalSocketManager\";\r\nimport { Routes, Device } from \"../services/configs\";\r\n\r\nconst MainLayout = (props) => {\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const tools = useSelector((state) => state.tools); //redux useful tools: like trigger update\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const scoreboard = useSelector((state) => state.scoreboard);\r\n    const dispatch = useDispatch();\r\n\r\n    const deviceIsDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const deviceIsSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const deviceIsTablet = !deviceIsDesktop && !deviceIsSmartPhone;\r\n    const [leftSideBar, setLeftSideBar] = useState(null);\r\n    const [rightSideBar, setRightSideBar] = useState(null);\r\n    //load player data after sign in\r\n    const userID = userServices.readUserID();\r\n    // signIn or signOut event\r\n    useEffect(() => {\r\n        console.log(\"userID changed\");\r\n        if (userID) {\r\n            console.log(\"auth called\");\r\n            gameServices\r\n                .loadPlayerData(userID)\r\n                .then((result) => {\r\n                    dispatch(LoadMe(result ? result : null));\r\n                })\r\n                .catch((err) => {\r\n                    dispatch(LoadMe(null));\r\n                });\r\n        } else {\r\n            //how to sign out after token expires?\r\n            dispatch(SignOut());\r\n        }\r\n    }, [userID, dispatch]);\r\n\r\n    //device type set || browser width change event.\r\n    useEffect(() => {\r\n        console.log(\"device changed\");\r\n        if (deviceIsDesktop) dispatch(SetDeviceType(Device.Desktop));\r\n        else if (deviceIsTablet) dispatch(SetDeviceType(Device.Tablet));\r\n        else if (deviceIsSmartPhone) dispatch(SetDeviceType(Device.SmartPhone));\r\n\r\n        setLeftSideBar(<NoticeSideBar />);\r\n    }, [deviceIsDesktop, deviceIsTablet, deviceIsSmartPhone, dispatch]);\r\n\r\n    /*this method is for temporary use and for finding items that cause horizontal overflow causing horizontal scrollbar\r\n    const findHorizontalOverflow = () => {\r\n        let docWidth = document.documentElement.offsetWidth;\r\n        [].forEach.call(document.querySelectorAll(\"*\"), function (el) {\r\n            if (el.offsetWidth > docWidth) {\r\n                console.log(\"here is the sabotage: \", el);\r\n            }\r\n        });\r\n    };*/\r\n\r\n    useEffect(() => {\r\n        console.log(\"update triggered\");\r\n        dispatch(UpdateMyRecords());\r\n    }, [tools.updateTriggered, dispatch]);\r\n\r\n    //teste\r\n    //determine sidebars\r\n    useEffect(() => {\r\n        const setPrimaryRightSideBar = () => {\r\n            if (!deviceIsTablet)\r\n                setRightSideBar(\r\n                    player ? (\r\n                        <PlayerInfoSideBar inGame={scoreboard.me} />\r\n                    ) : (\r\n                        <SignInSideBar />\r\n                    )\r\n                );\r\n            else setRightSideBar(null);\r\n        };\r\n        if (pathname === Routes.Client.SignUp) {\r\n            setRightSideBar(null);\r\n            setLeftSideBar(null);\r\n        } else if (pathname === Routes.Client.GameDeck) {\r\n            // EDIT THIS..\r\n            // ON REFRESH -> rightSideBar is null!\r\n            // SOMETIMES: ERROR: cannout read .fullname of undefined person\r\n            if (opponent) {\r\n                if (!deviceIsSmartPhone) {\r\n                    setLeftSideBar(\r\n                        <PlayerInfoSideBar\r\n                            person={opponent}\r\n                            inGame={scoreboard.opp}\r\n                        />\r\n                    );\r\n                    setPrimaryRightSideBar();\r\n                } else {\r\n                    setLeftSideBar(null);\r\n                    setRightSideBar(null);\r\n                }\r\n            }\r\n        } else if (pathname.includes(Routes.Client.Profile)) {\r\n            setLeftSideBar(null);\r\n            setRightSideBar(<ProfilePanel />); //!deviceIsSmartPhone ? <ProfilePanel /> : null)\r\n        } else {\r\n            setLeftSideBar(<NoticeSideBar />); //EDIT THIS\r\n            setPrimaryRightSideBar();\r\n        }\r\n    }, [player, opponent, pathname, deviceIsSmartPhone, scoreboard, deviceIsTablet]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {player && <GlobalSocketManager />}\r\n            <ToastContainer />\r\n            <NavigationBar />\r\n            {!deviceIsSmartPhone ? (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {rightSideBar && <Col xs={3}>{rightSideBar}</Col>}\r\n                    <Col\r\n                        className=\"mx-auto\"\r\n                        xs={pathname !== Routes.Client.SignUp ? null : 7}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {leftSideBar && (\r\n                        <Col xs={!deviceIsTablet ? 3 : 4}>{leftSideBar}</Col>\r\n                    )}\r\n                </Row>\r\n            ) : (\r\n                <Container>\r\n                    {/* what to do for control panelk sidebar in smartphone */}\r\n                    {player ? (\r\n                        <Row className=\"w-100 mx-auto\">{rightSideBar}</Row>\r\n                    ) : null}\r\n                    <Row className=\"w-100 mx-auto\">{leftSideBar}</Row>\r\n                    <Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n                </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"5px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n            <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                <thead className=\"bg-info\">\r\n                    <tr>\r\n                        <th scope=\"col\">#</th>\r\n                        <th scope=\"col\">نام بازیکن</th>\r\n                        <th scope=\"col\">امتیاز</th>\r\n                        <th scope=\"col\">تعداد برد</th>\r\n                        <th scope=\"col\">تعداد باخت</th>\r\n                        <th scope=\"col\">تعداد تساوی</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {players.map((player) => (\r\n                        <SinglePlayerCard\r\n                            key={player.userID}\r\n                            rowNumber={\r\n                                players.findIndex(\r\n                                    (p) => p.userID === player.userID\r\n                                ) + 1\r\n                            }\r\n                            name={player.fullname}\r\n                            points={player.records.points}\r\n                            wins={player.records.wins}\r\n                            loses={player.records.loses}\r\n                            draws={player.records.draws}></SinglePlayerCard>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport LoadingBar from \"../../common/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <Row className=\"mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <AllPlayers players={players} />\r\n                </Row>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import {Routes} from '../configs';\r\n\r\nexport const createSocketRequest = (request, rname, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        rname,\r\n        playerID,\r\n        msg,\r\n    });\r\n\r\nexport const connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(`${Routes.Server.WebSocketRoot}/${Routes.Server.wsGamePlayRoute}`);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            \r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    UpdateMyRecords,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n    ResetRoom,\r\n    TriggerRecordUpdate,\r\n    // UpdateStatistics,\r\n    // TriggerOpponentSearch,\r\n    // SendFriendRequestTo,\r\n    // SendMessageTo,\r\n    // RecieveMessageFrom,\r\n    // ResetMessages,\r\n    // SetDeviceType,\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n        tools: state.tools,\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        UpdateMyRecords: () => dispatch(UpdateMyRecords()),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        ResetRoom: () => dispatch(ResetRoom()),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n        TriggerRecordUpdate: () => dispatch(TriggerRecordUpdate()),\r\n        //for memory managment these are commented because they arent used in Class Components yet\r\n        //UpdateStatistics: (stat) => dispatch(UpdateStatistics(stat)),\r\n        //TriggerOpponentSearch: () => dispatch(TriggerOpponentSearch()),\r\n        //SendFriendRequestTo: () => dispatch(SendFriendRequestTo()),\r\n        //SendMessageTo: (name, friendID, text) => dispatch(SendMessageTo(name, friendID, text)),\r\n        //RecieveMessageFrom: (name, friendID, text) => dispatch(RecieveMessageFrom(name, friendID, text)),\r\n        //ResetMessages: () => dispatch(ResetMessages())\r\n        //SetDeviceType: () => dispatch(SetDeviceType()),\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Card, Col, Row } from \"react-bootstrap\";\r\n\r\nconst BriefScoreboard = ({ timeRemaining, players }) => {\r\n    return (\r\n        <Card.Header className=\"w-100 text-center\">\r\n            <Row style={{ fontSize: \"20px\" }}>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"right\",\r\n                        color: players[1].color,\r\n                    }}>\r\n                    {players[1].shape} : {players[1].score}\r\n                </Col>\r\n                <Col>\r\n                    <Card.Text\r\n                        className={\r\n                            timeRemaining >= 10 ? \"text-success\" : \"text-danger\"\r\n                        }>\r\n                        {timeRemaining > 0 && <i\r\n                            className=\"fa fa-clock-o px-2\"\r\n                            aria-hidden=\"true\"></i>}\r\n                        {timeRemaining > 0 ? timeRemaining : \"نوبت حریف\"}\r\n                    </Card.Text>\r\n                </Col>\r\n                <Col\r\n                    style={{\r\n                        textAlign: \"left\",\r\n                        color: players[0].color,\r\n                    }}>\r\n                    {players[0].score} : {players[0].shape}\r\n                </Col>\r\n            </Row>\r\n        </Card.Header>\r\n    );\r\n};\r\n\r\nexport default BriefScoreboard;\r\n","import { Fragment } from \"react\";\r\nimport { Button, Card, Row } from \"react-bootstrap\";\r\nimport { GameSetting } from \"../../services/configs\";\r\nimport BriefScoreboard from \"./BriefScoreboard\";\r\nimport \"../games.css\";\r\n\r\nconst TableDesign = ({ timeRemaining, dimension, players, table, onEachCellClick }) => {\r\n    let dimens = [];\r\n    for (let i = 0; i < dimension; i++) dimens.push(i);\r\n\r\n    //prop drilling in BriefScoreBoard\r\n    return (\r\n        <Card\r\n            bg=\"transparent\"\r\n            border=\"dark\"\r\n            className=\"w-100 mx-auto\">\r\n            <BriefScoreboard timeRemaining={timeRemaining} players={players} />\r\n            <Card.Body className=\"game-border-card\">\r\n                {table ? (\r\n                    dimens.map((floor) => (\r\n                        <Fragment>\r\n                            {dimens.map((row) => (\r\n                                <Row\r\n                                    style={{\r\n                                        direction: \"ltr\",\r\n                                        marginLeft: `${GameSetting.T3D.TableRowMargings[row]}px`,\r\n                                    }}>\r\n                                    {dimens.map((column) => (\r\n                                        <Button\r\n                                            key={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            variant=\"btn btn-outline-dark\"\r\n                                            className=\"game-table-cells\"\r\n                                            style={\r\n                                                table[floor][row][column] !==\r\n                                                null\r\n                                                    ? {\r\n                                                          color: players[\r\n                                                              table[floor][row][\r\n                                                                  column\r\n                                                              ]\r\n                                                          ].color,\r\n                                                      }\r\n                                                    : null\r\n                                            }\r\n                                            id={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            onClick={(event) =>\r\n                                                onEachCellClick(event)\r\n                                            }>\r\n                                            {table[floor][row][column] !==\r\n                                                null &&\r\n                                                players[\r\n                                                    table[floor][row][column]\r\n                                                ].shape}\r\n                                        </Button>\r\n                                    ))}\r\n                                </Row>\r\n                            ))}\r\n                            <br />\r\n                        </Fragment>\r\n                    ))\r\n                ) : (\r\n                    <p> در حال اتصال... </p>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TableDesign;\r\n","import { Component } from \"react\";\r\nimport \"../games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport {\r\n    connect,\r\n    createSocketRequest,\r\n} from \"../../services/ws/gamePlaySocketServices\";\r\nimport withReduxDashboard from \"../../dashboard/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\nimport TableDesign from \"./TableDesign\";\r\nimport { GameSetting } from \"../../services/configs\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n                color: \"blue\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketGamePlay: undefined,\r\n        playerOnline: true,\r\n        timeRemaining: 0, //create a config\r\n        timerID: null,\r\n        connectionCheckTimerID: null,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                    toast.warn(\"حرف شما وارد بازی شد\");\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n\r\n    enableTimerForMyMove = (timeout = GameSetting.T3D.TurnTimeOut) => {\r\n        this.setState({ timeRemaining: timeout });\r\n        //is it needed to declare timerID as state?\r\n        const timerID = setInterval(() => {\r\n            const { timeRemaining, timerID } = this.state;\r\n            if (timeRemaining <= 0) {\r\n                clearInterval(timerID);\r\n                return;\r\n            }\r\n            this.setState({ timeRemaining: this.state.timeRemaining - 1 });\r\n        }, 1000);\r\n        this.setState({ timerID });\r\n    };\r\n\r\n    updatePlayerStates = ({ turn, xScore, oScore }) => {\r\n        const players = [...this.state.players];\r\n        players[0].score = xScore;\r\n        players[1].score = oScore;\r\n        this.setState({\r\n            players,\r\n            turn,\r\n        });\r\n    };\r\n\r\n    disableAllTimers = () => {\r\n        const { connectionCheckTimerID, timerID } = this.state;\r\n        clearTimeout(connectionCheckTimerID);\r\n        clearTimeout(timerID); //move time out timer\r\n    };\r\n\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") this.setState({ myTurn: Number(msg) });\r\n        else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const { IDs, gameType } = msg;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.setState({ dimension: gameType });\r\n\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const { players } = this.state;\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"TIMER\") {\r\n            //you can calculate request respone time -> then minimize it from tiem sent by server -> to gain acurate time\r\n            //but its real neccessary, Math.floor on the server side does this nearly\r\n            //but for accurate approach remember: remove Math.floor from server side\r\n            console.log(\"time updated: \", msg);\r\n            this.setState({ timeRemaining: msg });\r\n            clearTimeout(this.state.timerID); //clear move time out timers, though their disabled before, this is for assurance\r\n            this.enableTimerForMyMove(msg);\r\n        } else if (command === \"SCORES\") this.updatePlayerStates(msg);\r\n        else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            const { dimension } = this.state;\r\n            const cellID = Number(msg.nextMove);\r\n            //*************** */\r\n            //is this needed to check the move in client? considering that complete check has been made in client\r\n            //and consder that: checking move in client may cause some bugs\r\n            //for ex: new move is sent -> and 'cause of some error the cell is not empty\r\n            //turn is not updated and this player can not make new moves to recieve server's table!!!\r\n            this.verifyAndApplyTheMove(\r\n                this.getCellCoordinates(cellID, dimension),\r\n                this.cellButtons[cellID]\r\n            );\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            this.updatePlayerStates(msg);\r\n\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n\r\n            // now inform the server that the move is recieved\r\n            //force connect it?\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\r\n                    \"move_recieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            // server time out is set and now setInterval for this client to show how much time left\r\n            this.enableTimerForMyMove();\r\n        } else if (command === \"MOVE_MISSED\") {\r\n            const { myTurn } = this.state;\r\n            const { player, room } = this.props;\r\n            //msg --> forced set turn\r\n            this.setState({ turn: msg });\r\n            if (msg === myTurn) {\r\n                //send a move_recieved request to inform the server to set the new timeout\r\n                //force connect it?\r\n                this.state.socketGamePlay.send(\r\n                    createSocketRequest(\r\n                        \"move_recieved\",\r\n                        room.name,\r\n                        player.userID,\r\n                        true\r\n                    )\r\n                );\r\n                this.enableTimerForMyMove();\r\n            }\r\n        } else if (command === \"END\") {\r\n            this.updatePlayerStates(msg);\r\n            this.endThisGame();\r\n            this.disableAllTimers();\r\n        } else if (command === \"CLOSE\") {\r\n            toast.warn(\r\n                \"بدلیل حاضر نبودن هیچ کدام از بازیکینان، بازی شما کنسل شد\",\r\n                { position: \"top-right\", closeOnClick: true }\r\n            );\r\n            this.closeThisGame();\r\n        } else {\r\n            console.log(\"wrong socket request\");\r\n        }\r\n    };\r\n\r\n    forceConnectWS = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await connect(room.name, player.userID, room.type);\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketGamePlay: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n            // **********************\r\n            //time out must be set with rising time out time to prevent server getting fucked up\r\n            setTimeout(\r\n                () => {\r\n                    console.log(\"rconnecting from GamePlay\");\r\n                    this.forceConnectWS(nextJob);\r\n                },\r\n                nextJob ? 1000 : 3000\r\n            );\r\n            //if there is a next job --> then player is sending a move or something important and\r\n            //time out needs to be called quicker 'cause players have timeout in server for sending moves\r\n        }\r\n    };\r\n\r\n    enableConnectionCheckTimer = () => {\r\n        return setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (!this.state.playerOnline) {\r\n                    //player JUST became online\r\n                    console.log(\"connected\");\r\n                    this.setState({ playerOnline: true }); // toggle online status\r\n                    this.forceConnectWS(null); // reconnect to gamePlayWebSocket\r\n                }\r\n            } else if (this.state.playerOnline) {\r\n                //player JUST became offline\r\n                console.log(\"dissconnected\");\r\n                this.setState({ playerOnline: false });\r\n            }\r\n        }, 2500); //2.5 sec is it ok?\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"game-table-cells\"); // pay attension to searched className! may cause an error\r\n\r\n        const { player, room } = this.props;\r\n        const { myTurn } = this.state;\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectWS(() => {\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\"load\", room.name, player.userID, null)\r\n            );\r\n            this.state.socketGamePlay.send(\r\n                createSocketRequest(\"mytimer\", room.name, player.userID, myTurn)\r\n            );\r\n        });\r\n\r\n        console.log(\"TOO MANY UNNEEDED PROPS SENT: \", this.props);\r\n        this.setState({\r\n            connectionCheckTimerID: this.enableConnectionCheckTimer(),\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.disableAllTimers();\r\n    }\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension, turn, timerID } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                //this is just for when the connection is not automatically came back, so the user via clicking cells can initiate connection\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    //is this needed really?\r\n                    this.forceConnectWS(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n\r\n                    this.setState({ turn: (turn + 1) % 2 });\r\n                    this.forceConnectWS(() => {\r\n                        this.state.socketGamePlay.send(\r\n                            createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        //load is not needed cause i updated server to send back new scores immediately\r\n                        /*this.state.socketGamePlay.send(\r\n                            createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );*/\r\n                    });\r\n                    clearInterval(timerID);\r\n                    this.setState({ timeRemaining: 0 });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.value = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({ table: tempTable });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"game-table-cells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"game-table-cells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    closeThisGame = () => {\r\n        this.state.socketGamePlay.close();\r\n        this.setState({ socketGamePlay: null });\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.ResetRoom();\r\n            this.props.TriggerRecordUpdate();\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n\r\n    endThisGame = () => {\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        //NOTE: u can deliver this message to socket global to make sure toast shows all the tie but its no need really :|\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else toast.error(\"تکبیر!\");\r\n        //reset everything:\r\n        this.closeThisGame();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <TableDesign\r\n                dimension={this.state.dimension}\r\n                players={this.state.players}\r\n                table={this.state.table}\r\n                timeRemaining={this.state.timeRemaining}\r\n                onEachCellClick={this.onEachCellClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectWS(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectWS(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom, TriggerOpponentSearch } from \"../dashboard/actions\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport LoadingBar from '../common/LoadingBar';\r\n\r\nconst RoomManager = ({ friendlyGame }) => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n        if (friendlyGame) dispatch(SetRoom({ name: roomName, type: gameType }));\r\n        // random game:\r\n        else {\r\n            dispatch(SetRoom({ name: null, type: gameType }));\r\n            dispatch(TriggerOpponentSearch());\r\n            setSearching(true);\r\n        }\r\n    };\r\n\r\n    //on destroy\r\n    useEffect(() => {\r\n        return () => {\r\n            setSearching(false); //make sure preloader turns off\r\n         }\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <LoadingBar loading={searching} />\r\n            <hr />\r\n            <Form onSubmit={(event) => onStartGameClick(event)}>\r\n                <Form.Group className=\"form-inline\">\r\n                    <Form.Label className=\"w-25\">ابعاد جدول</Form.Label>\r\n                    <InputGroup\r\n                        style={{\r\n                            border: \"1px solid orange\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"2px\",\r\n                        }}>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"3\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)}\r\n                            />\r\n                            <InputGroup.Text>3 * 3 * 3</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"4\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)}\r\n                            />\r\n                            <InputGroup.Text>4 * 4 * 4</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"5\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)}\r\n                            />\r\n                            <InputGroup.Text>5 * 5 * 5</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <hr />\r\n                {friendlyGame && (\r\n                    \r\n                    <Form.Group className=\"mt-3 form-inline\">\r\n                        \r\n                        <Form.Label className=\"w-25\">نام روم</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"w-75 text-left bg-transparent\"\r\n                            placeholder=\"Room Name\"\r\n                            value={roomName}\r\n                            required=\"required\"\r\n                            onChange={(event) =>\r\n                                setRoomName(event.target.value)\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                )}\r\n                <hr />\r\n                <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                    <i\r\n                        className={`fa ${\r\n                            friendlyGame ? \"fa-handshake-o\" : \"fa-search\"\r\n                        } px-2`}\r\n                        aria-hidden=\"true\"></i>\r\n                    {friendlyGame ? \"ارسال درخواست\" : \"جستجو\"}\r\n                </Button>\r\n            </Form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import { Alert, Badge, Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst CompetitionSummary = ({ title, summary }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" variant=\"info\">\r\n                    <Alert.Heading className=\"text-center\">\r\n                        <Badge variant=\"success p-2\" >\r\n                            {title}\r\n                        </Badge>\r\n                    </Alert.Heading>\r\n\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill=\"true\" variant=\"info\">\r\n                    <p>تعداد شرکت کنندگان : 00000000</p>\r\n                    <p>نکات دیگر</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col>\r\n                    <Button block variant=\"outline-success\">شرکت در مسابقه</Button>\r\n                </Col>\r\n                <Col>\r\n                <Button block variant=\"outline-secondary\">بازیکنان حاضر</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionSummary;\r\n","import { Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport \"./competitions.css\";\r\nimport CompetitionSummary from \"./CompetitionSummary\";\r\n\r\nconst CompetitionsMain = () => {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <hr />\r\n\r\n            <Row>\r\n                <Col className=\"competition-menu-body\" sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"first\">\r\n                                جام حذفی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"second\">\r\n                                لیگ امتیازی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"third\">\r\n                                بازی شرطی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"forth\">\r\n                                جدول رندوم\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"fifth\">\r\n                                و غیره\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Col>\r\n                {/* <div style={{borderLeft: '1px solid gray', height:'500px'}}></div> */}\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <CompetitionSummary\r\n                                title=\"جام حذفی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <CompetitionSummary\r\n                                title=\"لیگ امتیازی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <CompetitionSummary\r\n                                title=\"بازی شرطی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"forth\">\r\n                            <CompetitionSummary\r\n                                title=\"جدول رندوم\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"fifth\">\r\n                            <CompetitionSummary\r\n                                title=\"و غیره\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionsMain;\r\n","import GamePlay from \"./gameplay/GamePlay\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SingleGame from \"./SingleGame\";\r\nimport { Tab, Tabs, Card, Fade } from \"react-bootstrap\";\r\nimport { Fragment } from \"react\";\r\nimport CompetitionsMain from \"./competitions/CompetitionsMain\";\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector((state) => state.room);\r\n\r\n    return (\r\n        <Fragment>\r\n            {room.name ? (\r\n                <GamePlay />\r\n            ) : (\r\n                <Card\r\n                    border=\"secondary\"\r\n                    bg=\"transparent\"\r\n                    className=\"game-deck-card\">\r\n                    <Card.Body>\r\n                        <Tabs\r\n                            defaultActiveKey=\"randomGame\"\r\n                            transition={false}\r\n                            id=\"noanim-tab-example\"\r\n                            variant=\"pills\"\r\n                            // transition={Fade}\r\n                            className=\"mb-3\">\r\n                            \r\n                            <Tab eventKey=\"randomGame\" title=\"بازی تصادفی\">\r\n                                <SingleGame friendlyGame={false} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"competitions\" title=\"مسابقات\">\r\n                                <CompetitionsMain />\r\n                            </Tab>\r\n                            <Tab eventKey=\"friendlyGame\" title=\"بازی با دوستان\">\r\n                                <SingleGame friendlyGame={true} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Card.Body>\r\n                </Card>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport \"./profile.css\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nconst NoticeManager = () => {\r\n    //u can create another component for listing notices ?\r\n    const player = useSelector((state) => state.player);\r\n    const [isAllowed, setAllowed] = useState(undefined);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [notices, setNotices] = useState([]);\r\n    const [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n    const [updateTrigger, setUpdateTrigger] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const resetStates = () => {\r\n        setTitle(\"\");\r\n        setText(\"\");\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n        setSelectedNoticeID(null);\r\n        setUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n    };\r\n\r\n    useEffect(() => {\r\n        //use another simpler preloader\r\n        //load all notices in left side for selecting: load all and push them in notices state\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } =\r\n                    await noticeServices.getAdvancedNotics();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    else\r\n                        setNotices([\r\n                            { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                        ]);\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [updateTrigger]);\r\n\r\n    //***** in server implemented a middleware for this, is this needed? */\r\n    if (player && isAllowed === undefined) {\r\n        //in admin tools pages: admin status is checked directly dor completely making sure that user is admin and he/her is trusted directly from server\r\n        (async () => {\r\n            try {\r\n                const { data, status } = await userServices.isAdministrator(\r\n                    player.userID\r\n                );\r\n                if (status === Configs.Status.Successful) return data.answer;\r\n                return false;\r\n            } catch (err) {\r\n                //CHECK THIS PART\r\n                return false;\r\n            }\r\n        })()\r\n            .then((answer) => {\r\n                setAllowed(answer);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"مشکلی در تعیین سطح دسترسی شما بوجود آمد. لطفا مجددا تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n            });\r\n    }\r\n\r\n    // show proper message for simple users\r\n    if (!player || isAllowed === false) {\r\n        //in first render a wronge message will be shown! find a fix\r\n        //2nd condition must be exactly the same\r\n        toast.warn(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\", {\r\n            position: \"top-left\",\r\n            closeOnClick: true,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    //runs when create notice button clicks\r\n    const createNewNotice = async () => {\r\n        //add patern and stuff to states and inputs\r\n        try {\r\n            setLoading(true);\r\n            const { status } = await noticeServices.createNotice({\r\n                title,\r\n                text,\r\n                startDate: new Date(startDate),\r\n                endDate: new Date(endDate),\r\n            });\r\n            //*********** */\r\n            //COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n            if (status === Configs.Status.CreatedSuccessfully) {\r\n                toast.success(`اطلاعیه ی ${title} با موفقیت ساخته شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selecteNotice = (notice) => {\r\n        // console.log(notice);\r\n        setSelectedNoticeID(notice._id);\r\n        setTitle(notice.title);\r\n        setText(notice.text);\r\n        setStartDate(new Date(notice.startDate));\r\n        setEndDate(new Date(notice.endDate));\r\n    };\r\n\r\n    const cancelEditing = () => {\r\n        resetStates();\r\n    };\r\n\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        if (!selectedNoticeID) return;\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await noticeServices.editNotice(\r\n                selectedNoticeID,\r\n                { title, text, startDate, endDate }\r\n            );\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n    // if admin status is checked directly by server then start rendering the page\r\n    //consists two part\" right part => used for creating and editing notices\r\n    //left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n    //edit all heights in control panel\r\n    //add patern and stuff to states and inputs\r\n    return (\r\n        <Fragment>\r\n            {player && isAllowed && (\r\n                <Row style={{ height: \"100%\" }}>\r\n                    <LoadingBar loading={loading} />\r\n                    <Col xs={5}>\r\n                        <Card\r\n                            border=\"success\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto notice-manager-card\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه جدید\r\n                            </Card.Header>\r\n                            <Card.Body className=\"text-right\">\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    عنوان اطلاعیه\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    pattern=\".{3,30}\"\r\n                                    onInput={(e) =>\r\n                                        e.target.setCustomValidity(\"\")\r\n                                    }\r\n                                    onInvalid={(e) =>\r\n                                        e.target.setCustomValidity(\r\n                                            \"عنوان اطلاعیه باید حداقل 3 و حداکثر 30 کاراکتر داشته باشد\"\r\n                                        )\r\n                                    }\r\n                                    className=\"my-1 mx-auto\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"عنوان\"\r\n                                    required=\"required\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    توضیحات\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    pattern=\".{5,200}\"\r\n                                    onInput={(e) =>\r\n                                        e.target.setCustomValidity(\"\")\r\n                                    }\r\n                                    onInvalid={(e) =>\r\n                                        e.target.setCustomValidity(\r\n                                            \"متن اطلاعیه باید حداقل 5 و حداکثر 200 کاراکتر داشته باشد\"\r\n                                        )\r\n                                    }\r\n                                    className=\"my-1 mx-auto h-25\"\r\n                                    placeholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n                                    value={text}\r\n                                    required=\"required\"\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ شروع نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto w-100\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={startDate}\r\n                                    onChange={setStartDate}\r\n                                    required=\"required\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ پایان نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={endDate}\r\n                                    onChange={setEndDate}\r\n                                    required=\"required\"\r\n                                />\r\n                                <hr />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                                {!selectedNoticeID ? (\r\n                                    <Button\r\n                                        block\r\n                                        variant=\"success\"\r\n                                        onClick={createNewNotice}>\r\n                                        <i\r\n                                            className=\"fa fa-floppy-o px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ایجاد اطلاعیه\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-primary\"\r\n                                                onClick={saveChanges}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                ذخیره تغییرات\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-warning text-secondary\"\r\n                                                onClick={cancelEditing}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                لغو ویرایش\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs={7}>\r\n                        <Card\r\n                            border=\"info\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto notice-manager-card\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه های قبلی\r\n                            </Card.Header>\r\n                            <Card.Body\r\n                                style={{ overflowY: \"scroll\" }}\r\n                                className=\"text-right\">\r\n                                {notices.map((notice) => {\r\n                                    return (\r\n                                        <Fragment>\r\n                                            <Alert variant=\"secondary\">\r\n                                                <i\r\n                                                    className=\"fa fa-info-circle px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"red\",\r\n                                                        fontSize: \"18px\",\r\n                                                    }}>\r\n                                                    {notice.title}\r\n                                                </span>\r\n                                                : {notice.text}\r\n                                                <i\r\n                                                    className=\"icon-edit-notice fa fa-pencil-square-o px-3\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    onClick={() =>\r\n                                                        selecteNotice(notice)\r\n                                                    }></i>\r\n                                            </Alert>\r\n                                            <hr />\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport \"./profile.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerRecordUpdate } from \"../dashboard/actions\";\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    //on component mount download user credentials\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } = await userServices.getMyCredentials();\r\n                if (status === Configs.Status.Successful) {\r\n                    const { me } = data;\r\n                    setFullname(me.fullname);\r\n                    setStudentID(me.studentID);\r\n                    setEmail(me.email);\r\n                }\r\n            } catch (err) {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`تغییرات با موفقیت اعمال شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const changeMyPassword = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.changeMyPassword({\r\n                studentID,\r\n                password,\r\n                newPassword,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`رمز شما با موفقیت تغییر داده شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch (pageMode) {\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                changeMyPassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const checkConfirmPassword = (event) => {\r\n        setConfirmNewPassword(event.target.value);\r\n        if (newPassword !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور جدید باید با خود رمز عبور جدید مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n\r\n    // *************************** DESIGN NOTE *******/\r\n    // HOW ABOUT USING TABS ? <Tabs>\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"big-single-card\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-100 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.READ_ONLY && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.EDIT && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.CHANGE_PASS && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={(e) => selectMode(e)}>\r\n                    <Card.Body className=\"w-75 text-center mx-auto\">\r\n                        <LoadingBar loading={loading} />\r\n\r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <Fragment>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </Fragment>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"account-info-textbox w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={newPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setNewPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        تایید رمز عبور جدید\r\n                                    </Form.Label>\r\n\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        className=\"account-info-textbox w-75\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        value={confirmNewPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(event) =>\r\n                                            checkConfirmPassword(event)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={!pageMode}\r\n                            block\r\n                            variant=\"success\"\r\n                            className=\"w-50 mx-auto\">\r\n                            <i\r\n                                className=\"fa fa-wrench px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت تغییرات\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Badge,\r\n    Image,\r\n    ListGroup,\r\n    Button,\r\n} from \"react-bootstrap\";\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst FriendRecords = (props) => {\r\n    const me = useSelector(state => state.player);\r\n\r\n    const friend = props.friend ? props.friend : me;\r\n    return (\r\n        <Card border=\"success\" bg=\"transparent\" className=\"friend-records\">\r\n            <Image\r\n                className=\"card-img-top my-friend-avatar\"\r\n                src={noAvatar}\r\n                alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n            />\r\n            <hr />\r\n            <Card.Body>\r\n                <ListGroup className=\" list-group list-group-flush\">\r\n                    <ListGroup.Item className=\"bg-transparent\">\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>امتیاز بازیکن</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"friend-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {friend.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item className=\"bg-transparent\">\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>تعداد بردها</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"friend-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {friend.records.wins}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item className=\"bg-transparent\">\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">تعداد تساوی ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"friend-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {friend.records.draws}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item className=\"bg-transparent\">\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">تعداد باخت ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"friend-badge-font-size\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {friend.records.loses}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card.Body>\r\n            {friend !== me && <Card.Footer>\r\n                <Button\r\n                    variant=\"outline-danger\"\r\n                    block\r\n                    onClick={null}>\r\n                    <i\r\n                        className=\"fa fa-handshake-o px-2\"\r\n                        aria-hidden=\"true\"></i>\r\n                    لغو دوستی\r\n                </Button>\r\n            </Card.Footer>}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FriendRecords;\r\n","import { useState, useEffect } from \"react\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport gameServices from \"../services/http/gameServices\";\r\nimport { Card, Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport AllScores from \"../tables/scores/AllScores\";\r\nimport './profile.css';\r\nimport FriendRecords from \"./FriendRecords\";\r\n\r\nconst MyGamesAndFriends = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [myFriends, setMyFriends] = useState([]);\r\n    const [myGames, setMyGames] = useState([]);\r\n    const [filterID, setFilterID] = useState(\"me\");\r\n    const [selectedFriendIndex, setSelectedFriendIndex] = useState(-1);\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true); // use preloader here?\r\n                let serverResponse = await gameServices.getMyGames();\r\n                if (serverResponse.status === Configs.Status.Successful)\r\n                    setMyGames(serverResponse.data.myGames.reverse());\r\n                serverResponse = await userServices.getMyFriends();\r\n                if (serverResponse.status === Configs.Status.Successful)\r\n                    setMyFriends(serverResponse.data.friends);\r\n            } catch (err) {\r\n                console.log(err);\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        setSelectedFriendIndex(filterID !== \"me\" ? myFriends.findIndex(friend => friend.userID === filterID) : -1);\r\n        // if filterID === \"me\" || frined id wia .findIndex not found ---> returns -1\r\n    }, [filterID, myFriends])\r\n    return (\r\n        <Card\r\n            border=\"secondary\"\r\n            bg=\"transparent\"\r\n            className=\"big-single-card\">\r\n            <Card.Header className=\"text-center\">\r\n                لیست دوستان و آمار بازی ها\r\n            </Card.Header>\r\n            <LoadingBar loading={loading} />\r\n            <Card.Body >\r\n                <LoadingBar loading={loading} />\r\n                <Tab.Container\r\n                    defaultActiveKey={filterID}\r\n                    onSelect={(key) => setFilterID(key)}>\r\n                    <Row>\r\n                        <Col className=\"friend-list-name-length\" xs={2}>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column text-right\">\r\n                                <Nav.Item>\r\n                                    <Nav.Link eventKey=\"me\">\r\n                                        همه بازی ها\r\n                                    </Nav.Link>\r\n                                </Nav.Item>\r\n                                {myFriends.map((friend) => (\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey={friend.userID}>\r\n                                            {friend.fullname}\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        <Col>\r\n                            <Tab.Content >\r\n                                <Tab.Pane eventKey=\"me\">\r\n                                    <AllScores scores={myGames} />\r\n                                </Tab.Pane>\r\n                                {myFriends.map((friend) => (\r\n                                    <Tab.Pane eventKey={friend.userID}>\r\n                                        <AllScores\r\n                                            scores={myGames.filter(\r\n                                                (game) =>\r\n                                                    friend.userID ===\r\n                                                        game.players[0].id ||\r\n                                                    friend.userID ===\r\n                                                        game.players[1].id\r\n                                            )}\r\n                                        />\r\n                                    </Tab.Pane>\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        {<Col xs={4}>\r\n                            <FriendRecords friend={selectedFriendIndex !== -1 ? myFriends[selectedFriendIndex] : null} />\r\n                        </Col>}\r\n                    </Row>\r\n                </Tab.Container>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default MyGamesAndFriends;\r\n","import { Routes } from '../configs';\r\n\r\nimport http from \"./httpService\";\r\n\r\nconst {Server} = Routes;\r\n\r\nconst chatServices = {\r\n    \r\n    getOurChat: (friendID) => {\r\n        return http.get(`${Server.Root}/${Server.Chats}/${friendID}`);\r\n    }\r\n};\r\n\r\nexport default chatServices;","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Alert, Col, Row } from \"react-bootstrap\";\r\nimport DateObject from \"react-date-object\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport \"./chat.css\";\r\n\r\nconst Message = ({ msg, previousDay, inDesktop }) => {\r\n    const { date } = msg; // destructure date from msg then make a new date object\r\n    // reason for making new Date objects is that react throws error some time when you use it without new Date :|\r\n    const [showDate, setShowDate] = useState(false); //for each day, the first message in that day has persian date above it\r\n    const [time, setTime] = useState(null);\r\n    const [persianDate, setPersianDate] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const persianDateObject = new DateObject({\r\n            date: new Date(date),\r\n            calendar: persian,\r\n            locale: persian_fa,\r\n        });\r\n        setPersianDate(persianDateObject.format(\"dddd DD MMMM YYYY\"));\r\n        setTime(persianDateObject.format(\"hh:mm\"));\r\n        setShowDate(\r\n            new Date(date).getDate() !== previousDay || previousDay === 0\r\n        ); //     0 means this is the first message in the chat\r\n    }, [date, previousDay]);\r\n\r\n    //note: Device.Desktop is 0 -> so it inDesktop is used conditionally but it actually contains device type and not a boolean\r\n    return (\r\n        <Fragment>\r\n            {!showDate ? null : (\r\n                <Fragment>\r\n                    <hr />\r\n                    <p className=\"message-date\">{persianDate}</p>\r\n                </Fragment>\r\n            )}\r\n            <Row>\r\n                <Col>\r\n                    {msg.me && (\r\n                        <Alert className=\"text-right\" variant=\"dark\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col>{msg.me}</Col>\r\n                                    <Col className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.me}</Row>\r\n                                    <Row className=\"my-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n                <Col>\r\n                    {msg.friend && (\r\n                        <Alert className=\"text-right\" variant=\"primary\">\r\n                            {inDesktop ? (\r\n                                <Row>\r\n                                    <Col className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Col>\r\n                                    <Col>{msg.friend}</Col>\r\n                                </Row>\r\n                            ) : (\r\n                                <Fragment>\r\n                                    <Row>{msg.friend}</Row>\r\n                                    <Row className=\"friend-message-time\" xs={3}>\r\n                                        {time}\r\n                                    </Row>\r\n                                </Fragment>\r\n                            )}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","import {\r\n    Button,\r\n    Card,\r\n    Container,\r\n    Form,\r\n    InputGroup,\r\n    Row,\r\n    Tab,\r\n} from \"react-bootstrap\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { SendMessageTo } from \"../dashboard/actions\";\r\nimport \"./chat.css\";\r\nimport { Device, Status } from \"../services/configs\";\r\nimport chatServices from \"../services/http/chatServices\";\r\n\r\nimport Message from \"./Message\";\r\n\r\nconst ChatBox = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(\"\");\r\n    const message = useSelector((state) => state.message);\r\n    const device = useSelector((state) => state.device);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n    const mostRecentMessageRef = useRef(null);\r\n\r\n    //...TEMP: just save msges in client side\r\n    const [allMsgs, setAllMsgs] = useState([\r\n        { me: null, friend: null, date: null },\r\n    ]);\r\n\r\n    const loadPreviousMessages = useCallback(async () => {\r\n        try {\r\n            const { status, data } = await chatServices.getOurChat(friendID);\r\n            if (status === Status.Successful) {\r\n                const { myIndex, chat } = data;\r\n                const previousMsgs = chat.map((message) => {\r\n                    const { text, owner, date } = message;\r\n                    if (owner === myIndex)\r\n                        return { me: text, friend: null, date };\r\n                    return { me: null, friend: text, date };\r\n                });\r\n                setAllMsgs(previousMsgs);\r\n            }\r\n        } catch (err) {\r\n            //consider a special place in chat box to show status change or error messages\r\n        }\r\n    }, [friendID]);\r\n\r\n    useEffect(() => {\r\n        loadPreviousMessages();\r\n\r\n        return () => {\r\n            setAllMsgs([]);\r\n        };\r\n    }, [loadPreviousMessages]);\r\n\r\n    const composeMessage = (event) => {\r\n        event.preventDefault();\r\n        let tempMsg = [...allMsgs];\r\n        tempMsg.push({ me: myMessage, friend: null, date: new Date() });\r\n        setAllMsgs(tempMsg);\r\n        dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n        setMyMessage(\"\");\r\n\r\n        if (mostRecentMessageRef && mostRecentMessageRef.current) {\r\n            setTimeout(() => {\r\n                mostRecentMessageRef.current.scrollIntoView({\r\n                    behavior: \"smooth\",\r\n                    top: mostRecentMessageRef.current.offsetTop,\r\n                });\r\n            }, 100);\r\n        }\r\n    };\r\n\r\n    const recieveMessage = useCallback(\r\n        (msg) => {\r\n            let tempMsg = [...allMsgs];\r\n            tempMsg.push({ me: null, friend: msg.text, date: new Date() });\r\n            return tempMsg;\r\n        },\r\n        [allMsgs]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const { recieved } = message;\r\n        if (!message.sent && recieved && recieved.friendID === friendID) {\r\n            setAllMsgs(recieveMessage(message.recieved));\r\n        }\r\n    }, [message, friendID]);\r\n\r\n    return (\r\n        <Tab.Pane eventKey={friendID}>\r\n            <Container>\r\n                <Row>\r\n                    <Card\r\n                        border=\"dark\"\r\n                        bg=\"transparent\"\r\n                        className={`big-single-card ${\r\n                            device !== Device.SmartPhone\r\n                                ? \"chat-box-scrollable\"\r\n                                : \"smartphone-chat-box-scrollable\"\r\n                        }`}>\r\n                        <Card.Body>\r\n                            {allMsgs.map((msg, index) => (\r\n                                <div ref={mostRecentMessageRef}>\r\n                                    <Message\r\n                                        msg={msg}\r\n                                        inDesktop={!device}\r\n                                        previousDay={\r\n                                            index !== 0\r\n                                                ? (new Date(\r\n                                                      allMsgs[index-1].date\r\n                                                  )).getDate()\r\n                                                : 0\r\n                                        }\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Row>\r\n                <Row>\r\n                    <Form\r\n                        onSubmit={(event) => composeMessage(event)}\r\n                        className=\"w-100 mt-3\">\r\n                        <InputGroup className=\"w-100\">\r\n                            <InputGroup.Prepend\r\n                                style={{\r\n                                    width: \"8%\",\r\n                                }}>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    style={{\r\n                                        border: \"none\",\r\n                                    }}\r\n                                    className=\"w-100 mx-auto\"\r\n                                    variant=\"outline-info\">\r\n                                    <i\r\n                                        className=\"fa fa-paper-plane\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n\r\n                            <InputGroup.Prepend\r\n                                style={{\r\n                                    margin: \"auto\",\r\n                                    width: \"92%\",\r\n                                }}>\r\n                                <Form.Control\r\n                                    value={myMessage}\r\n                                    onChange={(e) =>\r\n                                        setMyMessage(e.target.value)\r\n                                    }\r\n                                    placeholder=\"پیام...\"\r\n                                    className=\"bg-transparent chat-room-message-box\r\n                                    mx-auto text-right\"></Form.Control>\r\n                            </InputGroup.Prepend>\r\n                        </InputGroup>\r\n                    </Form>\r\n                </Row>\r\n            </Container>\r\n        </Tab.Pane>\r\n    );\r\n};\r\n\r\nexport default ChatBox;\r\n","import { Card, Row, Col, Nav, Tab } from \"react-bootstrap\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Configs from \"../services/configs\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport ChatBox from \"./ChatBox\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./chat.css\";\r\nimport LoadingBar from '../common/LoadingBar';\r\n\r\nconst ChatRoom = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const device = useSelector((state) => state.device);\r\n    const [myFriends, setMyFriends] = useState([]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true); // use preloader here?\r\n                const { status, data } = await userServices.getMyFriends();\r\n                if (status === Configs.Status.Successful)\r\n                    setMyFriends(data.friends);\r\n            } catch (err) {\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card\r\n            border=\"secondary\"\r\n            bg=\"transparent\"\r\n            className=\"chat-main-card\">\r\n            <LoadingBar loading={loading} />\r\n            <Card.Header className=\"text-center\">چت روم شما</Card.Header>\r\n            <Card.Body>\r\n                <Tab.Container\r\n                // id=\"left-tabs-example\"\r\n                // defaultActiveKey={filterID}\r\n                // onSelect={(key) => setFilterID(key)}\r\n                >\r\n                    <Row>\r\n                        <Col\r\n                            className={\r\n                                device !== Configs.Device.SmartPhone\r\n                                    ? \"chat-room-devider chat-scrollable-friends\"\r\n                                    : \"smartphone-chat-scrollable-friends\"\r\n                            }\r\n                            sm={3}>\r\n                            <Nav\r\n                                variant=\"pills\"\r\n                                className=\"flex-column text-right\">\r\n                                {myFriends.map((friend) => (\r\n                                    <Nav.Item>\r\n                                        <Nav.Link eventKey={friend.userID}>\r\n                                            {friend.fullname}\r\n                                        </Nav.Link>\r\n                                    </Nav.Item>\r\n                                ))}\r\n                            </Nav>\r\n                        </Col>\r\n                        {/* EDIT MAIL LAYOUT <Col> LIKE THIS */}\r\n                        <Col>\r\n                            <Tab.Content>\r\n                                {myFriends.map((friend) => (\r\n                                    <ChatBox friendID={friend.userID} />\r\n                                ))}\r\n                            </Tab.Content>\r\n                        </Col>\r\n                    </Row>\r\n                </Tab.Container>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import { Component } from \"react\";\r\nimport ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport GameGuide from \"./informations/GameGuide\";\r\nimport ContactUs from \"./informations/ContactUs\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./common/MainLayout\";\r\nimport Rankings from \"./tables/rankings/Rankings\";\r\nimport GameDeck from \"./games/GameDeck\";\r\nimport NoticeManager from \"./profile/NoticeManager\";\r\nimport AccountCredentials from \"./profile/AcountCredentials\";\r\nimport MyGamesAndFriends from \"./profile/MyGamesAndFriends\";\r\nimport { Routes } from \"./services/configs\";\r\nimport ChatRoom from \"./chat/ChatRoom\";\r\n\r\nclass App extends Component {\r\n    // 1. use uuid to produce ids\r\n    // state = {  }\r\n\r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path={Routes.Client.SignUp} component={SignUp} />\r\n                    <Route path={Routes.Client.GameDeck} component={GameDeck} />\r\n                    <Route path={Routes.Client.Rankings} component={Rankings} />\r\n                    <Route\r\n                        path={Routes.Client.GameGuide}\r\n                        component={GameGuide}\r\n                    />\r\n                    <Route\r\n                        path={Routes.Client.ContactUs}\r\n                        component={ContactUs}\r\n                    />\r\n\r\n                    <Route\r\n                        path={Routes.Client.MyGamesAndFriends}\r\n                        component={MyGamesAndFriends}\r\n                    />\r\n                    <Route\r\n                        path={Routes.Client.Notices}\r\n                        component={NoticeManager}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path={Routes.Client.Profile}\r\n                        component={AccountCredentials}\r\n                    />\r\n                    <Route\r\n                        path={Routes.Client.ChatRoom}\r\n                        component={ChatRoom}\r\n                    />\r\n                    \r\n                    <Route\r\n                        path={Routes.Client.Root}\r\n                        exact\r\n                        component={ScoresTable}\r\n                    />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\nimport { statisticsReducer } from \"./statistics\";\r\nimport { messageReducer } from './message';\r\nimport { deviceReducer } from './device';\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer,\r\n    statistics: statisticsReducer,\r\n    message: messageReducer,\r\n    device: deviceReducer\r\n});","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n\r\n        case \"UPDATE_ME\":\r\n            return null; //sets state.player => null, forces Mainlayout to reload and update state.player data\r\n\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = {name: null, type: null}, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {name, type} = action.payload;            \r\n            return {name, type};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        case \"RESET_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (\r\n    state = {\r\n        updateTriggered: false,\r\n        opponentSearchTriggered: false,\r\n        friendRequest: false,\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"TRIGGER_UPDATE\":\r\n            return {\r\n                updateTriggered: !state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger update\r\n        case \"TRIGGER_OPPONENT_SEARCH\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: !state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger search\r\n        case \"SEND_FRIEND_REQUEST\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","\r\nexport const statisticsReducer = (state = {players: 0, games: 0}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_STATISTICS\":\r\n            const {players, games} = action.payload;\r\n            return {players, games};\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","export const messageReducer = (\r\n    state = { sent: null, recieved: null },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"RECIEVE_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log(action.payload);\r\n                return { recieved: { name, friendID, text }, sent: state.sent };\r\n            }\r\n        case \"SEND_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log('payload', action.payload);\r\n                return { sent: { name, friendID, text }, recieved: state.recieved };\r\n            }\r\n        case \"RESET_MESSAGES\":\r\n            {\r\n                return { sent: null, recieved: null };\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","export const deviceReducer = (state = 0, action) => {\r\n    switch (action.type) {\r\n        case \"SET_DEVICE\":\r\n            return action.payload;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n","const ClientRoutes = require('./client');\r\nconst ServerRoutes = require('./server');\r\nconst Status = require('./status');\r\nconst BrowserStorage = require('./browser');\r\nconst GameSetting = require('./gamesetting');\r\n\r\n//all configs\r\nmodule.exports = {\r\n    BrowserStorage,\r\n    Routes: { Server: ServerRoutes, Client: ClientRoutes },\r\n    Status,\r\n    GameSetting,\r\n    Device: { SmartPhone: 2, Tablet: 1, Desktop: 0 }\r\n}"],"sourceRoot":""}