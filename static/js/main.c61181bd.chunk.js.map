{"version":3,"sources":["services/configs/gamesetting.js","tables/scores/SingleScoreCard.jsx","tables/scores/AllScores.jsx","services/http/httpService.js","services/http/userServices.js","services/http/gameServices.js","tables/scores/ScoresTable.jsx","informations/GameRules.jsx","informations/ContactInfo.jsx","common/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","common/NavigationBar.jsx","sidebars/SignInSideBar.jsx","services/http/noticeServices.js","sidebars/NoticeSideBar.jsx","sidebars/no-avatar.png","sidebars/OnlineStatistics.jsx","dashboard/actions/index.js","games/GameChatRoom.jsx","sidebars/PlayerInfoSideBar.jsx","controlpanel/PanelMenu.jsx","services/ws/GlobalSocketManager.jsx","common/MainLayout.jsx","tables/ranking/SinglePlayerCard.jsx","tables/ranking/AllPlayers.jsx","tables/ranking/Ranking.jsx","controlpanel/ControlPanel.jsx","services/ws/gamePlaySocketServices.js","dashboard/withReduxDashboard.js","games/BriefScoreboard.jsx","games/TableDesign.jsx","games/GamePlay.jsx","games/SingleGame.jsx","games/competitions/CompetitionSummary.jsx","games/competitions/CompetitionsMain.jsx","games/GameDeck.jsx","controlpanel/NoticeManager.jsx","controlpanel/AcountCredentials.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/reducers/tools.js","dashboard/reducers/statistics.js","dashboard/reducers/message.js","dashboard/store/index.js","index.js","services/configs/index.js","services/configs/server.js","services/configs/status.js","services/configs/browser.js"],"names":["module","exports","TableRowMargings","SingleScoreCard","gameType","playerXName","playerOName","xScore","oScore","xBadgeColor","oBadgeColor","className","id","AllScores","scores","map","score","xName","oName","gameID","axios","defaults","headers","post","put","interceptors","request","use","config","token","sessionStorage","getItem","BrowserStorage","Token","Authorization","error","Promise","reject","response","expectedErrors","status","Status","BadRequest","InternalServerError","toast","position","closeOnClick","Unauthorized","Forbidden","NotAcceptable","Conflict","UnprocessableEntity","http","get","delete","userServices","signUp","user","Routes","Root","Users","SignUp","JSON","stringify","signIn","SignIn","getPlayer","userID","Public","getAllPlayers","getMyCredentials","Credentials","editMyCredentials","newMe","changeMyPassword","passwords","PasswordChange","getFriends","Friends","isMyFriend","targetID","isAdministrator","Administrators","saveUser","setItem","ID","readUserID","gameServices","getAllResults","Games","loadPlayerData","a","data","resolve","Successful","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","Configs","allGames","then","result","reverse","filter","game","isLive","catch","err","this","onClick","Component","GameRules","Card","border","Header","Body","Text","href","ContactInfo","LoadingBar","useState","whichOne","setWhichOne","useLayoutEffect","document","body","style","overflowY","height","Math","floor","random","selectedLoader","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","Number","props","history","replace","isErrorExpected","onForgotPasswordClick","Button","variant","Modal","backdrop","show","onHide","closeButton","Form","onSubmit","Group","Label","Control","type","placeholder","value","onChange","e","target","controlId","Row","withRouter","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","length","newUser","fullname","CreatedSuccessfully","success","warn","pattern","onInput","onInvalid","required","Footer","NavigationBar","useSelector","Navbar","bg","expand","Container","Toggle","activeClassName","to","Collapse","Nav","exact","SignInSideBar","Col","noticeServices","createNotice","notice","Notices","NoticeManagement","getAdvancedNotics","getShortNotices","editNotice","noticeID","NoticeSideBar","notices","setNotices","useEffect","title","text","Alert","color","fontSize","OnlineStatistics","statistics","players","games","ListGroup","Item","Badge","pill","LoadMe","payload","SetRoom","room","UpdateStatistics","SendFriendRequestTo","SendMessageTo","name","friendID","RecieveMessageFrom","GameChatRoom","myMessage","setMyMessage","message","dispatch","useDispatch","me","recieved","InputGroup","Prepend","width","console","log","PlayerInfoSideBar","person","inGame","personIsFriend","setPersonIsFriend","isFriend","Image","src","noAvatar","alt","index","Heading","shape","records","points","wins","block","innerHTML","disabled","onFriendRequestClick","isAdmin","GlobalSocketManager","socketGlobal","setSocketGlobal","incommingFriendRequest","setIncommingFriendRequest","showFriendshipModal","setShowFriendshipModal","opponent","tools","socket","WebSocket","WebSocketRoot","wsGlobalRoute","onopen","send","clientID","msg","onmessage","parse","command","setTimeout","askerID","answer","targetName","warning","onerror","close","onclose","opponentSearchTriggered","friendRequest","askerName","respondToFriendshipRequest","sent","margin","pathname","location","scoreboard","deviceIsDesktop","useMediaQuery","query","deviceIsSmartPhone","deviceIsTablet","updateTriggered","pageLeftSideBar","pageRightSideBar","inControlPanelPages","includes","opp","xs","children","SinglePlayerCard","rowNumber","loses","draws","scope","AllPlayers","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","ControlPanel","createSocketRequest","roomName","playerID","gamePlaySocketServices","connect","server","wsGamePlayRoute","withReduxDashboard","component","LoadOpponent","UpdateMyRecords","ResetOpponent","ResetRoom","SetGameID","UpdateScoreboard","details","CleanScoreboard","TriggerRecordUpdate","stat","TriggerOpponentSearch","ResetMessages","BriefScoreboard","textAlign","TableDesign","dimension","table","onEachCellClick","dimens","i","push","row","direction","marginLeft","GameSetting","column","GamePlay","lineColor","turn","myTurn","undefined","socketGamePlay","LoadOpponentData","opponentID","info","updateGameScorebaord","oppTurn","socketOnMessage","IDs","opponentIndex","newMove","cell","cellID","verifyAndApplyTheMove","cellButtons","focus","endGame","forceConnectToWebSocket","nextJob","initiateGameTimer","setInterval","window","navigator","onLine","connectionLost","getCellCoordinates","dimen","onFloorId","selectedCellButton","cellButton","tempTable","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","connectTheScoreLines","count","firstCell","step","getElementsByClassName","RoomManager","friendlyGame","setRoomName","setGameType","searching","setSearching","onStartGameClick","padding","Radio","checked","CompetitionSummary","summary","CompetitionsMain","Tab","defaultActiveKey","sm","Link","eventKey","Content","Pane","GameDeck","Tabs","transition","SingleGame","NoticeManager","isAllowed","setAllowed","setTitle","setText","startDate","setStartDate","endDate","setEndDate","selectedNoticeID","setSelectedNoticeID","updateTrigger","setUpdateTrigger","setLoading","resetStates","createNewNotice","Date","saveChanges","as","calendar","persian","locale","persian_fa","calendarPosition","_id","selecteNotice","MODES","AccountCredentials","setFullname","setStudentID","setEmail","setPassword","pageMode","setPageMode","pageUpdateTrigger","triggerPageUpdate","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","reloadPage","selectMode","App","path","reducers","combineReducers","action","clear","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","getElementById","require","NotFound"],"mappings":"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","file":"static/js/main.c61181bd.chunk.js","sourcesContent":["module.exports = {\r\n    TableRowMargings: [0, 40, 80, 120, 160],\r\n};\r\n","import \"../tables.css\";\r\n\r\nconst SingleScoreCard = ({gameType, playerXName, playerOName, xScore, oScore }) => {\r\n    // format score text:\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        oBadgeColor = \"badge-danger\";\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        xBadgeColor = \"badge-danger\";\r\n    }\r\n\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <div className=\"card border-info mb-3 scoreCard\">\r\n            <div className=\"card-header text-center border-info\">{`T3D ${gameType}x${gameType}x${gameType}`}</div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} scoreBadge col-1`}>\r\n                        {xScore < 10 ? `0${xScore}` : `${xScore}`}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} scoreBadge col-1`}>\r\n                        {oScore < 10 ? `0${oScore}` : `${oScore}`}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </div>\r\n            </div>\r\n            <button\r\n                id=\"btnReplayGame\"\r\n                className=\"btn btn-outline-info btn-lg btn-block\">\r\n                بازپخش بازی\r\n            </button>\r\n            {/*1st method: pass key to the score.jsx and find the specific game to replay\r\n            2nd method: pass replay function from AllScore.jsx to Score.jsx ? */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    return ( \r\n        <Fragment>\r\n            { scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    gameType={score.gameType}\r\n                    playerXName={score.xName}\r\n                    playerOName={score.oName}\r\n                    xScore={score.xScore}\r\n                    oScore={score.oScore}\r\n                ></SingleScoreCard>\r\n            )) }\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Status, BrowserStorage } from \"../configs\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use(\r\n    (config) => {\r\n        const token = sessionStorage.getItem(BrowserStorage.Token);\r\n        if (token) config.headers.Authorization = `Bearer ${token}`;\r\n        else config.headers.Authorization = \"\";\r\n        // console.log(config.headers.Authorization);\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // what to do?\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try\r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= Status.BadRequest && // >= 400\r\n        error.response.status < Status.InternalServerError; // < 500\r\n\r\n        //*****notice: */\r\n        //remove some oftheese errors... because they need to be costomized in every use in each components\r\n    if (error.response.status === Status.BadRequest) {\r\n        toast.error(\r\n            \"مشکلی در ارسال درخواست شما به سرور وجود داشت، لطفا دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Unauthorized) {\r\n        toast.error(\r\n            \"احراز هویت موفقیت آمیز نیست. لطفا دوباره وارد اکانت خود شوید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    } else if (error.response.status === Status.Forbidden) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.NotAcceptable) {\r\n        toast.error(\"این قسمت فقط مختص کاربران ادمین می باشد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === Status.Conflict) {\r\n        toast.error(\r\n            \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n    else if (error.response.status === Status.UnprocessableEntity) {\r\n        toast.error(\"ورودی شما با استانداردهای سایت مطابقت ندارد\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\r\n            \"مشکلی از سمت سرور پیش آمده است ... لطفا لحظاتی بعد دوباره تلاش کنید\",\r\n            {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            }\r\n        );\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport { BrowserStorage, Routes } from \"../configs\";\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.SignUp}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.SignIn}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Public}/${userID}`\r\n        );\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Users}/${Routes.Public}`);\r\n    },\r\n    getMyCredentials: () => {\r\n        //token will be sent automatically, o.w. method doesnt return anything\r\n        return http.get(`${Routes.Root}/${Routes.Users}/${Routes.Credentials}`);\r\n    },\r\n    editMyCredentials: (newMe) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Credentials}`,\r\n            JSON.stringify(newMe)\r\n        );\r\n    },\r\n    changeMyPassword: (passwords) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Credentials}/${Routes.PasswordChange}`,\r\n            JSON.stringify(passwords)\r\n        );\r\n    },\r\n    getFriends: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Users}/${Routes.Credentials}/${Routes.Friends}`);\r\n    },\r\n    isMyFriend: (targetID) => {\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Credentials}/${Routes.Friends}/${targetID}`\r\n        );\r\n    },\r\n    isAdministrator: (userID) => {\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Users}/${Routes.Administrators}/${userID}`\r\n        );\r\n    }, // check is admin via token? or this?:|\r\n    saveUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(BrowserStorage.ID, id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(BrowserStorage.Token, token);\r\n    },\r\n    readUserID: () => {\r\n        //from browser\r\n        // consider local storage\r\n        return sessionStorage.getItem(BrowserStorage.ID);\r\n    },\r\n};\r\n\r\nexport default userServices;","import {Routes, Status} from '../configs';\r\n\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst gameServices = {\r\n    \r\n    getAllResults: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Games}`);\r\n    },\r\n    loadPlayerData: async (userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (userID === null) reject(null);\r\n            if (status === Status.Successful) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;\r\n","import \"../tables.css\";\r\nimport { Component } from \"react\";\r\nimport AllScores from \"./AllScores\";\r\nimport gameServices from \"../../services/http/gameServices\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass ScoresTable extends Component {\r\n    state = {\r\n        liveScores: [],\r\n        finalScores: [],\r\n        showLiveOnes: false,\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        // get all game results , live or final, handling promises\r\n        // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const { data, status } = await gameServices.getAllResults();\r\n            if (status === Configs.Status.Successful) return data.allGames;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                result = result.reverse();\r\n                this.setState({\r\n                    liveScores: result.filter((game) => game.isLive),\r\n                    finalScores: result.filter((game) => !game.isLive),\r\n                    loading: false,\r\n                });\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({ showLiveOnes: true });\r\n    };\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({ showLiveOnes: false });\r\n    };\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let { liveScores, finalScores, showLiveOnes } = this.state;\r\n\r\n        // DESIGN : USE <Tabs> ???\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-success`\r\n                                    : `btn-outline-primary`\r\n                            }`}\r\n                            onClick={this.btnShowLiveScores}>\r\n                            نتایج زنده\r\n                            <i\r\n                                className=\"fa fa-play-circle px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <button\r\n                            className={`scoresTypeSelectButton btn ${\r\n                                showLiveOnes\r\n                                    ? `btn-outline-primary`\r\n                                    : `btn-outline-success`\r\n                            }`}\r\n                            onClick={this.btnShowFinalScores}>\r\n                            نتایج نهایی\r\n                            <i\r\n                                className=\"fa fa-stop-circle-o px-3\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <AllScores\r\n                            scores={showLiveOnes ? liveScores : finalScores}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ScoresTable;\r\n","import './info.css'\r\nimport { Card } from 'react-bootstrap';\r\n\r\nconst GameRules = () => {\r\n    return ( \r\n        <Card border=\"warning\" className=\"mb-3 singleCard\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default GameRules;","import { Card } from 'react-bootstrap';\r\nimport './info.css'\r\n\r\nconst ContactInfo = () => {\r\n    return ( \r\n        <Card border=\"dark\" className=\"mb-3 singleCard\" >\r\n            <Card.Header className=\"text-center\">اطلاعات تماس</Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                <Card.Text>دانشگاه علم و صنعت ایران</Card.Text>\r\n                <Card.Text>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></Card.Text>\r\n                <Card.Text>Phone Number: 0000000000000</Card.Text>\r\n                <Card.Text>اطلاعات تماس استاد</Card.Text>\r\n                <Card.Text>instagram: ......</Card.Text>\r\n                <Card.Text>blah blah blah</Card.Text>\r\n            </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default ContactInfo;","import { Fragment, useLayoutEffect, useState } from \"react\";\r\nimport { Planets, Circle2 } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    const [whichOne, setWhichOne] = useState(0);\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n        if(loading)\r\n            setWhichOne(Math.floor(Math.random() * 100));\r\n    }, [loading]);\r\n    const selectedLoader = whichOne % 2 ? <Planets time={0} customLoading={loading} /> : <Circle2 time={0} customLoading={loading} />\r\n    return <Fragment>{loading ? selectedLoader : null}</Fragment>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-right\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    <i className=\"fa fa-user px-2\" aria-hidden=\"true\"></i>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal\r\n                    backdrop=\"static\"\r\n                    show={showModal}\r\n                    onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <hr />\r\n                            <Row>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\">\r\n                                    <i\r\n                                        className=\"fa fa-sign-in px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-warning\"\r\n                                    onClick={this.onForgotPasswordClick}>\r\n                                    <i\r\n                                        className=\"fa fa-recycle px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from '../services/configs';\r\nimport { Card, Form , Button} from \"react-bootstrap\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === Configs.Status.CreatedSuccessfully) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    userServices.saveUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (err) {\r\n                // console.log(err);\r\n                this.setState({ loading: false });\r\n                if (err.response.status === Configs.Status.Conflict) {\r\n                    // toast.error(\r\n                    //     \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                    //     {\r\n                    //         position: \"top-right\",\r\n                    //         closeOnClick: true,\r\n                    //     }\r\n                    // );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else if(!Configs.Status.isErrorExpected(err)){\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <Card border=\"success\" className=\"mb-3 signUpCard\">\r\n                <LoadingBar loading={loading} />\r\n                <Card.Header className=\"bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">نام خانوادگی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">شماره دانشجویی</Form.Label>\r\n                            <Form.Control\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">ایمیل</Form.Label>\r\n                            <Form.Control\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"form-inline\">\r\n                            <Form.Label className=\"w-25\">تایید رمز عبور</Form.Label>\r\n                            <Form.Control\r\n                                type=\"password\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            <i\r\n                                className=\"fa fa-user-plus px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت نام\r\n                        </Button>\r\n                    </Form>\r\n                </Card.Body>\r\n                <Card.Footer className=\"border-primary bg-transparent\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !\r\n                </Card.Footer>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {  NavLink } from \"react-router-dom\";\r\n\r\nconst NavigationBar = () => {\r\n    const player = useSelector((state) => state.player);\r\n\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\" className=\"nav-pills text-right\">\r\n            <Container className=\"text-right\">\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <NavLink\r\n                    border=\"secandary\"\r\n                    className=\"nav-link\"\r\n                    activeClassName=\"btn-success text-dark\"\r\n                    to={player ? \"/controlPanel\" : \"/signUp\"}>\r\n                    <i\r\n                        className=\"fa fa-address-card px-2\"\r\n                        aria-hidden=\"true\"></i>\r\n                    {player ? player.fullname : \"ثبت نام\"}\r\n                </NavLink>\r\n\r\n                <Navbar.Collapse>\r\n                    <Nav className=\"me-auto\">\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/\"\r\n                            exact\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-home px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            صفحه اصلی\r\n                        </NavLink>\r\n\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/gameDeck\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی ها\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/ranking\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-list-ol px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            رنکینگ\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/gameRules\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-eye px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            قوانین\r\n                        </NavLink>\r\n                        <NavLink\r\n                            className=\"nav-link text-primary\"\r\n                            to=\"/contactInfo\"\r\n                            activeClassName=\"btn-outline-secondary text-dark\">\r\n                            <i\r\n                                className=\"fa fa-phone-square px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            تماس با ما\r\n                        </NavLink>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Card, Form, Button, Col, Row } from \"react-bootstrap\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === Configs.Status.Successful) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (err) {\r\n            // check nonserver errors\r\n            // console.log(err);\r\n            this.setState({ password: \"\" });\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \".ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <Card border=\"primary\" className=\"signInSidebar\">\r\n                <Card.Header\r\n                    border=\"primary\"\r\n                    className=\"text-center text-primary\">\r\n                    ورود کاربران\r\n                </Card.Header>\r\n                <LoadingBar loading={loading} />\r\n                <Card.Body className=\"text-primary\">\r\n                    <Form onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"signInSidebarTextBox\"\r\n                            placeholder=\"شماره دانشجویی\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Form.Control\r\n                            type=\"password\"\r\n                            className=\"signInSidebarTextBox\"\r\n                            placeholder=\"رمز عبور\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <Card.Footer className=\"bg-transparent border-primary\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button\r\n                                        id=\"btnSideBarSignIn\"\r\n                                        type=\"submit\"\r\n                                        variant=\"success\"\r\n                                        className=\"h-100\">\r\n                                        <i\r\n                                            className=\"fa fa-sign-in px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ورود\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button\r\n                                        id=\"btnSideBarPasswordRecovery\"\r\n                                        className=\"h-100\"\r\n                                        variant=\"warning\">\r\n                                        <i\r\n                                            className=\"fa fa-recycle px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        بازیابی پسورد\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Footer>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","import http from \"./httpService\";\r\nimport { Routes } from \"../configs\";\r\n\r\nconst noticeServices = {\r\n    createNotice: (notice) => {\r\n        return http.post(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    },\r\n    getAdvancedNotics: () => { //returns all notices with complete data esp. with ID\r\n        return http.get(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}`\r\n        );\r\n    },\r\n    getShortNotices: () => {\r\n        return http.get(`${Routes.Root}/${Routes.Notices}`);\r\n    },\r\n    editNotice: (noticeID, notice) => {\r\n        return http.put(\r\n            `${Routes.Root}/${Routes.Notices}/${Routes.NoticeManagement}/${noticeID}`,\r\n            JSON.stringify(notice)\r\n        );\r\n    }\r\n};\r\n\r\nexport default noticeServices;\r\n","import \"./sidebars.css\";\r\nimport { Fragment, useEffect, useState } from \"react\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { Alert, Card } from \"react-bootstrap\";\r\n\r\nconst NoticeSideBar = () => {\r\n    const [notices, setNotices] = useState([]);\r\n\r\n    // oncomponentMount or update\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                const { status, data } =\r\n                    await noticeServices.getShortNotices();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    else\r\n                        setNotices([\r\n                            { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                        ]);\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <Card className=\"noticeSidebar\" border=\"success\">\r\n            <Card.Header className=\"text-center text-success\">\r\n                اطلاعیه ها\r\n            </Card.Header>\r\n            <Card.Body className=\"text-right\">\r\n                {notices.map((notice) => {\r\n                    return (\r\n                        <Fragment>\r\n                            <Alert variant=\"info\">\r\n                                <i\r\n                                    className=\"fa fa-info-circle px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                <span\r\n                                    style={{ color: \"red\", fontSize: \"18px\" }}>\r\n                                    {notice.title}\r\n                                </span>\r\n                                : {notice.text}\r\n                            </Alert>\r\n                            <hr />\r\n                        </Fragment>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default NoticeSideBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Badge, Card, Col, ListGroup, Row } from \"react-bootstrap\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst OnlineStatistics = () => {\r\n    const {players, games} = useSelector((state) => state.statistics);\r\n    return (\r\n        <ListGroup className=\"list-group list-group-flush\">\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-wifi px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            کاربران آنلاین\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"badgeFontSize\" variant=\"success\" pill>\r\n                            {players}\r\n                        </Badge>\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n            <ListGroup.Item className=\"bg-transparent\">\r\n                <Row>\r\n                    <Col>\r\n                        <Card.Text className=\"text-center\">\r\n                            <i\r\n                                className=\"fa fa-gamepad px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            بازی های فعال\r\n                        </Card.Text>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge className=\"badgeFontSize\" variant=\"success\" pill>\r\n                            {games}\r\n                        </Badge>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </ListGroup.Item>\r\n        </ListGroup>\r\n    );\r\n};\r\n\r\nexport default OnlineStatistics;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const UpdateMyRecords = () => ({\r\n    type: \"UPDATE_ME\",\r\n});\r\n\r\nexport const TriggerRecordUpdate = () => ({\r\n    type: \"TRIGGER_UPDATE\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\nexport const ResetRoom = () => ({\r\n    type: \"RESET_ROOM\",\r\n});\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n\r\nexport const UpdateStatistics = (statistics) => ({\r\n    type: \"UPDATE_STATISTICS\",\r\n    payload: statistics,\r\n});\r\n\r\nexport const TriggerOpponentSearch = () => ({\r\n    type: \"TRIGGER_OPPONENT_SEARCH\"\r\n})\r\n\r\nexport const SendFriendRequestTo = (targetID) => ({\r\n    type: \"SEND_FRIEND_REQUEST\",\r\n    payload: targetID\r\n})\r\n\r\nexport const SendMessageTo = (name, friendID, text) => ({\r\n    type: \"SEND_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const RecieveMessageFrom = (name, friendID, text) => ({\r\n    type: \"RECIEVE_MESSAGE\",\r\n    payload: { name, friendID, text }\r\n});\r\n\r\nexport const ResetMessages = () => ({\r\n    type: \"RESET_MESSAGES\"\r\n});","import {\r\n    Alert,\r\n    Button,\r\n    Form,\r\n    Row,\r\n    InputGroup,\r\n} from \"react-bootstrap\";\r\nimport { Fragment, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SendMessageTo } from \"./../dashboard/actions/index\";\r\n\r\nconst GameChatRoom = ({ friendID }) => {\r\n    const [myMessage, setMyMessage] = useState(null);\r\n    const message = useSelector((state) => state.message);\r\n    const dispatch = useDispatch();\r\n    const me = useSelector((state) => state.player);\r\n\r\n    const composeMessage = () => {\r\n        console.log(friendID);\r\n        dispatch(SendMessageTo(me.fullname, friendID, myMessage));\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <Row className=\"w-100 mx-auto\">\r\n                <Alert className=\"w-100 text-right\" variant=\"info\">\r\n                    {message.recieved ? message.recieved.text : null}\r\n                </Alert>\r\n            </Row>\r\n            <Row className=\"w-100 mx-auto mb-3\">\r\n                <InputGroup className=\"w-100\">\r\n                    <InputGroup.Prepend style={{width:'10%'}}>\r\n                        <Button\r\n                            onClick={composeMessage}\r\n                            className=\"mx-auto\"\r\n                            variant=\"outline-info\">\r\n                            <i\r\n                                className=\"fa fa-paper-plane\"\r\n                                aria-hidden=\"true\"></i>\r\n                        </Button>\r\n                    </InputGroup.Prepend>\r\n\r\n                    <InputGroup.Prepend style={{width:'90%'}}>\r\n                        <Form.Control\r\n                            placeholder=\"پیام...\"\r\n                            value={myMessage}\r\n                            onChange={(e) => setMyMessage(e.target.value)}\r\n                            className=\"text-right\"></Form.Control>\r\n                    </InputGroup.Prepend>\r\n                </InputGroup>\r\n            </Row>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameChatRoom;\r\n","import noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\nimport {\r\n    Card,\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Badge,\r\n    Image,\r\n    ListGroup,\r\n    Button,\r\n} from \"react-bootstrap\";\r\nimport OnlineStatistics from \"./OnlineStatistics\";\r\nimport { SendFriendRequestTo } from \"../dashboard/actions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useEffect, useState } from \"react\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport GameChatRoom from \"./../games/GameChatRoom\";\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { person, inGame } = props;\r\n    const me = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n    const [personIsFriend, setPersonIsFriend] = useState(false);\r\n\r\n    const onFriendRequestClick = (event) => {\r\n        event.target.innerHTML = \"ارسال شد...\";\r\n        event.target.disabled = true;\r\n        dispatch(SendFriendRequestTo(person.userID));\r\n    };\r\n    useEffect(() => {\r\n        if (person.userID !== me.userID) {\r\n            (async () => {\r\n                try {\r\n                    const { status, data } = await userServices.isMyFriend(\r\n                        person.userID\r\n                    );\r\n                    if (status === Configs.Status.Successful) {\r\n                        setPersonIsFriend(data.isFriend);\r\n                    }\r\n                } catch (err) {\r\n                    // handle error.\r\n                    console.log(err);\r\n                }\r\n            })();\r\n        }\r\n    }, [person, me]);\r\n    return (\r\n        <Card border=\"info\" className=\"playerInfoSideBar\">\r\n            <Card.Header className=\"text-center text-info\">\r\n                {person.fullname}\r\n            </Card.Header>\r\n            <Image\r\n                className=\"card-img-top playerAvatar\"\r\n                src={noAvatar}\r\n                alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n            />\r\n            <hr />\r\n            <Card.Body className=\"card-body\">\r\n                <ListGroup className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <ListGroup.Item>\r\n                            <Alert\r\n                                variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading className=\"text-center\">\r\n                                    {inGame.score} : {inGame.shape}\r\n                                </Alert.Heading>\r\n                            </Alert>\r\n                        </ListGroup.Item>\r\n                    )}\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>امتیاز بازیکن</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">\r\n                                <Card.Text>تعداد بردها</Card.Text>\r\n                            </Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.wins}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">تعداد تساوی ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                    <ListGroup.Item>\r\n                        <Row className=\"py-2\">\r\n                            <Col className=\"text-right\">تعداد باخت ها</Col>\r\n                            <Col className=\"text-left\">\r\n                                <Badge\r\n                                    className=\"badgeFontSize\"\r\n                                    pill\r\n                                    variant=\"primary\">\r\n                                    {person.records.points}\r\n                                </Badge>\r\n                            </Col>\r\n                        </Row>\r\n                    </ListGroup.Item>\r\n                </ListGroup>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                {me.userID === person.userID ? (\r\n                    <OnlineStatistics />\r\n                ) : personIsFriend ? (\r\n                    <GameChatRoom friendID={person.userID}/>\r\n                ) : (\r\n                    <Button\r\n                        variant={\"outline-info\"}\r\n                        block\r\n                        onClick={(event) => onFriendRequestClick(event)}>\r\n                        <i\r\n                            className=\"fa fa-handshake-o px-2\"\r\n                            aria-hidden=\"true\"></i>\r\n                        درخواست دوستی\r\n                    </Button>\r\n                )}\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport { Button, Row } from \"react-bootstrap\";\r\nimport \"./controlpanel.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { SignOut } from \"../dashboard/actions\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Fragment } from \"react\";\r\nconst PanelMenu = (props) => {\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const signMeOut = () => {\r\n        dispatch(SignOut());\r\n        props.history.replace(\"/\"); //what the f is wrong\r\n    };\r\n\r\n    return (\r\n        <Row //bg-transparent\r\n            className=\"panelSideBar mt-2 bg-dark text-right d-flex flex-column mx-auto flex-shrink-0 p-3\">\r\n            <NavLink\r\n                to=\"/controlPanel\"\r\n                className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto link-dark text-decoration-none\">\r\n                <svg className=\"bi me-2\" width=\"40\" height=\"32\"></svg>\r\n                <span className=\"fs-4\">\r\n                    <i className=\"fa fa-cogs px-2\" aria-hidden=\"true\"></i>\r\n                    پنل کاربری\r\n                </span>\r\n            </NavLink>\r\n            <hr />\r\n            <ul className=\"nav nav-pills flex-column mb-auto\">\r\n                <li className=\"nav-item\">\r\n                    <NavLink\r\n                        to=\"/controlPanel/info\"\r\n                        className=\"nav-link\"\r\n                        aria-current=\"page\">\r\n                        <i className=\"fa fa-user-o px-3\" aria-hidden=\"true\"></i>\r\n                        مشخصات\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/friends\">\r\n                        <i className=\"fa fa-users px-3\" aria-hidden=\"true\"></i>\r\n                        دوستان\r\n                    </NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink\r\n                        className=\"nav-link link-dark\"\r\n                        to=\"/controlPanel/games\">\r\n                        \r\n                        <i\r\n                                    className=\"fa fa-trophy px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                        بازی ها\r\n                    </NavLink>\r\n                </li>\r\n                <hr />\r\n                {player && player.isAdmin && (\r\n                    <Fragment>\r\n                        {/* admin tools */}\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/notices\">\r\n                                <i\r\n                                    className=\"fa fa-newspaper-o px-3\"\r\n                                    aria-hidden=\"true\"></i>\r\n                                اطلاعیه ها\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                className=\"nav-link link-dark\"\r\n                                to=\"/controlPanel/admin/whatever\">\r\n                                <svg\r\n                                    className=\"bi me-2\"\r\n                                    width=\"16\"\r\n                                    height=\"16\"></svg>\r\n                                امکانات ادمین\r\n                            </NavLink>\r\n                        </li>{\" \"}\r\n                    </Fragment>\r\n                )}\r\n            </ul>\r\n            <hr />\r\n            <Button variant=\"outline-danger\" onClick={signMeOut}>\r\n                <i className=\"fa fa-sign-out px-3\" aria-hidden=\"true\"></i>\r\n                خروج از حساب کاربری\r\n            </Button>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default withRouter(PanelMenu);\r\n","import { Routes } from \"../configs\";\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    TriggerOpponentSearch,\r\n    UpdateStatistics,\r\n    SetRoom,\r\n    SendFriendRequestTo,\r\n    RecieveMessageFrom,\r\n    ResetMessages,\r\n} from \"../../dashboard/actions\";\r\nimport { Modal, Button, Row, Col, Badge } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst GlobalSocketManager = () => {\r\n    // I actually used .jsx format to make this Component EventBased\r\n    // On Each event called socket will do some specific operation\r\n    // events are actually useEffects bound to special state changes\r\n    const [socketGlobal, setSocketGlobal] = useState(null);\r\n    const [incommingFriendRequest, setIncommingFriendRequest] = useState(null);\r\n    const [showFriendshipModal, setShowFriendshipModal] = useState(false);\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const tools = useSelector((state) => state.tools);\r\n    const room = useSelector((state) => state.room);\r\n    const message = useSelector((state) => state.message);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // EVENT NAME: PlayerUpdateEvent\r\n    // happens when player sign in status changes => set ups global socket connection and then if signed in=> reads number of online users in page\r\n    useEffect(() => {\r\n        const connect = () => {\r\n            return new Promise((resolve, reject) => {\r\n                var socket = new WebSocket(\r\n                    `${Routes.WebSocketRoot}/${Routes.wsGlobalRoute}`\r\n                );\r\n                socket.onopen = () => {\r\n                    socket.send(\r\n                        JSON.stringify({\r\n                            request: \"online\",\r\n                            clientID: player.userID,\r\n                            msg: null,\r\n                        })\r\n                    ); //temp\r\n                    resolve(socket);\r\n                };\r\n\r\n                socket.onmessage = (response) => {\r\n                    const { data } = response;\r\n                    const { command, msg } = JSON.parse(data);\r\n                    switch (command) {\r\n                        case \"ONLINE\": {\r\n                            const { players, games } = msg;\r\n                            dispatch(\r\n                                UpdateStatistics({\r\n                                    players,\r\n                                    games,\r\n                                })\r\n                            ); //playing temp\r\n                            break;\r\n                        }\r\n                        case \"ENTER_ROOM\": {\r\n                            if (msg) {\r\n                                console.log(\"your room\", msg);\r\n                                dispatch(SetRoom(msg));\r\n                                socket.send(\r\n                                    JSON.stringify({\r\n                                        request: \"online\",\r\n                                        clientID: player.userID,\r\n                                        msg: null,\r\n                                    })\r\n                                );\r\n                            } else {\r\n                                //search again 5s later\r\n                                // **********************\r\n                                //time out must be set with rising time out time to prevent server getting fucked up\r\n                                setTimeout(() => {\r\n                                    dispatch(TriggerOpponentSearch());\r\n                                }, 5000);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"FRIENDSHIP_REQUEST\": {\r\n                            if (msg.askerID === opponent.userID) {\r\n                                //if both players are in game then ask immidiately\r\n                                setIncommingFriendRequest(msg);\r\n                                setShowFriendshipModal(true);\r\n                            } else {\r\n                                //if the friend request is comming from some one else then manage it differently\r\n                                //...\r\n                            }\r\n                            break;\r\n                        }\r\n                        case \"FRIENDSHIP_RESPONSE\": {\r\n                            const { answer, targetName } = msg;\r\n                            toast.warning(\r\n                                `کاربر ${targetName} درخواست دوستی شما را ${\r\n                                    answer ? \"پذیرفت\" : \"رد کرد\"\r\n                                }`\r\n                            );\r\n                            break;\r\n                        }\r\n                        case \"CHAT\":{\r\n                            dispatch(RecieveMessageFrom(msg.name, msg.friendID, msg.text));\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            //... whatever\r\n                            break;\r\n                        }\r\n                    }\r\n                    resolve(socket);\r\n                };\r\n\r\n                socket.onerror = (error) => {\r\n                    // console.log(`WebSocket error: ${error}`);\r\n                    socket.close();\r\n                    reject(error);\r\n                };\r\n\r\n                socket.onclose = () => {\r\n                    // reconnectr or what?\r\n\r\n                    resolve(null);\r\n                    // this part needs editing ? maybe not\r\n                };\r\n            });\r\n        };\r\n        (async () => {\r\n            try {\r\n                console.log(\"global socket online request\");\r\n                let socket = player ? await connect() : null;\r\n                setSocketGlobal(socket);\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        })();\r\n    }, [player, opponent, dispatch]);\r\n\r\n    // EVENT NAME: RandomGameInitiated Event\r\n    // happens when user clicks on 'Random Game\" Tab search button => sends opponent search request to server\r\n    useEffect(() => {\r\n        if (room.type && !room.name && socketGlobal && player) {\r\n            //is it necessary?\r\n            //completely making sure we're on right stage\r\n            console.log(room.type);\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"find\",\r\n                    clientID: player.userID,\r\n                    msg: room.type,\r\n                })\r\n            );\r\n        }\r\n    }, [player, room, tools.opponentSearchTriggered, socketGlobal]);\r\n\r\n    useEffect(() => {\r\n        if (tools.friendRequest) {\r\n            //tools.friendRequest either contains null => no request, or contains target ID for friendship\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"ask_friendship\",\r\n                    clientID: player.userID,\r\n                    msg: {\r\n                        targetID: tools.friendRequest,\r\n                        askerName: player.fullname,\r\n                    },\r\n                })\r\n            );\r\n        }\r\n    }, [tools.friendRequest, socketGlobal, player]);\r\n\r\n    const respondToFriendshipRequest = (answer) => {\r\n        // handle multiple requests *************\r\n        socketGlobal.send(\r\n            JSON.stringify({\r\n                request: \"respond_friendship\",\r\n                clientID: player.userID,\r\n                msg: {\r\n                    answer,\r\n                    targetName: player.fullname,\r\n                    askerID: incommingFriendRequest.askerID,\r\n                },\r\n            })\r\n        );\r\n        setShowFriendshipModal(false);\r\n        setIncommingFriendRequest(null);\r\n        dispatch(SendFriendRequestTo(null)); //reset friend request targetID to prevent any future problm\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (message.sent) {\r\n            //if destination is determined, otherwise => means no message has been sent\r\n            socketGlobal.send(\r\n                JSON.stringify({\r\n                    request: \"chat\",\r\n                    clientID: player.userID,\r\n                    msg: message.sent,\r\n                })\r\n            );\r\n            console.log(\"sent: \" + message.sent.text);\r\n            dispatch(ResetMessages());\r\n        }\r\n    }, [player, message, socketGlobal, dispatch]);\r\n    return (\r\n        <Modal\r\n            show={showFriendshipModal}\r\n            onHide={() => respondToFriendshipRequest(false)}>\r\n            <Modal.Header closeButton />\r\n            <Modal.Body className=\"text-right\">\r\n                <p>\r\n                    {!incommingFriendRequest ? null : (\r\n                        <Badge\r\n                            style={{ fontSize: \"18px\", margin: \"2%\" }}\r\n                            pill\r\n                            variant=\"warning\">\r\n                            {incommingFriendRequest.askerName}\r\n                        </Badge>\r\n                    )}\r\n                    به شما پیشنهاد دوستی داده است.\r\n                </p>\r\n                <p>اگر تمایل به دوستی ندارید میتواند درخواست را رد کنید.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"w-100 text-right\">\r\n                <Row className=\"w-100\">\r\n                    <Col>\r\n                        <Button\r\n                            variant=\"success\"\r\n                            block\r\n                            onClick={() => respondToFriendshipRequest(true)}>\r\n                            پذیرفتن\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button\r\n                            block\r\n                            variant=\"danger\"\r\n                            onClick={() => respondToFriendshipRequest(false)}>\r\n                            رد\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default GlobalSocketManager;\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport SignInSideBar from \"./../sidebars/SignInSideBar\";\r\nimport NoticeSideBar from \"../sidebars/NoticeSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadMe, SignOut, UpdateMyRecords } from \"../dashboard/actions\";\r\nimport { Fragment } from \"react\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport gameServices from \"../services/http/gameServices\";\r\n\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport PanelMenu from \"../controlpanel/PanelMenu\";\r\nimport \"../services/configs/server\";\r\nimport { useEffect } from \"react\";\r\nimport GlobalSocketManager from \"../services/ws/GlobalSocketManager\";\r\nimport GameChatRoom from \"../games/GameChatRoom\";\r\nconst MainLayout = (props) => {\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const tools = useSelector((state) => state.tools); //redux useful tools: like trigger update\r\n    const opponent = useSelector((state) => state.opponent);\r\n    const scoreboard = useSelector((state) => state.scoreboard);\r\n    const dispatch = useDispatch();\r\n\r\n    const deviceIsDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const deviceIsSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const deviceIsTablet =\r\n        !deviceIsDesktop && !deviceIsSmartPhone ? true : false;\r\n    /*this method is for temporary use and for finding items that cause horizontal overflow causing horizontal scrollbar\r\n    const findHorizontalOverflow = () => {\r\n        let docWidth = document.documentElement.offsetWidth;\r\n        [].forEach.call(document.querySelectorAll(\"*\"), function (el) {\r\n            if (el.offsetWidth > docWidth) {\r\n                console.log(\"here is the sabotage: \", el);\r\n            }\r\n        });\r\n    };*/\r\n\r\n    //load player data after sign in\r\n    const userID = userServices.readUserID();\r\n    useEffect(() => {\r\n        dispatch(UpdateMyRecords());\r\n    }, [tools.updateTriggered, dispatch]);\r\n    if (userID && !player) {\r\n        console.log(\"auth called\");\r\n        gameServices\r\n            .loadPlayerData(userID)\r\n            .then((result) => {\r\n                dispatch(LoadMe(result ? result : null));\r\n            })\r\n            .catch((err) => {\r\n                dispatch(LoadMe(null));\r\n            });\r\n    } else if (player && !userID) {\r\n        //still doesnt log out completely automatic:\r\n        //how to sign out after token expires?\r\n        dispatch(SignOut());\r\n    }\r\n    let pageLeftSideBar = <NoticeSideBar />;\r\n    let pageRightSideBar = player ? (\r\n        <PlayerInfoSideBar person={player} inGame={scoreboard.me} />\r\n    ) : (\r\n        <SignInSideBar />\r\n    ); // in case login hassnt been made\r\n\r\n    const inControlPanelPages = pathname.includes(\"/controlPanel\");\r\n    if (pathname === \"/signUp\") pageLeftSideBar = pageRightSideBar = null;\r\n    else if (inControlPanelPages) {\r\n        pageLeftSideBar = null;\r\n        pageRightSideBar = <PanelMenu />;\r\n    } else if (pathname === \"/gameDeck\") {\r\n        // left sidebar must be opponents playerInfo\r\n        if (opponent) {\r\n            pageLeftSideBar = (\r\n                <PlayerInfoSideBar person={opponent} inGame={scoreboard.opp} />\r\n            );\r\n        }\r\n        if (deviceIsSmartPhone) {\r\n            //this is temprory\r\n            // find a way for showing result in smartphone, without causing vertical scroll\r\n            pageLeftSideBar = null; //،ٍء\\\r\n            pageRightSideBar = null; // change then\r\n        }\r\n    }\r\n\r\n    // *******create independent components for each device****\r\n    return (\r\n        <Fragment>\r\n            <GlobalSocketManager />\r\n            <ToastContainer />\r\n            <NavigationBar />\r\n\r\n            {/* wrap up this shit in\r\nmultiple components for each device design\r\nthis looks like shit khodayi */}\r\n            {deviceIsDesktop && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    <Col xs={3}>{pageRightSideBar}</Col>\r\n                    <Col xs={!inControlPanelPages ? 6 : 9}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={3}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsTablet && (\r\n                <Row className=\"w-100 mx-auto\">\r\n                    {pathname === \"/controlPanel\" && (\r\n                        <Col xs={4}>{pageRightSideBar}</Col>\r\n                    )}\r\n                    <Col className=\"mx-auto\" xs={8}>\r\n                        {props.children}\r\n                    </Col>\r\n                    {pageLeftSideBar && <Col xs={4}>{pageLeftSideBar}</Col>}\r\n                </Row>\r\n            )}\r\n            {deviceIsSmartPhone && (\r\n                <Container>\r\n                    {pathname === '/gameDeck' && opponent && <GameChatRoom friendID={opponent.userID} />}\r\n                    {/* what to do for control panelk sidebar in smartphone */}\r\n                    {player ? (\r\n                        <Row className=\"w-100 mx-auto\">{pageRightSideBar}</Row>\r\n                    ) : null}\r\n                    <Row className=\"w-100 mx-auto\">{pageLeftSideBar}</Row>\r\n                    <Row className=\"w-100 mx-auto\">{props.children}</Row>\r\n                    \r\n                </Container>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        \r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"5px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n                <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                    <thead className=\"bg-info\">\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">نام بازیکن</th>\r\n                            <th scope=\"col\">امتیاز</th>\r\n                            <th scope=\"col\">تعداد برد</th>\r\n                            <th scope=\"col\">تعداد باخت</th>\r\n                            <th scope=\"col\">تعداد تساوی</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {players.map((player) => (\r\n                            <SinglePlayerCard\r\n                                key={player.userID}\r\n                                rowNumber={players.findIndex(p => p.userID === player.userID) + 1}\r\n                                name={player.fullname}\r\n                                points={player.records.points}\r\n                                wins={player.records.wins}\r\n                                loses={player.records.loses}\r\n                                draws={player.records.draws}\r\n                            ></SinglePlayerCard>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"../../services/http/userServices\";\r\nimport LoadingBar from \"../../common/LoadingBar\";\r\nimport Configs from '../../services/configs';\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === Configs.Status.Successful) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <div className=\"row mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <div className=\"col-12\">\r\n                    <AllPlayers players={players} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import { Component, Fragment } from \"react\";\r\nimport './controlpanel.css';\r\n\r\nclass ControlPanel extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import {Routes} from '../configs';\r\n\r\nconst createSocketRequest = (request, roomName, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        roomName,\r\n        playerID,\r\n        msg,\r\n    });\r\n\r\nconst connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(`${Routes.WebSocketRoot}/${Routes.wsGamePlayRoute}`);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            // setTimeout( () => {\r\n            //     connect(roomName, playerID);\r\n            //     console.log('reconnecting from onClose');\r\n            // }, 1000)\r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n\r\nconst gamePlaySocketServices = {\r\n    createSocketRequest,\r\n    connect,\r\n};\r\n\r\nexport default gamePlaySocketServices;","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    UpdateMyRecords,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n    ResetRoom,\r\n    TriggerRecordUpdate,\r\n    UpdateStatistics,\r\n    TriggerOpponentSearch,\r\n    SendFriendRequestTo,\r\n    SendMessageTo,\r\n    RecieveMessageFrom,\r\n    ResetMessages\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n        tools: state.tools\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        UpdateMyRecords: () => dispatch(UpdateMyRecords()),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        ResetRoom: () => dispatch(ResetRoom()),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n        TriggerRecordUpdate: () => dispatch(TriggerRecordUpdate()),\r\n        UpdateStatistics: (stat) => dispatch(UpdateStatistics(stat)),\r\n        TriggerOpponentSearch: () => dispatch(TriggerOpponentSearch()),\r\n        SendFriendRequestTo: () => dispatch(SendFriendRequestTo()),\r\n        SendMessageTo: (name, friendID, text) => dispatch(SendMessageTo(name, friendID, text)),\r\n        RecieveMessageFrom: (name, friendID, text) => dispatch(RecieveMessageFrom(name, friendID, text)),\r\n        ResetMessages: () => dispatch(ResetMessages())\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);","import { Card, Col, Row } from \"react-bootstrap\";\r\n\r\nconst BriefScoreboard = ({ players}) => {\r\n    return (\r\n        <Card.Header className=\"w-100 text-center\">\r\n            <Row>\r\n                <Col\r\n                    style={{\r\n                        fontSize: \"20px\",\r\n                        textAlign: \"right\",\r\n                        color: players[1].color,\r\n                    }}>\r\n                    {players[1].shape} : {players[1].score}\r\n                </Col>\r\n                <Col className=\"text-warning\" style={{\r\n                        fontSize: \"18px\"}}>\r\n                    <i className=\"fa fa-clock-o px-2\" aria-hidden=\"true\"></i>\r\n                </Col>\r\n                <Col\r\n                    style={{\r\n                        fontSize: \"20px\",\r\n                        textAlign: \"left\",\r\n                        color: players[0].color,\r\n                    }}>\r\n                    {players[0].score} : {players[0].shape}\r\n                </Col>\r\n            </Row>\r\n        </Card.Header>\r\n    );\r\n};\r\n\r\nexport default BriefScoreboard;\r\n","import { Fragment } from \"react\";\r\nimport { Button, Card, Row } from \"react-bootstrap\";\r\nimport { GameSetting } from \"../services/configs\";\r\nimport BriefScoreboard from \"./BriefScoreboard\";\r\n\r\nconst TableDesign = ({ dimension, players, table, onEachCellClick }) => {\r\n    let dimens = [];\r\n    for (let i = 0; i < dimension; i++) dimens.push(i);\r\n\r\n    return (\r\n        <Card\r\n            id=\"divTableBlock\"\r\n            bg=\"transparent\"\r\n            border=\"dark\"\r\n            className=\"w-100 mx-auto\">\r\n            <BriefScoreboard players={players} />\r\n            <Card.Body className=\"gameBorderCard\">\r\n                {table ? (\r\n                    dimens.map((floor) => (\r\n                        <Fragment>\r\n                            {dimens.map((row) => (\r\n                                <Row\r\n                                    style={{\r\n                                        direction: \"ltr\",\r\n                                        marginLeft: `${GameSetting.TableRowMargings[row]}px`,\r\n                                    }}>\r\n                                    {dimens.map((column) => (\r\n                                        <Button\r\n                                            key={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            variant=\"btn btn-outline-dark\"\r\n                                            className=\"gameTableCells\"\r\n                                            style={\r\n                                                table[floor][row][column] !==\r\n                                                null\r\n                                                    ? {\r\n                                                          color: players[\r\n                                                              table[floor][row][\r\n                                                                  column\r\n                                                              ]\r\n                                                          ].color,\r\n                                                      }\r\n                                                    : null\r\n                                            }\r\n                                            id={\r\n                                                floor * dimension * dimension +\r\n                                                row * dimension +\r\n                                                column\r\n                                            }\r\n                                            onClick={(event) =>\r\n                                                onEachCellClick(event)\r\n                                            }>\r\n                                            {table[floor][row][column] !==\r\n                                                null &&\r\n                                                players[\r\n                                                    table[floor][row][column]\r\n                                                ].shape}\r\n                                        </Button>\r\n                                    ))}\r\n                                </Row>\r\n                            ))}\r\n                            <br />\r\n                        </Fragment>\r\n                    ))\r\n                ) : (\r\n                    <p> در حال اتصال... </p>\r\n                )}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TableDesign;\r\n","import { Component } from \"react\";\r\nimport \"./games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport gameServices from \"./../services/http/gameServices\";\r\nimport gamePlaySocketServices from \"../services/ws/gamePlaySocketServices\";\r\nimport withReduxDashboard from \"../dashboard/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\nimport TableDesign from \"./TableDesign\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-times\" aria-hidden=\"true\" />, // \"X\" : some device may not support font-awsome\r\n                color: \"blue\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: <i className=\"fa fa-sun-o\" aria-hidden=\"true\" />, // \"O\" : some device may not support font-awsome\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketGamePlay: undefined,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.connectionLost = false;\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                    toast.info(\"حریف شما هم به بازی متصل شد\");\r\n                    toast.warn(\r\n                        \"حرکت اول با: \" +\r\n                            (!this.state.myTurn ? \"شما\" : \"حریف شما\")\r\n                    );\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") {\r\n            this.setState({ myTurn: Number(msg) });\r\n        } else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const { IDs, gameType } = msg;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.setState({ dimension: gameType });\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const { players } = this.state;\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            // toast.warn('new-move-recieved');\r\n            //******** */ catch exceptions\r\n            // ****** UPDATE THIS PART **************************************//\r\n            const { newMove, cell, xScore, oScore } = msg; //is table needed to be sent every time to clients?\r\n\r\n            const cellID = Number(newMove);\r\n\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                players,\r\n            });\r\n\r\n            //force connect it?\r\n            this.state.socketGamePlay.send(\r\n                gamePlaySocketServices.createSocketRequest(\r\n                    \"moveRecieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            this.verifyAndApplyTheMove(cell, this.cellButtons[cellID]);\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"END\") {\r\n            this.endGame();\r\n        }\r\n    };\r\n\r\n    forceConnectToWebSocket = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await gamePlaySocketServices.connect(\r\n                room.name,\r\n                player.userID,\r\n                room.type\r\n            );\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketGamePlay: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n            // **********************\r\n            //time out must be set with rising time out time to prevent server getting fucked up\r\n            setTimeout(() => {\r\n                console.log(\"rconnecting from GamePlay\");\r\n                this.forceConnectToWebSocket(nextJob);\r\n            }, 3000);\r\n        }\r\n    };\r\n\r\n    initiateGameTimer = () => {\r\n        setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (this.connectionLost) {\r\n                    console.log(\"connected\");\r\n                    this.connectionLost = false;\r\n                    this.forceConnectToWebSocket(null);\r\n                }\r\n            } else {\r\n                console.log(\"dissconnected\");\r\n                this.connectionLost = true;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"gameTableCells\"); // pay attension to searched className! may cause an error\r\n        \r\n        const { player, room } = this.props;\r\n        console.log();\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectToWebSocket(() => {\r\n            this.state.socketGamePlay.send(\r\n                gamePlaySocketServices.createSocketRequest(\r\n                    \"load\",\r\n                    room.name,\r\n                    player.userID,\r\n                    null\r\n                )\r\n            );\r\n        });\r\n\r\n        console.log(\"TOO MANY UNNEEDED PROPS SENT: \", this.props);\r\n        this.initiateGameTimer();\r\n    }\r\n\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    this.forceConnectToWebSocket(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n                    this.forceConnectToWebSocket(() => {\r\n                        this.state.socketGamePlay.send(\r\n                            gamePlaySocketServices.createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        this.state.socketGamePlay.send(\r\n                            gamePlaySocketServices.createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.value = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({\r\n                turn: (turn + 1) % 2,\r\n                table: tempTable,\r\n            });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"gameTableCells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"gameTableCells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    endGame = async () => {\r\n        //*******************important:\r\n        //ADD TRY CATCHimport gamePlaySocketServices from './../services/gamePlaySocketServices';\r\n        //*************edit: this.context.gatherPlayerData();پ\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else toast.error(\"تکبیر!\");\r\n        //reset everything:\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.ResetRoom();\r\n            this.props.TriggerRecordUpdate();\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <TableDesign\r\n                dimension={this.state.dimension}\r\n                players={this.state.players}\r\n                table={this.state.table}\r\n                onEachCellClick={this.onEachCellClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(withReduxDashboard(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectToWebSocket(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectToWebSocket(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom, TriggerOpponentSearch } from \"../dashboard/actions\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport LoadingBar from '../common/LoadingBar';\r\n\r\nconst RoomManager = ({ friendlyGame }) => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const [searching, setSearching] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n        if (friendlyGame) dispatch(SetRoom({ name: roomName, type: gameType }));\r\n        // random game:\r\n        else {\r\n            dispatch(SetRoom({ name: null, type: gameType }));\r\n            dispatch(TriggerOpponentSearch());\r\n            setSearching(true);\r\n        }\r\n    };\r\n\r\n    //on destroy\r\n    useEffect(() => {\r\n        return () => {\r\n            setSearching(false); //make sure preloader turns off\r\n         }\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <LoadingBar loading={searching} />\r\n            <hr />\r\n            <Form onSubmit={(event) => onStartGameClick(event)}>\r\n                <Form.Group className=\"form-inline\">\r\n                    <Form.Label className=\"w-25\">ابعاد جدول</Form.Label>\r\n                    <InputGroup\r\n                        style={{\r\n                            border: \"1px solid orange\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"2px\",\r\n                        }}>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"3\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)}\r\n                            />\r\n                            <InputGroup.Text>3 * 3 * 3</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"4\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)}\r\n                            />\r\n                            <InputGroup.Text>4 * 4 * 4</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                        <InputGroup.Prepend className=\"mx-5\">\r\n                            <InputGroup.Radio\r\n                                value=\"5\"\r\n                                name=\"tableDimension\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)}\r\n                            />\r\n                            <InputGroup.Text>5 * 5 * 5</InputGroup.Text>\r\n                        </InputGroup.Prepend>\r\n                    </InputGroup>\r\n                </Form.Group>\r\n                <hr />\r\n                {friendlyGame && (\r\n                    \r\n                    <Form.Group className=\"mt-3 form-inline\">\r\n                        \r\n                        <Form.Label className=\"w-25\">نام روم</Form.Label>\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            className=\"w-75 text-left bg-transparent\"\r\n                            placeholder=\"Room Name\"\r\n                            value={roomName}\r\n                            required=\"required\"\r\n                            onChange={(event) =>\r\n                                setRoomName(event.target.value)\r\n                            }\r\n                        />\r\n                    </Form.Group>\r\n                )}\r\n                <hr />\r\n                <Button type=\"submit\" className=\"mt-4\" block variant=\"success\">\r\n                    <i\r\n                        className={`fa ${\r\n                            friendlyGame ? \"fa-handshake-o\" : \"fa-search\"\r\n                        } px-2`}\r\n                        aria-hidden=\"true\"></i>\r\n                    {friendlyGame ? \"ارسال درخواست\" : \"جستجو\"}\r\n                </Button>\r\n            </Form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import { Alert, Badge, Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst CompetitionSummary = ({ title, summary }) => {\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" variant=\"info\">\r\n                    <Alert.Heading className=\"text-center\">\r\n                        <Badge variant=\"success p-2\" >\r\n                            {title}\r\n                        </Badge>\r\n                    </Alert.Heading>\r\n\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                    <p>{summary}</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Alert className=\"text-right w-100\" pill variant=\"info\">\r\n                    <p>تعداد شرکت کنندگان : 00000000</p>\r\n                    <p>نکات دیگر</p>\r\n                </Alert>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col>\r\n                    <Button block variant=\"outline-success\">شرکت در مسابقه</Button>\r\n                </Col>\r\n                <Col>\r\n                <Button block variant=\"outline-secondary\">بازیکنان حاضر</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionSummary;\r\n","import { Col, Nav, Row, Tab } from \"react-bootstrap\";\r\nimport \"./competitions.css\";\r\nimport CompetitionSummary from \"./CompetitionSummary\";\r\n\r\nconst CompetitionsMain = () => {\r\n    return (\r\n        <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n            <hr />\r\n\r\n            <Row>\r\n                <Col className=\"competitionMenuBody\" sm={3}>\r\n                    <Nav variant=\"pills\" className=\"flex-column\">\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"first\">\r\n                                جام حذفی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"second\">\r\n                                لیگ امتیازی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"third\">\r\n                                بازی شرطی\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"forth\">\r\n                                جدول رندوم\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link className=\"text-right\" eventKey=\"fifth\">\r\n                                و غیره\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </Col>\r\n                {/* <div style={{borderLeft: '1px solid gray', height:'500px'}}></div> */}\r\n                <Col sm={9}>\r\n                    <Tab.Content>\r\n                        <Tab.Pane eventKey=\"first\">\r\n                            <CompetitionSummary\r\n                                title=\"جام حذفی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"second\">\r\n                            <CompetitionSummary\r\n                                title=\"لیگ امتیازی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"third\">\r\n                            <CompetitionSummary\r\n                                title=\"بازی شرطی\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"forth\">\r\n                            <CompetitionSummary\r\n                                title=\"جدول رندوم\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                        <Tab.Pane eventKey=\"fifth\">\r\n                            <CompetitionSummary\r\n                                title=\"و غیره\"\r\n                                summary=\"توضیحات این نوع مسابقه\"\r\n                            />\r\n                        </Tab.Pane>\r\n                    </Tab.Content>\r\n                </Col>\r\n            </Row>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nexport default CompetitionsMain;\r\n","import GamePlay from \"./GamePlay\";\r\nimport { useSelector } from \"react-redux\";\r\nimport SingleGame from \"./SingleGame\";\r\nimport { Tab, Tabs, Card, Fade } from \"react-bootstrap\";\r\nimport { Fragment } from \"react\";\r\nimport CompetitionsMain from \"./competitions/CompetitionsMain\";\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector((state) => state.room);\r\n\r\n    return (\r\n        <Fragment>\r\n            {room.name ? (\r\n                <GamePlay />\r\n            ) : (\r\n                <Card\r\n                    border=\"secondary\"\r\n                    bg=\"transparent\"\r\n                    className=\"gameDeckCard\">\r\n                    <Card.Body>\r\n                        <Tabs\r\n                            defaultActiveKey=\"randomGame\"\r\n                            transition={false}\r\n                            id=\"noanim-tab-example\"\r\n                            variant=\"pills\"\r\n                            // transition={Fade}\r\n                            className=\"mb-3\">\r\n                            \r\n                            <Tab eventKey=\"randomGame\" title=\"بازی تصادفی\">\r\n                                <SingleGame friendlyGame={false} />\r\n                            </Tab>\r\n                            <Tab eventKey=\"competitions\" title=\"مسابقات\">\r\n                                <CompetitionsMain />\r\n                            </Tab>\r\n                            <Tab eventKey=\"friendlyGame\" title=\"بازی با دوستان\">\r\n                                <SingleGame friendlyGame={true} />\r\n                            </Tab>\r\n                        </Tabs>\r\n                    </Card.Body>\r\n                </Card>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default GameDeck;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Form, Card, Col, Row, Button, Alert } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/http/userServices\";\r\nimport DatePicker from \"react-multi-date-picker\";\r\nimport persian from \"react-date-object/calendars/persian\";\r\nimport persian_fa from \"react-date-object/locales/persian_fa\";\r\nimport noticeServices from \"../services/http/noticeServices\";\r\nimport Configs from \"../services/configs\";\r\nimport \"./controlpanel.css\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nconst NoticeManager = () => {\r\n    const player = useSelector((state) => state.player);\r\n    const [isAllowed, setAllowed] = useState(undefined);\r\n    const [title, setTitle] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [notices, setNotices] = useState([]);\r\n    const [selectedNoticeID, setSelectedNoticeID] = useState(null);\r\n    const [updateTrigger, setUpdateTrigger] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const resetStates = () => {\r\n        setTitle(\"\");\r\n        setText(\"\");\r\n        setStartDate(null);\r\n        setEndDate(null);\r\n        setSelectedNoticeID(null);\r\n        setUpdateTrigger(!updateTrigger); // updateTrigger: true <===> false -> chane -> useEffects calls\r\n    };\r\n\r\n    useEffect(() => {\r\n        //use another simpler preloader\r\n        //load all notices in left side for selecting: load all and push them in notices state\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } =\r\n                    await noticeServices.getAdvancedNotics();\r\n                if (status === Configs.Status.Successful) {\r\n                    //return data.notices;\r\n                    if (data.notices.length) setNotices(data.notices.reverse());\r\n                    //if all is empty\r\n                    else\r\n                        setNotices([\r\n                            { title: \"پیام\", text: \"اطلاعیه جدیدی وجود ندارد\" },\r\n                        ]);\r\n                }\r\n            } catch (err) {\r\n                setNotices([\r\n                    {\r\n                        title: \"خطا\",\r\n                        text: \"...مشکلی حین بارگذاری اطلاعیه ها پیش آمد. دوباره امتحان کنید\",\r\n                    },\r\n                ]);\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [updateTrigger]);\r\n\r\n    //***** in server implemented a middleware for this, is this needed? */\r\n    if (player && isAllowed === undefined) {\r\n        //in admin tools pages: admin status is checked directly dor completely making sure that user is admin and he/her is trusted directly from server\r\n        (async () => {\r\n            try {\r\n                const { data, status } = await userServices.isAdministrator(\r\n                    player.userID\r\n                );\r\n                if (status === Configs.Status.Successful) return data.answer;\r\n                return false;\r\n            } catch (err) {\r\n                //CHECK THIS PART\r\n                return false;\r\n            }\r\n        })()\r\n            .then((answer) => {\r\n                setAllowed(answer);\r\n            })\r\n            .catch((err) => {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"مشکلی در تعیین سطح دسترسی شما بوجود آمد. لطفا مجددا تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n            });\r\n    }\r\n\r\n    // show proper message for simple users\r\n    if (!player || isAllowed === false) {\r\n        //in first render a wronge message will be shown! find a fix\r\n        //2nd condition must be exactly the same\r\n        toast.warn(\"متاسفانه شما مجوز دسترسی به این صفحه را ندارید.\", {\r\n            position: \"top-left\",\r\n            closeOnClick: true,\r\n        });\r\n        return null;\r\n    }\r\n\r\n    //runs when create notice button clicks\r\n    const createNewNotice = async () => {\r\n        //add patern and stuff to states and inputs\r\n        try {\r\n            setLoading(true);\r\n            const { status } = await noticeServices.createNotice({\r\n                title,\r\n                text,\r\n                startDate: new Date(startDate),\r\n                endDate: new Date(endDate),\r\n            });\r\n            //*********** */\r\n            //COMPLETELY CHECK NOTICE IN CLIENT AND SERVER\r\n            if (status === Configs.Status.CreatedSuccessfully) {\r\n                toast.success(`اطلاعیه ی ${title} با موفقیت ساخته شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره اطلاعیه بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selecteNotice = (notice) => {\r\n        // console.log(notice);\r\n        setSelectedNoticeID(notice._id);\r\n        setTitle(notice.title);\r\n        setText(notice.text);\r\n        setStartDate(new Date(notice.startDate));\r\n        setEndDate(new Date(notice.endDate));\r\n    };\r\n\r\n    const cancelEditing = () => {\r\n        resetStates();\r\n    };\r\n\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        if (!selectedNoticeID) return;\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await noticeServices.editNotice(\r\n                selectedNoticeID,\r\n                { title, text, startDate, endDate }\r\n            );\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`اطلاعیه ی ${title} با مورفقیت ویرایش شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                resetStates();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n    // if admin status is checked directly by server then start rendering the page\r\n    //consists two part\" right part => used for creating and editing notices\r\n    //left part lists all notices and allows admin to select one => after selecting the notice will be ready to be edited on right side\r\n\r\n    //edit all heights in control panel\r\n    //add patern and stuff to states and inputs\r\n    return (\r\n        <Fragment>\r\n            {player && isAllowed && (\r\n                <Row style={{ height: \"100%\" }}>\r\n                    <LoadingBar loading={loading} />\r\n                    <Col xs={5}>\r\n                        <Card\r\n                            style={{ height: \"850px\" }}\r\n                            border=\"success\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه جدید\r\n                            </Card.Header>\r\n                            <Card.Body className=\"text-right\">\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    عنوان اطلاعیه\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    value={title}\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    className=\"my-1 mx-auto\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"عنوان\"\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-auto\">\r\n                                    توضیحات\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    as=\"textarea\"\r\n                                    className=\"my-1 mx-auto h-25\"\r\n                                    placeholder=\"متن کامل اطلاعیه را وارد کنید\"\r\n                                    value={text}\r\n                                    required=\"requires\"\r\n                                    onChange={(e) => setText(e.target.value)}\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ شروع نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto w-100\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={startDate}\r\n                                    onChange={setStartDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                                <Form.Label className=\"my-1 mx-2\">\r\n                                    تاریخ پایان نمایش\r\n                                </Form.Label>\r\n\r\n                                <DatePicker\r\n                                    className=\"my-1 mx-auto\"\r\n                                    calendar={persian}\r\n                                    locale={persian_fa}\r\n                                    calendarPosition=\"bottom-right\"\r\n                                    value={endDate}\r\n                                    onChange={setEndDate}\r\n                                    required=\"requires\"\r\n                                />\r\n                                <hr />\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                                {!selectedNoticeID ? (\r\n                                    <Button\r\n                                        block\r\n                                        variant=\"success\"\r\n                                        onClick={createNewNotice}>\r\n                                        <i\r\n                                            className=\"fa fa-floppy-o px-3\"\r\n                                            aria-hidden=\"true\"></i>\r\n                                        ایجاد اطلاعیه\r\n                                    </Button>\r\n                                ) : (\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-primary\"\r\n                                                onClick={saveChanges}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                ذخیره تغییرات\r\n                                            </Button>\r\n                                        </Col>\r\n                                        <Col>\r\n                                            <Button\r\n                                                block\r\n                                                variant=\"outline-warning text-secondary\"\r\n                                                onClick={cancelEditing}>\r\n                                                <i\r\n                                                    className=\"fa fa-floppy-o px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                لغو ویرایش\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )}\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xs={7}>\r\n                        <Card\r\n                            border=\"info\"\r\n                            bg=\"transparent\"\r\n                            className=\"mx-auto noticeManagerCard\">\r\n                            <Card.Header className=\"text-center\">\r\n                                اطلاعیه های قبلی\r\n                            </Card.Header>\r\n                            <Card.Body\r\n                                style={{ overflowY: \"scroll\" }}\r\n                                className=\"text-right\">\r\n                                {notices.map((notice) => {\r\n                                    return (\r\n                                        <Fragment>\r\n                                            <Alert variant=\"secondary\">\r\n                                                <i\r\n                                                    className=\"fa fa-info-circle px-3\"\r\n                                                    aria-hidden=\"true\"></i>\r\n                                                <span\r\n                                                    style={{\r\n                                                        color: \"red\",\r\n                                                        fontSize: \"18px\",\r\n                                                    }}>\r\n                                                    {notice.title}\r\n                                                </span>\r\n                                                : {notice.text}\r\n                                                <i\r\n                                                    className=\"iconEditNotice fa fa-pencil-square-o px-3\"\r\n                                                    aria-hidden=\"true\"\r\n                                                    onClick={() =>\r\n                                                        selecteNotice(notice)\r\n                                                    }></i>\r\n                                            </Alert>\r\n                                            <hr />\r\n                                        </Fragment>\r\n                                    );\r\n                                })}\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default NoticeManager;\r\n","import { Fragment, useState, useEffect } from \"react\";\r\nimport { Button, Card, Form, Col, Row } from \"react-bootstrap\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nimport \"./controlpanel.css\";\r\nimport userServices from \"./../services/http/userServices\";\r\nimport Configs from \"../services/configs\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TriggerRecordUpdate } from \"../dashboard/actions\";\r\n\r\nconst MODES = { READ_ONLY: 0, EDIT: 1, CHANGE_PASS: 2 };\r\nconst AccountCredentials = () => {\r\n    //states\r\n\r\n    const [fullname, setFullname] = useState(\"\");\r\n    const [studentID, setStudentID] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loading, setLoading] = useState(\"\");\r\n    const [pageMode, setPageMode] = useState(MODES.READ_ONLY); //  0 => read only, 1 => edit mode, 2 => change password\r\n    const [pageUpdateTrigger, triggerPageUpdate] = useState(false); // true <=> false -> triggers page , ==> see useEffect\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    //on component mount download user credentials\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            try {\r\n                setLoading(true);\r\n                const { status, data } = await userServices.getMyCredentials();\r\n                if (status === Configs.Status.Successful) {\r\n                    const { me } = data;\r\n                    setFullname(me.fullname);\r\n                    setStudentID(me.studentID);\r\n                    setEmail(me.email);\r\n                }\r\n            } catch (err) {\r\n                if (!Configs.Status.isErrorExpected(err))\r\n                    toast.error(\r\n                        \"حین دریافت اطلاعات کاربر ایرادی پیش آمد. ... لطفا دوباره تلاش کنید.\",\r\n                        { position: \"top-left\", closeOnClick: true }\r\n                    );\r\n                setLoading(false);\r\n            }\r\n            setLoading(false);\r\n        })();\r\n    }, [pageUpdateTrigger]);\r\n\r\n    const reloadPage = () => {\r\n        setLoading(false);\r\n        setPageMode(MODES.READ_ONLY);\r\n        triggerPageUpdate(!pageUpdateTrigger);\r\n    };\r\n    const saveChanges = async () => {\r\n        //add patern and stuff to states and inputs\r\n        // check all inputs plz\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.editMyCredentials({\r\n                studentID,\r\n                fullname,\r\n                email,\r\n                password,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`تغییرات با موفقیت اعمال شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const changeMyPassword = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const { status } = await userServices.changeMyPassword({\r\n                studentID,\r\n                password,\r\n                newPassword,\r\n            });\r\n            if (status === Configs.Status.Successful) {\r\n                toast.success(`رمز شما با موفقیت تغییر داده شد`, {\r\n                    position: \"top-right\",\r\n                    closeOnClick: true,\r\n                });\r\n                dispatch(TriggerRecordUpdate());\r\n                reloadPage();\r\n            }\r\n        } catch (err) {\r\n            if (!Configs.Status.isErrorExpected(err))\r\n                toast.error(\r\n                    \"خطایی در ذخیره تغییرات بوجود امد ... لطفا دوباره تلاش کنید\",\r\n                    { position: \"top-left\", closeOnClick: true }\r\n                );\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    const selectMode = (e) => {\r\n        e.preventDefault();\r\n        switch (pageMode) {\r\n            case MODES.EDIT:\r\n                saveChanges();\r\n                return;\r\n            case MODES.CHANGE_PASS:\r\n                changeMyPassword();\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    const checkConfirmPassword = (event) => {\r\n        setConfirmNewPassword(event.target.value);\r\n        if (newPassword !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور جدید باید با خود رمز عبور جدید مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n\r\n    // *************************** DESIGN NOTE *******/\r\n    // HOW ABOUT USING TABS ? <Tabs>\r\n    return (\r\n        <Fragment>\r\n            <Card\r\n                border=\"secondary\"\r\n                bg=\"transparent\"\r\n                className=\"mx-auto userInfoCard\">\r\n                <Card.Header className=\"text-center\">\r\n                    <Row className=\"w-50 mx-auto\">\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.READ_ONLY)}\r\n                                variant={`${\r\n                                    !pageMode\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.READ_ONLY && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                فقط مشاهده\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.EDIT)}\r\n                                variant={`${\r\n                                    pageMode === MODES.EDIT\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.EDIT && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                ویرایش\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button\r\n                                block\r\n                                onClick={() => setPageMode(MODES.CHANGE_PASS)}\r\n                                variant={`${\r\n                                    pageMode === MODES.CHANGE_PASS\r\n                                        ? \"outline-primary\"\r\n                                        : \"outline-secondary\"\r\n                                }`}>\r\n                                {pageMode === MODES.CHANGE_PASS && (\r\n                                    <i\r\n                                        className=\"fa fa-dot-circle-o px-2\"\r\n                                        aria-hidden=\"true\"></i>\r\n                                )}\r\n                                تغییر رمز عبور\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Header>\r\n                <Form onSubmit={(e) => selectMode(e)}>\r\n                    <Card.Body className=\"w-50 mx-auto\">\r\n                        <LoadingBar loading={loading} />\r\n\r\n                        {pageMode !== MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        شماره دانشجویی\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        disabled\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"Student ID\"\r\n                                        value={studentID}\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        نام کاربر\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        disabled={!pageMode}\r\n                                        type=\"text\"\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        pattern=\"[آ-ی ]{6,}\" // persian characters and space\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                            )\r\n                                        }\r\n                                        placeholder=\"Full Name\"\r\n                                        value={fullname}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setFullname(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        ایمیل\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"email\"\r\n                                        disabled={!pageMode}\r\n                                        pattern=\".{6,}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"E-mail\"\r\n                                        value={email}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setEmail(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                        {pageMode !== MODES.READ_ONLY && (\r\n                            <Form.Group className=\"form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    {`رمز عبور ${\r\n                                        pageMode === MODES.CHANGE_PASS\r\n                                            ? \"فعلی\"\r\n                                            : \"\"\r\n                                    }`}\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"userInfoTextBox w-75\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        setPassword(e.target.value)\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                        )}\r\n                        {pageMode === MODES.CHANGE_PASS && (\r\n                            <>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        رمز عبور جدید\r\n                                    </Form.Label>\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        pattern=\".{6,15}\"\r\n                                        onInput={(e) =>\r\n                                            e.target.setCustomValidity(\"\")\r\n                                        }\r\n                                        onInvalid={(e) =>\r\n                                            e.target.setCustomValidity(\r\n                                                \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                            )\r\n                                        }\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"New Password\"\r\n                                        value={newPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(e) =>\r\n                                            setNewPassword(e.target.value)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                                <Form.Group className=\"form-inline\">\r\n                                    <Form.Label className=\"w-25\">\r\n                                        تایید رمز عبور جدید\r\n                                    </Form.Label>\r\n\r\n                                    <Form.Control\r\n                                        type=\"password\"\r\n                                        className=\"userInfoTextBox w-75\"\r\n                                        placeholder=\"Confirm New Password\"\r\n                                        value={confirmNewPassword}\r\n                                        required=\"required\"\r\n                                        onChange={(event) =>\r\n                                            checkConfirmPassword(event)\r\n                                        }\r\n                                    />\r\n                                </Form.Group>\r\n                            </>\r\n                        )}\r\n                    </Card.Body>\r\n                    <Card.Footer>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            disabled={!pageMode}\r\n                            block\r\n                            variant=\"success\"\r\n                            className=\"w-50 mx-auto\">\r\n                            <i\r\n                                className=\"fa fa-wrench px-2\"\r\n                                aria-hidden=\"true\"></i>\r\n                            ثبت تغییرات\r\n                        </Button>\r\n                    </Card.Footer>\r\n                </Form>\r\n            </Card>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AccountCredentials;\r\n","import { Component } from \"react\";\r\nimport ScoresTable from \"./tables/scores/ScoresTable\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport GameRules from \"./informations/GameRules\";\r\nimport ContactInfo from \"./informations/ContactInfo\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./common/MainLayout\";\r\nimport Ranking from \"./tables/ranking/Ranking\";\r\nimport ControlPanel from './controlpanel/ControlPanel';\r\nimport GameDeck from './games/GameDeck';\r\nimport NoticeManager from './controlpanel/NoticeManager';\r\nimport AccountCredentials from './controlpanel/AcountCredentials';\r\n\r\nclass App extends Component {\r\n    // 1. use uuid to produce ids\r\n    // state = {  }\r\n    \r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path=\"/signUp\" component={SignUp} />\r\n                    <Route path=\"/gameDeck\" component={GameDeck} />\r\n                    <Route path=\"/ranking\" component={Ranking} />\r\n                    <Route path=\"/gameRules\" component={GameRules} />\r\n                    <Route path=\"/contactInfo\" component={ContactInfo} />\r\n                    <Route path=\"/controlPanel/info\" component={AccountCredentials} />\r\n                    <Route path=\"/controlPanel/admin/notices\" component={NoticeManager} />\r\n                    <Route path=\"/controlPanel\" exact component={ControlPanel} />\r\n                    <Route path=\"/\" exact component={ScoresTable} />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\nimport { toolsReducer } from \"./tools\";\r\nimport { statisticsReducer } from \"./statistics\";\r\nimport { messageReducer } from './message';\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer,\r\n    tools: toolsReducer,\r\n    statistics: statisticsReducer,\r\n    message: messageReducer\r\n});","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n\r\n        case \"UPDATE_ME\":\r\n            return null; //sets state.player => null, forces Mainlayout to reload and update state.player data\r\n\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = {name: null, type: null}, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {name, type} = action.payload;            \r\n            return {name, type};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        case \"RESET_ROOM\":\r\n            return {name: null, type: null}\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","export const toolsReducer = (\r\n    state = {\r\n        updateTriggered: false,\r\n        opponentSearchTriggered: false,\r\n        friendRequest: false,\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"TRIGGER_UPDATE\":\r\n            return {\r\n                updateTriggered: !state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger update\r\n        case \"TRIGGER_OPPONENT_SEARCH\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: !state.opponentSearchTriggered,\r\n                friendRequest: null,\r\n            }; //trigger search\r\n        case \"SEND_FRIEND_REQUEST\":\r\n            return {\r\n                updateTriggered: state.updateTriggered,\r\n                opponentSearchTriggered: state.opponentSearchTriggered,\r\n                friendRequest: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","\r\nexport const statisticsReducer = (state = {players: 0, games: 0}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_STATISTICS\":\r\n            const {players, games} = action.payload;\r\n            return {players, games};\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n};","export const messageReducer = (\r\n    state = { sent: null, recieved: null },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case \"RECIEVE_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log(action.payload);\r\n                return { recieved: { name, friendID, text }, sent: state.sent };\r\n            }\r\n        case \"SEND_MESSAGE\":\r\n            {\r\n                const { friendID, name, text } = action.payload;\r\n                console.log('payload', action.payload);\r\n                return { sent: { name, friendID, text }, recieved: state.recieved };\r\n            }\r\n        case \"RESET_MESSAGES\":\r\n            {\r\n                return { sent: null, recieved: null };\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n","const Routes = require('./server');\r\nconst Status = require('./status');\r\nconst BrowserStorage = require('./browser');\r\nconst GameSetting = require('./gamesetting');\r\n\r\n//all configs\r\nmodule.exports = {\r\n    BrowserStorage,\r\n    Routes,\r\n    Status,\r\n    GameSetting\r\n}","//server routes\r\nmodule.exports = {\r\n    Root: \"https://t3dweb.herokuapp.com\",\r\n    WebSocketRoot: \"wss://t3dweb.herokuapp.com\",\r\n    wsGamePlayRoute: \"gameplay\",\r\n    wsGlobalRoute: \"global\",\r\n    SignUp: \"signup\",\r\n    SignIn: \"signin\",\r\n    Users: \"users\",\r\n    Credentials: \"credentials\",\r\n    PasswordChange: \"password\",\r\n    Friends: 'friends',\r\n    Public: \"public\",\r\n    Administrators: \"administrators\",\r\n    Games: \"games\",\r\n    Notices: \"notices\",\r\n    NoticeManagement: \"manage\"\r\n};\r\n","const isErrorExpected = (error) => {\r\n    return (\r\n        error.response &&\r\n        error.response.status >= 400 && // >= 400\r\n        error.response.status < 500\r\n    );\r\n};\r\n\r\nmodule.exports = {\r\n    Successful: 200,\r\n    CreatedSuccessfully: 201,\r\n    BadRequest: 400,\r\n    Unauthorized: 401,\r\n    Forbidden: 403,\r\n    NotFound: 404,\r\n    NotAcceptable: 406,\r\n    Conflict: 409,\r\n    UnprocessableEntity: 422,\r\n    InternalServerError: 500,\r\n    isErrorExpected,\r\n};\r\n","//browser storage keywords\r\n\r\nmodule.exports = {\r\n    Token: \"ptk\",\r\n    ID: \"pid\"\r\n}"],"sourceRoot":""}