{"version":3,"sources":["tables/SingleScoreCard.jsx","tables/AllScores.jsx","services/httpService.js","services/userServices.js","services/gameServices.js","tables/ScoresTable.jsx","informations/GameRules.jsx","informations/ContactInfo.jsx","common/LoadingBar.jsx","users/ModalSignIn.jsx","users/SignUp.jsx","common/NavigationBar.jsx","sidebars/SignInSideBar.jsx","sidebars/NewsSideBar.jsx","common/SmartPhoneNavigationBar.jsx","sidebars/no-avatar.png","sidebars/PlayerInfoSideBar.jsx","dashboard/actions/index.js","common/MainLayout.jsx","tables/SinglePlayerCard.jsx","tables/AllPlayers.jsx","tables/Ranking.jsx","users/ControlPanel.jsx","services/socketServices.js","dashboard/withReduxDashboard.js","games/GamePlay.jsx","games/RoomManager.jsx","games/GameDeck.jsx","App.js","dashboard/reducers/index.js","dashboard/reducers/player.js","dashboard/reducers/opponent.js","dashboard/reducers/room.js","dashboard/reducers/scoreboard.js","dashboard/store/index.js","index.js"],"names":["SingleScoreCard","gameType","playerXName","playerOName","xScore","oScore","xBadgeColor","oBadgeColor","className","id","AllScores","scores","console","log","map","score","xName","oName","gameID","axios","defaults","headers","post","put","interceptors","request","use","config","token","sessionStorage","getItem","Authorization","error","Promise","reject","response","STATUS","expectedErrors","status","toast","position","closeOnClick","http","get","delete","userServices","signUp","user","serverRoot","usersRoute","signupRoute","JSON","stringify","signIn","signinRoute","getPlayer","userID","getAllPlayers","saveUser","setItem","readUserID","gameServices","getAllResults","gamesRoute","loadPlayerData","a","data","resolve","player","ScoresTable","state","liveScores","finalScores","showLiveOnes","loading","btnShowLiveScores","setState","btnShowFinalScores","SUCCESSFULL","gameResults","then","result","filter","game","isLive","catch","err","this","onClick","Component","GameRules","ContactInfo","href","LoadingBar","useLayoutEffect","document","body","style","overflowY","height","time","customLoading","ModalSignIn","showModal","studentID","password","onCloseClick","onShowClick","onSignInSubmitted","event","preventDefault","AUTHENTICATION_INVALID","Number","props","history","replace","onForgotPasswordClick","Button","variant","Modal","show","onHide","Header","closeButton","Body","Form","onSubmit","Group","Label","Control","type","placeholder","value","onChange","e","target","controlId","withRouter","SignUp","confirmPassword","firstname","lastname","email","checkConfirmPassword","setCustomValidity","onSignUpSubmit","trim","length","USER_CREATED","ALREADY_EXISTS","newUser","fullname","success","warn","pattern","onInput","onInvalid","required","NavigationBar","useSelector","to","exact","activeClassName","float","SignInSideBar","NewsSideBar","SmartPhoneNavigationBar","PlayerInfoSideBar","inGame","src","noAvatar","alt","Alert","index","Heading","shape","records","points","wins","loses","draws","LoadMe","payload","SetRoom","room","pathname","location","opponent","scoreboard","dispatch","useDispatch","deviceIsDesktop","useMediaQuery","query","deviceIsSmartPhone","deviceIsTablet","pageLeftSideBars","pageRightSideBar","me","opp","children","SinglePlayerCard","rowNumber","name","scope","AllPlayers","players","Card","border","width","borderRadius","findIndex","p","Ranking","tempPlayers","sort","p1","p2","ControlPanel","onSignOutClick","createSocketRequest","roomName","playerID","msg","socketServices","connect","server","WebSocket","webSocketRoot","onopen","send","onerror","close","onclose","withReduxDashboard","component","LoadOpponent","UpdateMyRecords","ResetOpponent","SetGameID","UpdateScoreboard","details","CleanScoreboard","GamePlay","rowMarginRatio","color","lineColor","turn","dimension","table","myTurn","undefined","socketConnection","LoadOpponentData","opponentID","updateGameScorebaord","oppTurn","socketOnMessage","parse","command","IDs","opponentIndex","newMove","cell","cellID","verifyAndApplyTheMove","cellButtons","focus","endGame","forceConnectToWebSocket","nextJob","socket","onmessage","setTimeout","updateMarginParameters","divTableBlock","offsetWidth","onTableBlockResize","initiateGameTimer","setInterval","window","navigator","onLine","connectionLost","getCellCoordinates","dimen","onFloorId","floor","Math","row","column","onEachCellClick","selectedCellButton","cellButton","tempTable","innerHTML","inspectAreaAroundTheCell","playerInTheCell","rowCount","columnCount","floorMainDiagCount","floorSideDiagCount","tableMainDiagCount","tableSideDiagCount","tableAltitudeCount","i","connectTheScoreLines","count","firstCell","step","info","drawGameTable","dimens","push","marginLeft","getElementsByClassName","getElementById","addEventListener","RoomManager","useState","setRoomName","setGameType","onStartGameClick","padding","checked","GameDeck","App","path","reducers","combineReducers","action","clear","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render"],"mappings":"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","file":"static/js/main.74313464.chunk.js","sourcesContent":["import \"./tables.css\";\r\n\r\nconst SingleScoreCard = ({gameType, playerXName, playerOName, xScore, oScore }) => {\r\n    // format score text:\r\n    let xBadgeColor = null;\r\n    let oBadgeColor = null; // null means default badge color\r\n\r\n    if (xScore > oScore) {\r\n        // x won\r\n        xBadgeColor = \"badge-success\";\r\n        oBadgeColor = \"badge-danger\";\r\n    } else if (xScore === oScore) {\r\n        //draw\r\n        xBadgeColor = \"badge-warning\";\r\n        oBadgeColor = \"badge-warning\";\r\n    } else {\r\n        // o won\r\n        oBadgeColor = \"badge-success\";\r\n        xBadgeColor = \"badge-danger\";\r\n    }\r\n\r\n    // make this card 'bg-transparent' too?\r\n    return (\r\n        <div className=\"card border-info mb-3 scoreCard\">\r\n            <div className=\"card-header text-center border-info\">{`T3D ${gameType}x${gameType}x${gameType}`}</div>\r\n            <div className=\"card-body\">\r\n                <div className=\"row text-center mx-auto\">\r\n                    <span className=\"col-5\">{playerXName}</span>\r\n                    <span\r\n                        className={`badge badge-pill ${xBadgeColor} scoreBadge col-1`}>\r\n                        {xScore < 10 ? `0${xScore}` : `${xScore}`}\r\n                    </span>\r\n\r\n                    <span\r\n                        className={`badge badge-pill ${oBadgeColor} scoreBadge col-1`}>\r\n                        {oScore < 10 ? `0${oScore}` : `${oScore}`}\r\n                    </span>\r\n                    <span className=\"col-5\">{playerOName}</span>\r\n                </div>\r\n            </div>\r\n            <button\r\n                id=\"btnReplayGame\"\r\n                className=\"btn btn-outline-info btn-lg btn-block\">\r\n                بازپخش بازی\r\n            </button>\r\n            {/*1st method: pass key to the score.jsx and find the specific game to replay\r\n            2nd method: pass replay function from AllScore.jsx to Score.jsx ? */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SingleScoreCard;\r\n","import { Fragment } from \"react\";\r\nimport SingleScoreCard from \"./SingleScoreCard\";\r\n\r\nconst AllScores = ({scores}) => {\r\n    console.log(scores);\r\n    return ( \r\n        <Fragment>\r\n            { scores.map(score => (\r\n                <SingleScoreCard key={score.gameID}\r\n                    gameType={score.gameType}\r\n                    playerXName={score.xName}\r\n                    playerOName={score.oName}\r\n                    xScore={score.xScore}\r\n                    oScore={score.oScore}\r\n                ></SingleScoreCard>\r\n            )) }\r\n        </Fragment>\r\n     );\r\n};\r\n \r\nexport default AllScores;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.headers.put[\"Content-Type\"] = \"application/json\";\r\n\r\n// put token in all request headers:\r\naxios.interceptors.request.use( config => {\r\n    const token = sessionStorage.getItem(\"token\");\r\n    if (token)\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    else\r\n        config.headers.Authorization = null;\r\n    // console.log(config.headers.Authorization);\r\n    return config;\r\n}, error => {\r\n    // what to do?\r\n    return Promise.reject(error);\r\n});\r\n// what the f should i do?\r\n// (() => {\r\n//     const token = sessionStorage.getItem(\"token\");\r\n//     if (token)\r\n//         axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n//     else {\r\n//         delete axios.defaults.headers.common[\"Authorization\"];\r\n//         /*if setting null does not remove `Authorization` header then try     \r\n//               delete axios.defaults.headers.common['Authorization'];\r\n//             */\r\n//     }\r\n//     console.log(\"token\", token);\r\n// })();\r\n\r\naxios.interceptors.response.use(null, (error) => {\r\n    const STATUS = { AUTHENTICATION_INVALID: 401, INPUT_INVALID: 422 };\r\n    const expectedErrors =\r\n        error.response &&\r\n        error.response.status >= 400 &&\r\n        error.response.status < 500;\r\n\r\n    if (error.response.status === STATUS.AUTHENTICATION_INVALID) {\r\n        toast.error(\"شماره دانشجویی یا رمز عبور نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (error.response.status === STATUS.INPUT_INVALID) {\r\n        toast.error(\"فرمت ورودی نادرست است\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    } else if (!expectedErrors) {\r\n        // console.log(error);\r\n        toast.error(\"مشکلی از سمت سرور رخ داده است.\", {\r\n            position: \"top-right\",\r\n            closeOnClick: true,\r\n        });\r\n    }\r\n\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst http = {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n};\r\n\r\nexport default http;\r\n","import http from \"./httpService\";\r\nimport config from \"./config.json\";\r\n\r\nconst userServices = {\r\n    signUp: (user) => {\r\n        return http.post(\r\n            `${config.serverRoot}/${config.usersRoute}/${config.signupRoute}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    signIn: (user) => {\r\n        return http.post(\r\n            `${config.serverRoot}/${config.usersRoute}/${config.signinRoute}`,\r\n            JSON.stringify(user)\r\n        );\r\n    },\r\n    getPlayer: (userID) => {\r\n        return http.get(`${config.serverRoot}/${config.usersRoute}/${userID}`);\r\n    },\r\n    getAllPlayers: () => {\r\n        return http.get(`${config.serverRoot}/${config.usersRoute}`);\r\n    },\r\n    saveUser: (id, token) => {\r\n        // use remember me option\r\n        sessionStorage.setItem(\"uid\", id); // localStorage or sessionStorage?\r\n        sessionStorage.setItem(\"token\", token);\r\n    },\r\n    readUserID: () => {\r\n        // consider local storage\r\n        return sessionStorage.getItem(\"uid\");\r\n    },\r\n};\r\n\r\nexport default userServices;\r\n","import config from \"./config.json\";\r\nimport http from \"./httpService\";\r\nimport userServices from \"./userServices\";\r\n\r\nconst gameServices = {\r\n    \r\n    getAllResults: () => {\r\n        return http.get(`${config.serverRoot}/${config.gamesRoute}`);\r\n    },\r\n    loadPlayerData: async (userID) => {\r\n        if (userID) var { data, status } = await userServices.getPlayer(userID);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const STATUS = { SUCCESSFULL: 200 };\r\n            if (userID === null) reject(null);\r\n            if (status === STATUS.SUCCESSFULL) resolve(data.player);\r\n            reject(null); //create a guest profile\r\n        });\r\n    },\r\n};\r\n\r\nexport default gameServices;\r\n","import './tables.css';\r\nimport { Component } from 'react';\r\nimport AllScores from './AllScores';\r\nimport gameServices from './../services/gameServices';\r\n\r\n\r\nclass ScoresTable extends Component {\r\n    state = { \r\n        liveScores: [ ],\r\n        finalScores: [ ],\r\n        showLiveOnes: false,\r\n        loading: false\r\n     };\r\n\r\n     componentDidMount() {\r\n         // get all game results , live or final, handling promises\r\n         // client and server side for this Module seriously need to be edited\r\n        (async () => {\r\n            this.setState({ loading: true }); // use preloader here?\r\n            const STATUS = { SUCCESSFULL: 200 };\r\n            const { data, status } = await gameServices.getAllResults();\r\n            if (status === STATUS.SUCCESSFULL) return data.gameResults;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                this.setState({liveScores: result.filter(game => game.isLive), finalScores: result.filter(game => !game.isLive), loading: false});\r\n                //EDIT EDIT EDIT\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ finalScores: [], loading: false });\r\n            });\r\n    }\r\n\r\n    btnShowLiveScores = () => {\r\n        this.setState({showLiveOnes: true});\r\n\r\n    }\r\n\r\n    btnShowFinalScores = () => {\r\n        this.setState({showLiveOnes: false});\r\n    }\r\n\r\n    render() {\r\n        // game replay? is it a good idea DataBase Size-Wise ? ===> if true: see 1st page of the notebook\r\n        /* add a NextGames button maybe? (گزینه بازی های اینده) */\r\n        let {liveScores, finalScores, showLiveOnes} = this.state;\r\n\r\n        return ( \r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className='col-6'>\r\n                       <button\r\n                        className={`scoresTypeSelectButton btn ${showLiveOnes ? `btn-outline-success` : `btn-outline-primary`}`}\r\n                        onClick={this.btnShowLiveScores}  >نتایج زنده</button>\r\n                    </div>\r\n                    <div className='col-6'>\r\n                        <button \r\n                            className={`scoresTypeSelectButton btn ${showLiveOnes ? `btn-outline-primary` : `btn-outline-success`}`}\r\n                            onClick={this.btnShowFinalScores}  >نتایج نهایی</button> \r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12\">\r\n                        <AllScores scores={showLiveOnes? liveScores : finalScores} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default ScoresTable;","import './info.css'\r\n\r\nconst GameRules = () => {\r\n    return ( \r\n        <div className=\"card border-warning mb-3 singleCard\" >\r\n            <div className=\"card-header text-center border-warning\">قوانین بازی</div>\r\n            <div className=\"card-body text-right\">\r\n                <p>سطر اول</p>\r\n                <p>سطر دوم</p>\r\n                <p>سطر سوم</p>\r\n                <p>سطر چهارم</p>\r\n                <p>سطر پنجم</p>\r\n                <p>سطر ششم</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GameRules;","import './info.css'\r\n\r\nconst ContactInfo = () => {\r\n    return ( \r\n        <div className=\"card border-dark mb-3 singleCard\" >\r\n            <div className=\"card-header text-center border-dark\">اطلاعات تماس</div>\r\n            <div className=\"card-body text-center\">\r\n                <p>دانشگاه علم و صنعت ایران</p>\r\n                <p>E-mail: <a href=\"https://mail.google.com\">thcplusplus@gmail.com</a></p>\r\n                <p>Phone Number: 0000000000000</p>\r\n                <p>اطلاعات تماس استاد</p>\r\n                <p>instagram: ......</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ContactInfo;","import { useLayoutEffect } from \"react\";\r\nimport { Planets } from \"react-preloaders2\";\r\n\r\nconst LoadingBar = ({ loading }) => {\r\n    useLayoutEffect(() => {\r\n        document.body.style = { overflowY: \"auto\" };\r\n        document.body.style = { height: \"auto\" };\r\n    }, [loading]);\r\n\r\n    return <>{loading ? <Planets time={0} customLoading={loading} /> : null}</>;\r\n};\r\n\r\nexport default LoadingBar;\r\n","import { Button, Form, Modal } from \"react-bootstrap\";\r\nimport { Component, Fragment } from \"react\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\nclass ModalSignIn extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        showModal: false,\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    onCloseClick = () => this.setState({ showModal: false });\r\n    onShowClick = () => this.setState({ showModal: true });\r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const STATUS = { SUCCESSFULL: 200, AUTHENTICATION_INVALID: 401 };\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password};\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === STATUS.SUCCESSFULL) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (ex) {\r\n            // check nonserver errors\r\n            this.setState({ password: \"\" });\r\n            //toast.error('.ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.', {position: 'top-right', closeOnClick: true});\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    onForgotPasswordClick = () => {};\r\n\r\n    render() {\r\n        const { showModal, studentID, password, loading } = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <LoadingBar loading={loading} />\r\n                <Button variant=\"outline-primary\" onClick={this.onShowClick}>\r\n                    ورود کاربران\r\n                </Button>\r\n\r\n                <Modal show={showModal} onHide={this.onCloseClick}>\r\n                    <Modal.Header closeButton></Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form\r\n                            className=\"m-4 text-right\"\r\n                            onSubmit={(event) => this.onSignInSubmitted(event)}\r\n                        >\r\n                            <Form.Group className=\"mb-3 form-inline\">\r\n                                <Form.Label className=\"w-25\">\r\n                                    شماره دانشجویی\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Student ID\"\r\n                                    value={studentID}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            studentID: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group\r\n                                className=\"mb-3 form-inline\"\r\n                                controlId=\"formBasicPassword\"\r\n                            >\r\n                                <Form.Label className=\"w-25\">\r\n                                    رمز عبور\r\n                                </Form.Label>\r\n                                <Form.Control\r\n                                    type=\"password\"\r\n                                    className=\"w-75 text-left\"\r\n                                    placeholder=\"Password\"\r\n                                    value={password}\r\n                                    onChange={(e) =>\r\n                                        this.setState({\r\n                                            password: e.target.value,\r\n                                        })\r\n                                    }\r\n                                />\r\n                            </Form.Group>\r\n                            <>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    type=\"submit\"\r\n                                    variant=\"outline-success\"\r\n                                >\r\n                                    ورود\r\n                                </Button>\r\n                                <Button\r\n                                    className=\"w-50\"\r\n                                    variant=\"outline-info\"\r\n                                    onClick={this.onForgotPasswordClick}\r\n                                >\r\n                                    فراموشی رمز\r\n                                </Button>\r\n                            </>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ModalSignIn);\r\n","import React, { Component } from \"react\";\r\nimport ModalSignIn from \"./ModalSignIn\";\r\nimport \"./users.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nclass SignUp extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    // 2. first and last name must be persian text so make the direction correct and force persian chars\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        email: \"\",\r\n        loading: false,\r\n    };\r\n\r\n    checkConfirmPassword = (event) => {\r\n        this.setState({ confirmPassword: event.target.value });\r\n        if (this.state.password !== event.target.value) {\r\n            event.target.setCustomValidity(\r\n                \"تایید رمز عبور باید با خود رمز عبور مطابقت کامل داشته باشد\"\r\n            );\r\n            //console.log(password, confirmPassword);\r\n        } else event.target.setCustomValidity(\"\");\r\n    };\r\n    onSignUpSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n        } = this.state;\r\n        if (firstname.trim().length < 3 || lastname.trim().length < 3) {\r\n            toast.error(\"نام و نام خانوادگی باید حداقل شام سه حرف فارسی باشد\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n            this.setState({\r\n                firstname: firstname.trim(),\r\n                lastname: lastname.trim(),\r\n            });\r\n            return;\r\n        }\r\n        const STATUS = { USER_CREATED: 201, ALREADY_EXISTS: 403 };\r\n        if (password === confirmPassword) {\r\n            try {\r\n                this.setState({ loading: true });\r\n                const newUser = {\r\n                    studentID: Number(studentID),\r\n                    password,\r\n                    email,\r\n                    fullname: (firstname + \" \" + lastname).replace(/\\s+/g, \" \"), // correct? (iterative?)\r\n                };\r\n\r\n                const { status, data } = await userServices.signUp(newUser);\r\n\r\n                if (status === STATUS.USER_CREATED) {\r\n                    //console.log(data);\r\n                    toast.success(`ثبت نام با موفقیت انجام شد`, {\r\n                        position: \"top-right\",\r\n                        closeOnClick: true,\r\n                    });\r\n                    userServices.saveUser(data.userID, data.token);\r\n                    this.props.history.replace(\"/\");\r\n                    // this.props.history.replace('/signIn')\r\n                    // ******* change server to return user token and auto sign in\r\n                }\r\n            } catch (ex) {\r\n                // console.log(ex);\r\n                this.setState({ loading: false });\r\n                if (ex.response.status === STATUS.ALREADY_EXISTS) {\r\n                    toast.error(\r\n                        \"کاربری با این شماره دانشجویی یا ایمیل قبلا ثبت نام کرده است\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                    toast.warn(\r\n                        \"اگر رمز عبور خود را فراموش کرده اید، از گزینه بازیابی رمز عبور در صفحه ی ورود استفاده نمایید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                } else {\r\n                    toast.error(\r\n                        \"ثبت نام با مشکل رو به رو شد. لطفا دوباره تلاش کتنید\",\r\n                        {\r\n                            position: \"top-right\",\r\n                            closeOnClick: true,\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        } else {\r\n            toast.error(\"رمز عبورها مطابقت ندارند\", {\r\n                position: \"top-right\",\r\n                closeOnClick: true,\r\n            });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            studentID,\r\n            password,\r\n            confirmPassword,\r\n            firstname,\r\n            lastname,\r\n            email,\r\n            loading,\r\n        } = this.state;\r\n\r\n        return (\r\n            <div className=\"card border-success mb-3 signUpCard\">\r\n                <LoadingBar loading={loading} />\r\n                <div className=\"card-header bg-transparent text-center border-success\">\r\n                    فرم ثبت نام\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <form onSubmit={(event) => this.onSignUpSubmit(event)}>\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">نام</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"First Name\"\r\n                                value={firstname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        firstname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">نام خانوادگی</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                pattern=\"[آ-ی ]{3,}\" // persian characters and space\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"نام خانوادگی باید با حروف فارسی و با حداقل طول سه حرف باشد\"\r\n                                    )\r\n                                }\r\n                                placeholder=\"Last Name\"\r\n                                value={lastname}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        lastname: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">شماره دانشجویی</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                pattern=\"[0-9]{8}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"شماره دانشجویی باید یک عدد 8 رقمی باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Student ID\"\r\n                                value={studentID}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        studentID: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">ایمیل</label>\r\n                            <input\r\n                                type=\"email\"\r\n                                pattern=\".{6,}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"ورودی باید فرمت معتبر ایمیل را رعایت کرده و حداقل 6 کاراکتر باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"E-mail\"\r\n                                value={email}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({ email: e.target.value })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">رمز عبور</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                pattern=\".{6,15}\"\r\n                                onInput={(e) => e.target.setCustomValidity(\"\")}\r\n                                onInvalid={(e) =>\r\n                                    e.target.setCustomValidity(\r\n                                        \"رمز عبور باید حداقل 6 کاراکتر و حداکثر 15 کاراکتر داشته باشد\"\r\n                                    )\r\n                                }\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Password\"\r\n                                value={password}\r\n                                required=\"required\"\r\n                                onChange={(e) =>\r\n                                    this.setState({\r\n                                        password: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">تایید رمز عبور</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"signUpTextBox form-control w-75\"\r\n                                placeholder=\"Confirm Password\"\r\n                                value={confirmPassword}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    this.checkConfirmPassword(event)\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\"\r\n                        >\r\n                            ثبت نام\r\n                        </button>\r\n                    </form>\r\n                    <p className=\"forgot-password text-right mt-5\">\r\n                        اگر قبلا ثبت نام کردی، به صفحه ی <ModalSignIn /> برو !{\" \"}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignUp);\r\n","import { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst NavigationBar = () => {\r\n  const player = useSelector(state => state.player);\r\n\r\n  return (\r\n    // 2. link items theme: make theme better\r\n\r\n    <nav className=\"navbar navbar-expand-lg nav-pills navbar-light bg-light text-right\">\r\n      <div className=\"container text-right\">\r\n        {/* <NavLink className=\"navbar-brand\" to=\"#\">نام بازیکن</NavLink>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"expand\" data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button> */}\r\n        <div className=\"navbar-expand\" id=\"navbarResponsive\">\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <li className=\"nav-item\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/\"\r\n                exact\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                صفحه اصلی\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/gameDeck\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                بازی ها\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/ranking\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                رنکینگ\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/gameRules\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                قوانین\r\n              </NavLink>\r\n            </li>\r\n            <li className=\"nav-item ml-2\">\r\n              <NavLink\r\n                className=\"nav-link text-primary\"\r\n                to=\"/contactInfo\"\r\n                activeClassName=\"btn-outline-secondary text-dark\"\r\n              >\r\n                تماس با ما\r\n              </NavLink>\r\n            </li>\r\n          </ul>\r\n          {/* how to float search bar to right? */}\r\n        </div>\r\n      </div>\r\n      {player ? (\r\n        <NavLink\r\n          style={{ float: \"left\" }}\r\n          className=\"navItems nav-link btn btn-outline-success btn-sm\"\r\n          to=\"/controlPanel\"\r\n        >\r\n          کنترل پنل\r\n        </NavLink>\r\n      ) : (\r\n        <NavLink\r\n          style={{ float: \"left\" }}\r\n          className=\"navItems nav-link btn btn-outline-success btn-sm\"\r\n          to=\"/signUp\"\r\n        >\r\n          ثبت نام\r\n        </NavLink>\r\n      )}\r\n\r\n      {/* <form class=\"searchForm form-inline\">\r\n                    <input class=\" form-control mr-sm-2 bg-dark\" type=\"search\" placeholder=\"دنبال چی می گردی؟\" aria-label=\"Search\" />\r\n                    <button class=\" btn btn-outline-warning fa fa-search\" type=\"submit\"></button>\r\n            </form> */}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import { Component } from \"react\";\r\nimport \"./sidebars.css\";\r\nimport userServices from \"../services/userServices\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nclass SignInSideBar extends Component {\r\n    // *********************Objectives***********************\r\n    // 1. handle errors particularly\r\n    state = {\r\n        studentID: \"\",\r\n        password: \"\",\r\n        loading: false,\r\n    };\r\n    \r\n\r\n    onSignInSubmitted = async (event) => {\r\n        event.preventDefault();\r\n        this.setState({ loading: true });\r\n        const STATUS = { SUCCESSFULL: 200 };\r\n        const { studentID, password } = this.state;\r\n        const user = { studentID: Number(studentID), password };\r\n        try {\r\n            const { status, data } = await userServices.signIn(user);\r\n            if (status === STATUS.SUCCESSFULL) {\r\n                userServices.saveUser(data.userID, data.token);\r\n                this.props.history.replace(\"/\");\r\n            }\r\n        } catch (ex) {\r\n            // check nonserver errors\r\n            // console.log(ex);\r\n            this.setState({ password: \"\" });\r\n            //toast.error('.ورود با مشکل رو به رو شد. لطفا دوباره تلاش کتنید.', {position: 'top-left', closeOnClick: true});\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    \r\n    render() {\r\n        const { studentID, password, loading } = this.state;\r\n        return (\r\n            <div className=\"card signInSidebar border-primary mb-3\">\r\n                <div className=\"card-header text-center text-primary border-primary\">\r\n                    ورود کاربران\r\n                </div>\r\n                <LoadingBar loading={loading} />\r\n                <div className=\"card-body text-primary\">\r\n                    <form onSubmit={(event) => this.onSignInSubmitted(event)}>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"signInSidebarTextBox form-control text-primary\"\r\n                            placeholder=\"Student ID\"\r\n                            value={studentID}\r\n                            onChange={(e) =>\r\n                                this.setState({ studentID: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <input\r\n                            type=\"password\"\r\n                            className=\"signInSidebarTextBox form-control text-primary\"\r\n                            placeholder=\"Password\"\r\n                            value={password}\r\n                            onChange={(e) =>\r\n                                this.setState({ password: e.target.value })\r\n                            }\r\n                        />\r\n                        <br />\r\n                        <div className=\"card-footer bg-transparent border-primary\">\r\n                            <button\r\n                                id=\"btnSideBarSignIn\"\r\n                                type=\"submit\"\r\n                                className=\"btn btn-outline-success btn-lg\"\r\n                            >\r\n                                ورود\r\n                            </button>\r\n                            <button\r\n                                id=\"btnSideBarPasswordRecovery\"\r\n                                className=\"btn btn-outline-info btn-lg\"\r\n                            >\r\n                                بازیابی پسورد\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(SignInSideBar);\r\n","\r\n\r\nconst NewsSideBar = () => {\r\n    return ( \r\n        <div className=\"card newsSidebar border-success  mb-3\">\r\n            <div className=\"card-header text-center text-success border-success\">اطلاعیه</div>\r\n            <div className=\"card-body text-right\">\r\n                <p>متن خبر 1</p>\r\n                <p>متن خبر 2</p>\r\n                <p>متن خبر 3</p>\r\n                <p>متن خبر 4</p>\r\n                <p>blah blah blah</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default NewsSideBar;","import { useSelector } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst SmartPhoneNavigationBar = () => {\r\n\r\n  const player = useSelector(state => state.player);\r\n  return (\r\n    // 2. link items theme: make theme better\r\n\r\n    <nav className=\"navbar navbar-expand-lg nav-pills navbar-light bg-light text-right\">\r\n      <div className=\"container text-right\">\r\n        <div className=\"navbar-expand w-100\" id=\"navbarResponsive\">\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <div className=\"row\">\r\n              <li className=\"nav-item\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/\"\r\n                  exact\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  صفحه اصلی\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/gameDeck\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  بازی ها\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/ranking\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  رنکینگ\r\n                </NavLink>\r\n              </li>\r\n            </div>\r\n          </ul>\r\n          <hr />\r\n          <ul className=\"navbar-nav text-primary\">\r\n            <div className=\"row\">\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/gameRules\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  قوانین\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                <NavLink\r\n                  className=\"nav-link text-primary\"\r\n                  to=\"/contactInfo\"\r\n                  activeClassName=\"btn-outline-secondary text-dark\"\r\n                >\r\n                  تماس با ما\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item ml-2\">\r\n                {player ? (\r\n                  <NavLink\r\n                    className=\"navItems nav-link btn btn-outline-success btn-block mt-1 mr-lg-5\"\r\n                    to=\"/controlPanel\"\r\n                  >\r\n                    کنترل پنل\r\n                  </NavLink>\r\n                ) : (\r\n                  <NavLink\r\n                    className=\"navItems nav-link btn btn-outline-success btn-block mt-1 mr-lg-5\"\r\n                    to=\"/signUp\"\r\n                  >\r\n                    ثبت نام\r\n                  </NavLink>\r\n                )}\r\n              </li>\r\n            </div>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SmartPhoneNavigationBar;\r\n","export default __webpack_public_path__ + \"static/media/no-avatar.5e7c913e.png\";","import { Alert } from \"react-bootstrap\";\r\nimport noAvatar from \"./no-avatar.png\"; // definitely must be changed bro!\r\n\r\nconst PlayerInfoSideBar = (props) => {\r\n    const { player, inGame } = props;\r\n    return (\r\n        <div className=\"card playerInfoSideBar border-info mb-3\">\r\n            <div className=\"card-header text-center text-info border-info\">\r\n                {player.fullname}\r\n            </div>\r\n            <img\r\n                className=\"card-img-top playerAvatar\"\r\n                src={noAvatar}\r\n                alt=\"مشکلی در بارگذاری تصویر پیش آمد\"\r\n            />\r\n            <hr />\r\n            <div className=\"card-body\">\r\n                <ul className=\"list-group list-group-flush\">\r\n                    {inGame && (\r\n                        <li className=\"text-center list-group-item\">\r\n                            <Alert variant={inGame.index ? \"danger\" : \"primary\"}>\r\n                                <Alert.Heading>\r\n                                    {inGame.shape} : {inGame.score}\r\n                                </Alert.Heading>\r\n                                \r\n                            </Alert>\r\n                        </li>\r\n                    )}\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">امتیاز بازیکن</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.points}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد برد</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.wins}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد باخت</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.loses}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                    <li className=\" list-group-item\">\r\n                        <div className=\"row\">\r\n                            <p className=\"col-6 text-right\">تعداد تساوی</p>\r\n                            <p className=\"col-6 text-left\">\r\n                                {player.records.draws}\r\n                            </p>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerInfoSideBar;\r\n","export const LoadMe = (player) => ({\r\n    type: \"LOAD_ME\",\r\n    payload: player,\r\n});\r\n\r\nexport const UpdateMyRecords = () => ({\r\n    type: \"UPDATE_ME\",\r\n});\r\n\r\nexport const SignOut = () => ({\r\n    type: \"SIGN_OUT\",\r\n});\r\n\r\nexport const LoadOpponent = (opponent) => ({\r\n    type: \"LOAD_OPPONENT\",\r\n    payload: opponent,\r\n});\r\n\r\nexport const ResetOpponent = () => ({\r\n    type: \"RESET_OPPONENT\",\r\n});\r\n\r\nexport const SetRoom = (room) => ({\r\n    type: \"SET_ROOM\",\r\n    payload: room,\r\n});\r\n\r\nexport const SetGameID = (gameID) => ({\r\n    type: \"SET_GAME_ID\",\r\n    payload: gameID,\r\n});\r\n\r\nexport const UpdateScoreboard = (details) => ({\r\n    type: \"UPDATE_SCOREBOARD\",\r\n    payload: details ,\r\n});\r\n\r\nexport const CleanScoreboard = () => ({\r\n    type: \"CLEAN_SCOREBOARD\",\r\n});\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport NavigationBar from \"./NavigationBar\";\r\nimport SignInSideBar from \"./../sidebars/SignInSideBar\";\r\nimport NewsSideBar from \"./../sidebars/NewsSideBar\";\r\nimport { withRouter } from \"react-router\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport SmartPhoneNavigationBar from \"./SmartPhoneNavigationBar\";\r\nimport PlayerInfoSideBar from \"../sidebars/PlayerInfoSideBar\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LoadMe } from \"../dashboard/actions\";\r\nimport { Fragment } from \"react\";\r\nimport userServices from \"./../services/userServices\";\r\nimport gameServices from \"../services/gameServices\";\r\nconst MainLayout = (props) => {\r\n    const { pathname } = props.location;\r\n    //redux\r\n    const player = useSelector((state) => state.player);\r\n    const opponent = useSelector(state => state.opponent);\r\n    const scoreboard = useSelector(state => state.scoreboard);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const deviceIsDesktop = useMediaQuery({ query: \"(min-width: 1200px)\" });\r\n    const deviceIsSmartPhone = useMediaQuery({ query: \"(max-width: 768px)\" });\r\n    const deviceIsTablet =\r\n        !deviceIsDesktop && !deviceIsSmartPhone ? true : false;\r\n    // this method is for temporary use and for finding items that cause horizontal overflow causing horizontal scrollbar\r\n    // const findHorizontalOverflow = () => {\r\n    //     let docWidth = document.documentElement.offsetWidth;\r\n    //     [].forEach.call(document.querySelectorAll(\"*\"), function (el) {\r\n    //         if (el.offsetWidth > docWidth) {\r\n    //             console.log(\"here is the sabotage: \", el);\r\n    //         }\r\n    //     });\r\n    // };\r\n\r\n    //load player data after sign in\r\n    const userID = userServices.readUserID();\r\n    if (userID && !player) {\r\n        gameServices\r\n            .loadPlayerData(userID)\r\n            .then((result) => {\r\n                dispatch(LoadMe(result ? result : null));\r\n            })\r\n            .catch((err) => {\r\n                dispatch(LoadMe(null));\r\n            });\r\n    }\r\n\r\n    let pageLeftSideBars = <NewsSideBar />;\r\n    let pageRightSideBar = player ? (\r\n        <PlayerInfoSideBar player={player} inGame={scoreboard.me}/>\r\n    ) : (\r\n        <SignInSideBar />\r\n    ); // in case login hassnt been made\r\n\r\n    if (pathname === \"/signUp\") {\r\n        // || pathname === '/competitions'){ // this condition MUST change later\r\n        pageLeftSideBars = null; //change later\r\n        pageRightSideBar = null; // change then\r\n    }\r\n\r\n    if (pathname === \"/gameDeck\") {\r\n        // left sidebar must be opponents playerInfo\r\n        if(opponent){\r\n            pageLeftSideBars = <PlayerInfoSideBar player={opponent} inGame={scoreboard.opp}/>;\r\n        }\r\n        if (deviceIsSmartPhone) {\r\n            //this is temprory\r\n            // find a way for showing result in smartphone, without causing vertical scroll\r\n            pageLeftSideBars = null; //change later\r\n            pageRightSideBar = null; // change then\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <ToastContainer />\r\n            {deviceIsDesktop || deviceIsTablet ? (\r\n                <NavigationBar />\r\n            ) : (\r\n                <SmartPhoneNavigationBar />\r\n            )}\r\n            {deviceIsDesktop && (\r\n                <div className=\"row mx-auto w-100\">\r\n                    <div className=\"col-3\">{pageRightSideBar}</div>\r\n                    <div\r\n                        className={\r\n                            pageLeftSideBars !== null ? \"col-6\" : \"col-12\"\r\n                        }>\r\n                        {props.children}\r\n                    </div>\r\n                    <div className=\"col-3\">{pageLeftSideBars}</div>\r\n                </div>\r\n            )}\r\n            {deviceIsTablet && (\r\n                <div className=\"row mx-auto w-100\">\r\n                    <div\r\n                        className={\r\n                            pageLeftSideBars !== null ? \"col-8\" : \"col-12\"\r\n                        }>\r\n                        {props.children}\r\n                    </div>\r\n                    <div className=\"col-4\">{pageLeftSideBars}</div>\r\n                </div>\r\n            )}\r\n            {deviceIsSmartPhone && (\r\n                <div className=\"container mx-auto w-100\">\r\n                    {player ? (\r\n                        <div className=\"row w-100 mx-auto\">\r\n                            {pageRightSideBar}\r\n                        </div>\r\n                    ) : null}\r\n                    <div className=\"row w-100 mx-auto\">{pageLeftSideBars}</div>\r\n                    <div className=\"row w-100 mx-auto\">{props.children}</div>\r\n                </div>\r\n            )}\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default withRouter(MainLayout);\r\n","const SinglePlayerCard = ({rowNumber, name, points, wins, loses, draws }) => {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{rowNumber}</th>\r\n            <td>{name}</td>\r\n            <td>{points}</td>\r\n            <td>{wins}</td>\r\n            <td>{loses}</td>\r\n            <td>{draws}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SinglePlayerCard;\r\n","import { Card } from \"react-bootstrap\";\r\nimport SinglePlayerCard from \"./SinglePlayerCard\";\r\n\r\nconst AllPlayers = ({ players }) => {\r\n    return (\r\n        \r\n        <Card border=\"dark\" style={{ width: \"100%\", borderRadius: \"15px\" }}>\r\n            <Card.Header className=\"text-center\">رده بندی</Card.Header>\r\n                <table className=\"table table-striped table-bordered table-hover text-center\">\r\n                    <thead className=\"bg-info\">\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">نام بازیکن</th>\r\n                            <th scope=\"col\">امتیاز</th>\r\n                            <th scope=\"col\">تعداد برد</th>\r\n                            <th scope=\"col\">تعداد باخت</th>\r\n                            <th scope=\"col\">تعداد تساوی</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {players.map((player) => (\r\n                            <SinglePlayerCard\r\n                                key={player.userID}\r\n                                rowNumber={players.findIndex(p => p.userID === player.userID) + 1}\r\n                                name={player.fullname}\r\n                                points={player.records.points}\r\n                                wins={player.records.wins}\r\n                                loses={player.records.loses}\r\n                                draws={player.records.draws}\r\n                            ></SinglePlayerCard>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AllPlayers;\r\n","import { Component } from \"react\";\r\nimport AllPlayers from \"./AllPlayers\";\r\nimport userServices from \"./../services/userServices\";\r\nimport LoadingBar from \"../common/LoadingBar\";\r\n\r\nclass Ranking extends Component {\r\n    state = { players: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        (async () => {\r\n            this.setState({ loading: true });\r\n            const STATUS = { SUCCESSFULL: 200 };\r\n            const { data, status } = await userServices.getAllPlayers();\r\n            if (status === STATUS.SUCCESSFULL) return data.players;\r\n            return [];\r\n        })()\r\n            .then((result) => {\r\n                let tempPlayers = [...result];\r\n                this.setState({\r\n                    players: tempPlayers.sort( //sort priorities: 1. more points 2. more wins 3. less loses\r\n                        (p1, p2) =>\r\n                            p2.records.points - p1.records.points ||\r\n                            p2.records.wins - p1.records.wins ||\r\n                            p1.records.loses - p2.records.loses\r\n                    ),\r\n                    loading: false,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                //******* handle errors */\r\n                // console.log(err);\r\n                this.setState({ players: [], loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { players, loading } = this.state;\r\n        return (\r\n            <div className=\"row mt-3\">\r\n                {loading ? <LoadingBar loading={loading} /> : null}\r\n                <div className=\"col-12\">\r\n                    <AllPlayers players={players} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Ranking;\r\n","import { Component } from \"react\";\r\n\r\nclass ControlPanel extends Component {\r\n    // static contextType = MainContext;\r\n    // onSignOutClick = async () => {\r\n    //     this.context.signOutPlayer();\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"card border-success mb-3 signUpCard\">\r\n                <div className=\"card-header bg-transparent text-center border-success\">\r\n                    کنترل پنل\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger btn-block mt-4\"\r\n                        onClick={this.onSignOutClick} //temprory\r\n                    >\r\n                        خروج از حساب کاربری\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import config from \"./config.json\";\r\n\r\nconst createSocketRequest = (request, roomName, playerID, msg) =>\r\n    JSON.stringify({\r\n        request,\r\n        roomName,\r\n        playerID,\r\n        msg,\r\n    });\r\n\r\nconst connect = (roomName, playerID, gameType) => {\r\n    return new Promise((resolve, reject) => {\r\n        var server = new WebSocket(config.webSocketRoot);\r\n        server.onopen = () => {\r\n            server.send(createSocketRequest(\"join\", roomName, playerID, gameType)); //temp\r\n            resolve(server);\r\n        };\r\n\r\n        server.onerror = (error) => {\r\n            // console.log(`WebSocket error: ${error}`);\r\n            server.close();\r\n            reject(error);\r\n        };\r\n\r\n        server.onclose = () => {\r\n            // change\r\n            // setTimeout( () => {\r\n            //     connect(roomName, playerID);\r\n            //     console.log('reconnecting from onClose');\r\n            // }, 1000)\r\n            resolve(null);\r\n            // this part needs editing ? maybe not\r\n        };\r\n    });\r\n};\r\n\r\nconst socketServices = {\r\n    createSocketRequest,\r\n    connect,\r\n};\r\n\r\nexport default socketServices;","//ONLY for class components: purpose: using redux in class components\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    LoadMe,\r\n    UpdateMyRecords,\r\n    LoadOpponent,\r\n    ResetOpponent,\r\n    SetRoom,\r\n    SetGameID,\r\n    UpdateScoreboard,\r\n    CleanScoreboard,\r\n} from \"./actions\";\r\n// ***** remove the ones that arent used in class components => for memory management/ not necessary though\r\n// useSelector for functional components\r\n// state==>props : redux\r\n\r\nfunction withReduxDashboard(component) {\r\n    const mapStateToProps = (state) => ({\r\n        player: state.player,\r\n        opponent: state.opponent,\r\n        room: state.room,\r\n        scoreboard: state.scoreboard,\r\n    });\r\n\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LoadMe: (player) => dispatch(LoadMe(player)),\r\n        LoadOpponent: (opponent) => dispatch(LoadOpponent(opponent)),\r\n        UpdateMyRecords: () => dispatch(UpdateMyRecords()),\r\n        ResetOpponent: () => dispatch(ResetOpponent()),\r\n        SetRoom: (room) => dispatch(SetRoom(room)),\r\n        SetGameID: (gameID) => dispatch(SetGameID(gameID)),\r\n        UpdateScoreboard: (details) => dispatch(UpdateScoreboard(details)),\r\n        CleanScoreboard: () => dispatch(CleanScoreboard()),\r\n    });\r\n    return connect(mapStateToProps, mapDispatchToProps)(component);\r\n}\r\n\r\nexport default withReduxDashboard;\r\n// export const useDashboard = connect(mapStateToProps, mapDispatchToProps);\r\n","import { Component, Fragment } from \"react\";\r\nimport \"./games.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport gameServices from \"./../services/gameServices\";\r\nimport socketServices from \"../services/socketServices\";\r\nimport withReduxDashboard from \"../dashboard/withReduxDashboard\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nclass GamePlay extends Component {\r\n    //**** game resets on device change. fix it */\r\n    state = {\r\n        rowMarginRatio: 0,\r\n        players: [\r\n            {\r\n                // ID: '',\r\n                shape: \"X\",\r\n                color: \"cyan\",\r\n                lineColor: \"btn btn-primary\",\r\n                score: 0,\r\n            },\r\n            {\r\n                // ID: '',\r\n                shape: \"O\",\r\n                color: \"darkred\",\r\n                lineColor: \"btn btn-danger\",\r\n                score: 0,\r\n            },\r\n        ], // maybe use player actual user name and change this item to an object of objects?\r\n        turn: 0, // start turn is decided by throwning dices\r\n        dimension: 3,\r\n        table: null,\r\n        myTurn: undefined, // change this\r\n        gameID: null,\r\n        socketConnection: undefined,\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.connectionLost = false;\r\n        this.cellButtons = [];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"divTableBlock\" className=\"card border-dark gameBorderCard\">\r\n                <div className=\"form-inline w-100\">\r\n                    <p\r\n                        style={{ color: this.state.players[1].color }}\r\n                        className=\"w-50 text-center\">{`O: ${this.state.players[1].score}`}</p>\r\n                    <p\r\n                        style={{ color: this.state.players[0].color }}\r\n                        className=\"w-50 text-center\">{`X: ${this.state.players[0].score}`}</p>\r\n                </div>\r\n                {this.drawGameTable()}\r\n            </div>\r\n        );\r\n    }\r\n    LoadOpponentData = (opponentID) => {\r\n        const { opponent, LoadOpponent } = this.props;\r\n        if (!opponent && opponentID) {\r\n            gameServices\r\n                .loadPlayerData(opponentID)\r\n                .then((result) => {\r\n                    LoadOpponent(result ? result : null);\r\n                })\r\n                .catch((err) => {\r\n                    //console.log(err);\r\n                    LoadOpponent(null);\r\n                });\r\n        }\r\n    };\r\n\r\n    updateGameScorebaord = () => {\r\n        const { myTurn, players } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n\r\n        this.props.UpdateScoreboard({\r\n            me: {\r\n                index: myTurn,\r\n                shape: players[myTurn].shape,\r\n                score: players[myTurn].score,\r\n            },\r\n            opp: {\r\n                index: oppTurn,\r\n                shape: players[oppTurn].shape,\r\n                score: players[oppTurn].score,\r\n            },\r\n        });\r\n    };\r\n    socketOnMessage = (response) => {\r\n        const { data } = response;\r\n        const { command, msg } = JSON.parse(data);\r\n        if (command === \"SET_TURN\") {\r\n            this.setState({ myTurn: Number(msg) });\r\n        } else if (command === \"START\") {\r\n            const { myTurn } = this.state;\r\n            const { IDs, gameType } = msg;\r\n            const opponentIndex = Number(!myTurn);\r\n            this.setState({ dimension: gameType });\r\n            this.LoadOpponentData(IDs[opponentIndex]);\r\n        } else if (command === \"LOAD\") {\r\n            const { table, xScore, oScore, turn } = msg;\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                table,\r\n                players,\r\n                turn,\r\n            });\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"UPDATE\") {\r\n            const { player, room } = this.props;\r\n            // toast.warn('new-move-recieved');\r\n            //******** */ catch exceptions\r\n            // ****** UPDATE THIS PART **************************************//\r\n            const { newMove, cell, xScore, oScore } = msg; //is table needed to be sent every time to clients?\r\n\r\n            const cellID = Number(newMove);\r\n\r\n            //wrap it up this part of UPDATE and LOAD in a method\r\n            const players = [...this.state.players];\r\n            players[0].score = xScore;\r\n            players[1].score = oScore;\r\n            this.setState({\r\n                players,\r\n            });\r\n\r\n            this.state.socketConnection.send(\r\n                socketServices.createSocketRequest(\r\n                    \"moveRecieved\",\r\n                    room.name,\r\n                    player.userID,\r\n                    true\r\n                )\r\n            );\r\n            this.verifyAndApplyTheMove(cell, this.cellButtons[cellID]);\r\n            this.cellButtons[cellID].focus();\r\n            this.updateGameScorebaord();\r\n        } else if (command === \"END\") {\r\n            this.endGame();\r\n        }\r\n    };\r\n\r\n    forceConnectToWebSocket = async (nextJob) => {\r\n        const { player, room } = this.props;\r\n\r\n        try {\r\n            let socket = await socketServices.connect(\r\n                room.name,\r\n                player.userID,\r\n                room.type\r\n            );\r\n            socket.onmessage = this.socketOnMessage;\r\n            this.setState({ socketConnection: socket });\r\n            if (nextJob) nextJob();\r\n        } catch (err) {\r\n            console.log(err);\r\n\r\n            setTimeout(() => {\r\n                console.log(\"rconnecting from GamePlay\");\r\n                this.forceConnectToWebSocket(nextJob);\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    updateMarginParameters = (divTableBlock) => {\r\n        //const {deviceIsDesktop, deviceIsTablet, deviceIsSmartPhone} = this.context;\r\n        const rowMarginDevideOn = 12.4; // deviceIsDesktop ? 22 : (deviceIsTablet ? 14 : 6);\r\n        this.setState({\r\n            rowMarginRatio: divTableBlock.offsetWidth / rowMarginDevideOn,\r\n        });\r\n        //*** for now this method remain still but if the main container is in fixed pixels width, the hell is this needed? */\r\n    };\r\n\r\n    onTableBlockResize = (event) => {\r\n        this.updateMarginParameters(event.target);\r\n    };\r\n\r\n    initiateGameTimer = () => {\r\n        setInterval(() => {\r\n            if (window.navigator.onLine) {\r\n                if (this.connectionLost) {\r\n                    console.log(\"connected\");\r\n                    this.connectionLost = false;\r\n                    this.forceConnectToWebSocket(null);\r\n                }\r\n            } else {\r\n                console.log(\"dissconnected\");\r\n                this.connectionLost = true;\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.cellButtons = document.getElementsByClassName(\"gameTableCells\"); // pay attension to searched className! may cause an error\r\n\r\n        let divTableBlock = document.getElementById(\"divTableBlock\");\r\n        this.updateMarginParameters(divTableBlock);\r\n        divTableBlock.addEventListener(\"resize\", (event) =>\r\n            this.onTableBlockResize(event)\r\n        );\r\n\r\n        const { player, room } = this.props;\r\n        this.setState({ dimension: room.type });\r\n\r\n        this.forceConnectToWebSocket(() => {\r\n            this.state.socketConnection.send(\r\n                socketServices.createSocketRequest(\r\n                    \"load\",\r\n                    room.name,\r\n                    player.userID,\r\n                    null\r\n                )\r\n            );\r\n        });\r\n        this.initiateGameTimer();\r\n    }\r\n\r\n    getCellCoordinates = (cellID, dimen) => {\r\n        const cellFloor = Math.floor(cellID / (dimen * dimen));\r\n        const onFloorId = cellID % (dimen * dimen);\r\n        const cellRow = Math.floor(onFloorId / dimen);\r\n        const cellColumn = onFloorId % dimen;\r\n        // just test a random id to see how above formula works!\r\n        return { floor: cellFloor, row: cellRow, column: cellColumn };\r\n    };\r\n    onEachCellClick = (event) => {\r\n        const { dimension } = this.state;\r\n        const { player, opponent, room } = this.props;\r\n        if (opponent) {\r\n            try {\r\n                const selectedCellButton = event.target;\r\n\r\n                if (this.state.turn !== this.state.myTurn) {\r\n                    this.forceConnectToWebSocket(null);\r\n                    return;\r\n                }\r\n\r\n                const cell = this.getCellCoordinates(\r\n                    selectedCellButton.id,\r\n                    dimension\r\n                );\r\n\r\n                if (this.verifyAndApplyTheMove(cell, selectedCellButton)) {\r\n                    //send move to WebSocket Server\r\n                    this.forceConnectToWebSocket(() => {\r\n                        this.state.socketConnection.send(\r\n                            socketServices.createSocketRequest(\r\n                                \"move\",\r\n                                room.name,\r\n                                player.userID,\r\n                                selectedCellButton.id\r\n                            )\r\n                        );\r\n                        this.state.socketConnection.send(\r\n                            socketServices.createSocketRequest(\r\n                                \"load\",\r\n                                room.name,\r\n                                player.userID,\r\n                                null\r\n                            )\r\n                        );\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                //load again here?\r\n            }\r\n        }\r\n    };\r\n\r\n    verifyAndApplyTheMove = (cell, cellButton) => {\r\n        const { players, turn } = this.state;\r\n        let tempTable = [...this.state.table];\r\n        if (tempTable[cell.floor][cell.row][cell.column] === null) {\r\n            tempTable[cell.floor][cell.row][cell.column] = turn; //maybe its better to use players actual Id huh?\r\n            cellButton.innerHTML = players[turn].shape;\r\n            cellButton.style.color = players[turn].color;\r\n            this.setState({\r\n                turn: (turn + 1) % 2,\r\n                table: tempTable,\r\n            });\r\n            // time to inspect the new cell:\r\n            this.inspectAreaAroundTheCell(cell.floor, cell.row, cell.column);\r\n\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    inspectAreaAroundTheCell = (floor, row, column) => {\r\n        // inpect the table in all ways around a selected cell (new selected one), to update points and color the score routes\r\n        // is it needed to write a inspectAll method ?\r\n        const { players, table, dimension } = this.state;\r\n        const playerInTheCell = table[floor][row][column];\r\n        let rowCount = 0,\r\n            columnCount = 0,\r\n            floorMainDiagCount = 0,\r\n            floorSideDiagCount = 0;\r\n        let tableMainDiagCount = 0,\r\n            tableSideDiagCount = 0,\r\n            tableAltitudeCount = 0;\r\n        for (let i = 0; i < dimension; i++) {\r\n            if (table[floor][row][i] === playerInTheCell) rowCount++; // inspect in a row\r\n            if (table[floor][i][column] === playerInTheCell) columnCount++; // inspect in a column\r\n            if (table[i][row][column] === playerInTheCell) tableAltitudeCount++; // inspect in a altitude line\r\n            if (row === column) {\r\n                if (table[floor][i][i] === playerInTheCell)\r\n                    floorMainDiagCount++; // inspect in a 2D main diagonal line through the cell's floor\r\n                if (row === floor && table[i][i][i] === playerInTheCell)\r\n                    tableMainDiagCount++; // inspect in a 3D main diagonal line through the whole table\r\n            }\r\n            if (row + column + 1 === dimension) {\r\n                if (table[floor][i][dimension - i - 1] === playerInTheCell)\r\n                    floorSideDiagCount++; // inpect in a 2D side Diagonal line through the cell's floor\r\n                if (\r\n                    row === floor &&\r\n                    table[i][i][dimension - i - 1] === playerInTheCell\r\n                )\r\n                    tableSideDiagCount++; // inspect in a 3D side diagonal line through the whole table\r\n            }\r\n        }\r\n\r\n        // now inspect wether a line has been made and take action for it\r\n        this.connectTheScoreLines(\r\n            rowCount,\r\n            floor * dimension * dimension + row * dimension,\r\n            1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            columnCount,\r\n            floor * dimension * dimension + column,\r\n            dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorMainDiagCount,\r\n            floor * dimension * dimension,\r\n            dimension + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            floorSideDiagCount,\r\n            floor * dimension * dimension + (dimension - 1),\r\n            dimension - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableMainDiagCount,\r\n            0,\r\n            dimension * (dimension + 1) + 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableSideDiagCount,\r\n            dimension - 1,\r\n            dimension * (dimension + 1) - 1,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n        this.connectTheScoreLines(\r\n            tableAltitudeCount,\r\n            row * dimension + column,\r\n            dimension * dimension,\r\n            players[playerInTheCell],\r\n            dimension\r\n        );\r\n    };\r\n\r\n    // method below: checks each possible line(according to the condition that user gives it),\r\n    // if the line is made colorifies the line and returns 1 ( as one single score for each line checked ), otherwise returns 0\r\n    connectTheScoreLines = (count, firstCell, step, player, dimension) => {\r\n        if (count === dimension) {\r\n            for (let i = 0; i < dimension; i++) {\r\n                this.cellButtons[firstCell + i * step].className =\r\n                    \"gameTableCells \" + player.lineColor;\r\n                setTimeout(() => {\r\n                    this.cellButtons[firstCell + i * step].className =\r\n                        \"gameTableCells btn btn-outline-dark\";\r\n                }, 1000 + i * 100);\r\n            }\r\n        }\r\n    };\r\n\r\n    endGame = async () => {\r\n        //*******************important:\r\n        //ADD TRY CATCHimport socketServices from './../services/socketServices';\r\n        //*************edit: this.context.gatherPlayerData();\r\n        this.props.UpdateMyRecords(); //resets redux.state.player => forces MainLayout to reload player data and records\r\n\r\n        const { players, myTurn } = this.state;\r\n        const oppTurn = Number(!myTurn);\r\n        if (players[myTurn].score > players[oppTurn].score)\r\n            toast.success(\"شما برنده شدید و سه امتیاز کسب کردید\");\r\n        else if (players[myTurn].score === players[oppTurn].score)\r\n            toast.info(\"شما مساوی شدید و یک امتیاز کسب کردید\");\r\n        else toast.error(\"تکبیر!\");\r\n        //reset everything:\r\n        setTimeout(() => {\r\n            this.props.CleanScoreboard();\r\n            this.props.ResetOpponent();\r\n            this.props.SetRoom(null);\r\n            this.props.history.replace(\"/\"); // in competition mode must be send back to competition page\r\n        }, 5000);\r\n    };\r\n    drawGameTable = () => {\r\n        // *****************note: when window size changes: table's selected cells are cleared\r\n        // use this.state.table to load again*****************\r\n        const { rowMarginRatio, dimension } = this.state;\r\n        // initialize rows columns floors\r\n\r\n        try {\r\n            if (!this.state.table) {\r\n                return \"...در حال اتصال\";\r\n            } else {\r\n                let dimens = [];\r\n                for (let i = 0; i < dimension; i++) dimens.push(i);\r\n                const { table, players } = this.state;\r\n                // drawing the table and setting id s and click events\r\n                return dimens.map((floor) => (\r\n                    <Fragment>\r\n                        {dimens.map((row) => (\r\n                            <div\r\n                                style={{\r\n                                    marginLeft: `${row * rowMarginRatio}px`,\r\n                                }}>\r\n                                {dimens.map((column) => (\r\n                                    <button\r\n                                        key={\r\n                                            floor * dimension * dimension +\r\n                                            row * dimension +\r\n                                            column\r\n                                        }\r\n                                        type=\"button\"\r\n                                        className=\"gameTableCells btn btn-outline-dark\"\r\n                                        style={\r\n                                            table[floor][row][column] !== null\r\n                                                ? {\r\n                                                      color: players[\r\n                                                          table[floor][row][\r\n                                                              column\r\n                                                          ]\r\n                                                      ].color,\r\n                                                  }\r\n                                                : null\r\n                                        }\r\n                                        id={\r\n                                            floor * dimension * dimension +\r\n                                            row * dimension +\r\n                                            column\r\n                                        }\r\n                                        onClick={(event) =>\r\n                                            this.onEachCellClick(event)\r\n                                        }>\r\n                                        {table[floor][row][column] !== null &&\r\n                                            players[table[floor][row][column]]\r\n                                                .shape}\r\n                                    </button>\r\n                                ))}\r\n                            </div>\r\n                        ))}\r\n                        <br />\r\n                    </Fragment>\r\n                ));\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            return null;\r\n        }\r\n    };\r\n}\r\n\r\nexport default withReduxDashboard(withRouter(GamePlay));\r\n\r\n//another way to check online / offline status :\r\n// initiateGameTimer = () => {\r\n//     setInterval(() => {\r\n//         if (window.navigator.onLine) {\r\n//             if (this.connectionLost) {\r\n//                 console.log(\"connected\");\r\n//                 this.connectionLost = false;\r\n//                 this.forceConnectToWebSocket(null);\r\n//             }\r\n//         } else {\r\n//             console.log(\"dissconnected\");\r\n//             this.connectionLost = true;\r\n//         }\r\n//         /*this.isOnline(\r\n//             () => {\r\n//                 if (this.connectionLost) {\r\n//                     console.log(\"connected\");\r\n//                     this.connectionLost = false;\r\n//                     this.forceConnectToWebSocket(null);\r\n//                 }\r\n//             },\r\n//             () => {\r\n//                 console.log(\"dissconnected\");\r\n//                 this.connectionLost = true;\r\n//             }\r\n//         );*/\r\n//     }, 1000);\r\n// };\r\n\r\n// /*    isOnline = (success, failure) => {\r\n//     var xhr = XMLHttpRequest\r\n//         ? new XMLHttpRequest()\r\n//         : new window.ActiveXObject(\"Microsoft.XMLHttp\");\r\n//     xhr.onload = function () {\r\n//         if (success instanceof Function) {\r\n//             success();\r\n//         }\r\n//     };\r\n//     xhr.onerror = function () {\r\n//         if (failure instanceof Function) {\r\n//             failure();\r\n//         }\r\n//     };\r\n//      xhr.open(\"GET\", \"https://t3dweb.herokuapp.com/users\", true);//edit this ******************************\r\n//      xhr.send();\r\n// }; */\r\n","import { Fragment, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { SetRoom } from \"../dashboard/actions\";\r\n\r\nconst RoomManager = () => {\r\n    const [roomName, setRoomName] = useState(\"\");\r\n    const [gameType, setGameType] = useState(4);\r\n    const player = useSelector((state) => state.player);\r\n    const dispatch = useDispatch();\r\n\r\n    const onStartGameClick = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!player) {\r\n            toast.error(\"ابتدا وارد حساب کاربری خود شوید\");\r\n            return;\r\n        }\r\n\r\n        dispatch(SetRoom({roomName, gameType})); //set redux state room => roomname\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"card border-warning mb-3 singleCard\">\r\n                <div className=\"card-header text-center border-warning\">\r\n                    اتصال بازیکنان\r\n                </div>\r\n                <div className=\"card-body text-right\">\r\n                    <form onSubmit={(event) => onStartGameClick(event)}>\r\n                        <div className=\"form-inline\">\r\n                            <label className=\"w-25\">ابعاد جدول بازی</label>\r\n                            <label style={{border: '1px solid grey', borderRadius: '15px', padding: '5px'}} className=\"w-25\"><input\r\n                                type=\"radio\"\r\n                                className=\"mx-auto form-control\"\r\n                                value=\"3\"\r\n                                checked={gameType === 3}\r\n                                onChange={() => setGameType(3)} />\r\n                                3x3x3\r\n                            </label>\r\n                            <label style={{border: '1px solid grey', borderRadius: '15px', padding: '5px'}} className=\"w-25 \">\r\n                            <input\r\n                                type=\"radio\"\r\n                                className=\"mx-auto form-control\"\r\n                                value=\"4\"\r\n                                checked={gameType === 4}\r\n                                onChange={() => setGameType(4)} />\r\n                                4x4x4 \r\n                            </label>\r\n                            <label style={{border: '1px solid grey', borderRadius: '15px', padding: '5px'}} className=\"w-25\">\r\n                            <input\r\n                                type=\"radio\"\r\n                                className=\"mx-auto form-control\"\r\n                                value=\"5\"\r\n                                checked={gameType === 5}\r\n                                onChange={() => setGameType(5)} />\r\n                                5x5x5\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"form-inline mt-3\">\r\n                            <label className=\"w-25\">نام روم</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control w-75\"\r\n                                placeholder=\"Room Name\"\r\n                                value={roomName}\r\n                                required=\"required\"\r\n                                onChange={(event) =>\r\n                                    setRoomName(event.target.value)\r\n                                }\r\n                            />\r\n                        </div>\r\n\r\n                        <button\r\n                            type=\"submit\"\r\n                            className=\"btn btn-success btn-block mt-4\">\r\n                            شروع بازی\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default RoomManager;\r\n","import GamePlay from './GamePlay';\r\nimport { useSelector } from \"react-redux\";\r\nimport { Fragment } from 'react';\r\nimport RoomManager from './RoomManager';\r\n\r\nconst GameDeck = () => {\r\n    const room = useSelector(state => state.room);\r\n\r\n    return ( \r\n        <Fragment>\r\n            {room ? <GamePlay /> : <RoomManager />}\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default GameDeck;\r\n","import { Component } from \"react\";\r\nimport ScoresTable from \"./tables/ScoresTable\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport GameRules from \"./informations/GameRules\";\r\nimport ContactInfo from \"./informations/ContactInfo\";\r\nimport SignUp from \"./users/SignUp\";\r\nimport MainLayout from \"./common/MainLayout\";\r\nimport Ranking from \"./tables/Ranking\";\r\nimport ControlPanel from './users/ControlPanel';\r\nimport GameDeck from './games/GameDeck';\r\n\r\nclass App extends Component {\r\n    // 1. use uuid to produce ids\r\n    // state = {  }\r\n    \r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path=\"/signUp\" component={SignUp} />\r\n                    <Route path=\"/gameDeck\" component={GameDeck} />\r\n                    <Route path=\"/ranking\" component={Ranking} />\r\n                    <Route path=\"/gameRules\" component={GameRules} />\r\n                    <Route path=\"/contactInfo\" component={ContactInfo} />\r\n                    <Route path=\"/\" exact component={ScoresTable} />\r\n                    <Route path=\"/controlPanel\" exact component={ControlPanel} />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { playerReducer } from \"./player\";\r\nimport { opponentReducer } from \"./opponent\";\r\nimport { roomReducer } from './room';\r\nimport { scoreboardReducer } from './scoreboard';\r\n\r\nexport const reducers = combineReducers({\r\n    player: playerReducer,\r\n    opponent: opponentReducer,\r\n    room: roomReducer,\r\n    scoreboard: scoreboardReducer\r\n});\r\n","export const playerReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_ME\":\r\n            return action.payload;\r\n\r\n        case \"UPDATE_ME\":\r\n            return null; //sets state.player => null, forces Mainlayout to reload and update state.player data\r\n\r\n        case \"SIGN_OUT\": {\r\n            sessionStorage.clear();\r\n            return null;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const opponentReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"LOAD_OPPONENT\":\r\n            return action.payload;\r\n        case \"RESET_OPPONENT\":\r\n            return null;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","export const roomReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"SET_ROOM\":\r\n            const {roomName, gameType} = action.payload;\r\n            return {name: roomName, type: gameType};\r\n        // case \"SET_GAME_ID\":\r\n        //     return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n};","// simple scoreboard for player's live games\r\n\r\nexport const scoreboardReducer = (state = {me: null, opp: null}, action) => {\r\n    switch (action.type) {\r\n        case \"UPDATE_SCOREBOARD\":\r\n            return action.payload; // payload === {me: {shape: , score: }, opp: 0} // null for ended or not started games : {me: null, opp: null}\r\n        case \"CLEAN_SCOREBAORD\":\r\n            return {me: null, opp: null};\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from \"redux\";\r\nimport { reducers } from \"../reducers\";\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //temp: enable chrome redux manager extension\r\n);\r\n\r\n//dispatch\r\n// store.subscribe(() => console.log(store.getState()));","import { render } from \"react-dom\";\r\nimport App from \"./App.js\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./dashboard/store/index\";\r\n\r\nrender(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}